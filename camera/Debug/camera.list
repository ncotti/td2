
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009748  08009748  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010788  2000007c  080097cc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010804  080097cc  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fbd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6a  00000000  00000000  00039069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9a7  00000000  00000000  0003f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c23  00000000  00000000  00059de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985b0  00000000  00000000  00072a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010afba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000604c  00000000  00000000  0010b00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009484 	.word	0x08009484

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009484 	.word	0x08009484

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vCameraInit>:
 * FUNCTIONS
 *****************************************************************************/
/*
 * @brief: Resource initialization for the camera operation.
 */
void vCameraInit(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8

	vCameraDisablePCLKIRQ();
 800059a:	2006      	movs	r0, #6
 800059c:	f001 fd96 	bl	80020cc <HAL_NVIC_DisableIRQ>
	vCameraDisableHREFIRQ();
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f001 fd93 	bl	80020cc <HAL_NVIC_DisableIRQ>
	vCameraDisableVSYNCIRQ();
 80005a6:	2007      	movs	r0, #7
 80005a8:	f001 fd90 	bl	80020cc <HAL_NVIC_DisableIRQ>

	if ((xCameraSemUart = xSemaphoreCreateBinary()) == NULL) {
 80005ac:	2203      	movs	r2, #3
 80005ae:	2100      	movs	r1, #0
 80005b0:	2001      	movs	r0, #1
 80005b2:	f004 ff43 	bl	800543c <xQueueGenericCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a2c      	ldr	r2, [pc, #176]	; (800066c <vCameraInit+0xd8>)
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <vCameraInit+0xd8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <vCameraInit+0x3a>
		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed to create sem for uart.");
 80005c4:	482a      	ldr	r0, [pc, #168]	; (8000670 <vCameraInit+0xdc>)
 80005c6:	f000 fda5 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 80005ca:	f001 fc0a 	bl	8001de2 <vToolsErrorRoutine>
	}

	if ( xTaskCreate(
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <vCameraInit+0xe0>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005dc:	4926      	ldr	r1, [pc, #152]	; (8000678 <vCameraInit+0xe4>)
 80005de:	4827      	ldr	r0, [pc, #156]	; (800067c <vCameraInit+0xe8>)
 80005e0:	f005 fd4f 	bl	8006082 <xTaskCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d004      	beq.n	80005f4 <vCameraInit+0x60>
			NULL,
			cameraTASK_CONTROLLER_PRIORITY,
			&xCameraTaskControllerHandle ) != pdPASS) {

		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed to create task.");
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <vCameraInit+0xec>)
 80005ec:	f000 fd92 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 80005f0:	f001 fbf7 	bl	8001de2 <vToolsErrorRoutine>

	}

	if ((xCameraImageQueue = xQueueCreate(cameraQUEUE_LENGHT, sizeof(msg_t))) == NULL) {
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80005fa:	2078      	movs	r0, #120	; 0x78
 80005fc:	f004 ff1e 	bl	800543c <xQueueGenericCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <vCameraInit+0xf0>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <vCameraInit+0xf0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d104      	bne.n	8000618 <vCameraInit+0x84>
		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed to create image queue.");
 800060e:	481e      	ldr	r0, [pc, #120]	; (8000688 <vCameraInit+0xf4>)
 8000610:	f000 fd80 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 8000614:	f001 fbe5 	bl	8001de2 <vToolsErrorRoutine>
	}

	if ( xTaskCreate(prvCameraTaskUart,
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <vCameraInit+0xf8>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2302      	movs	r3, #2
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000626:	491a      	ldr	r1, [pc, #104]	; (8000690 <vCameraInit+0xfc>)
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <vCameraInit+0x100>)
 800062a:	f005 fd2a 	bl	8006082 <xTaskCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d004      	beq.n	800063e <vCameraInit+0xaa>
			NULL,
			cameraTASK_UART_PRIORITY,
			&xCameraTaskUartHandle) != pdPASS ) {

		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed to create task.");
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <vCameraInit+0xec>)
 8000636:	f000 fd6d 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 800063a:	f001 fbd2 	bl	8001de2 <vToolsErrorRoutine>
	}

	if ( xTaskCreate(prvCriticalTask,
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <vCameraInit+0x104>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2307      	movs	r3, #7
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4914      	ldr	r1, [pc, #80]	; (800069c <vCameraInit+0x108>)
 800064c:	4814      	ldr	r0, [pc, #80]	; (80006a0 <vCameraInit+0x10c>)
 800064e:	f005 fd18 	bl	8006082 <xTaskCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d004      	beq.n	8000662 <vCameraInit+0xce>
			NULL,
			cameraTASK_CRITICAL_PRIORITY,
			&xCameraTaskCriticalHandle) != pdPASS ) {

		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed to create task.");
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <vCameraInit+0xec>)
 800065a:	f000 fd5b 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 800065e:	f001 fbc0 	bl	8001de2 <vToolsErrorRoutine>
	}

	vCameraRegInit();
 8000662:	f000 fbad 	bl	8000dc0 <vCameraRegInit>
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000a8 	.word	0x200000a8
 8000670:	0800949c 	.word	0x0800949c
 8000674:	20000098 	.word	0x20000098
 8000678:	080094bc 	.word	0x080094bc
 800067c:	08000739 	.word	0x08000739
 8000680:	080094cc 	.word	0x080094cc
 8000684:	200000a4 	.word	0x200000a4
 8000688:	080094e4 	.word	0x080094e4
 800068c:	2000009c 	.word	0x2000009c
 8000690:	08009504 	.word	0x08009504
 8000694:	080006a5 	.word	0x080006a5
 8000698:	200000a0 	.word	0x200000a0
 800069c:	08009510 	.word	0x08009510
 80006a0:	08000895 	.word	0x08000895

080006a4 <prvCameraTaskUart>:
 * RTOS TASKS
 *****************************************************************************/
/*
 * 	@brief	RTOS task that handles the UART communication for the camera pixels.
 */
static void prvCameraTaskUart (void* pvParameters) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0a6      	sub	sp, #152	; 0x98
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	uint8_t pucUartRx [4];

	void (*pfOptions[])(void) = {
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <prvCameraTaskUart+0x8c>)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4611      	mov	r1, r2
 80006b4:	2288      	movs	r2, #136	; 0x88
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 ffcd 	bl	8008656 <memcpy>
			vCameraManualAGCAEC, vCameraAutoAGCAEC
	};

	while (1) {
		do{
			HAL_UART_Receive_IT(&huart2, pucUartRx, 4);
 80006bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006c0:	2204      	movs	r2, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <prvCameraTaskUart+0x90>)
 80006c6:	f003 fca6 	bl	8004016 <HAL_UART_Receive_IT>
			ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ce:	2001      	movs	r0, #1
 80006d0:	f006 fd5c 	bl	800718c <ulTaskNotifyTake>
		}while(pucUartRx[0] != cameraSTART_OF_ORDER || pucUartRx[3] != cameraEND_OF_ORDER);
 80006d4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80006d8:	2bfa      	cmp	r3, #250	; 0xfa
 80006da:	d1ef      	bne.n	80006bc <prvCameraTaskUart+0x18>
 80006dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006e0:	2bfe      	cmp	r3, #254	; 0xfe
 80006e2:	d1eb      	bne.n	80006bc <prvCameraTaskUart+0x18>

		if (pucUartRx[1] == 0xFF) {
 80006e4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80006e8:	2bff      	cmp	r3, #255	; 0xff
 80006ea:	d10c      	bne.n	8000706 <prvCameraTaskUart+0x62>
			if (pucUartRx[2] < sizeof(pfOptions) / sizeof(pfOptions[0])) {
 80006ec:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006f0:	2b21      	cmp	r3, #33	; 0x21
 80006f2:	d8e3      	bhi.n	80006bc <prvCameraTaskUart+0x18>
				pfOptions[pucUartRx[2]]();
 80006f4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	3398      	adds	r3, #152	; 0x98
 80006fc:	443b      	add	r3, r7
 80006fe:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000702:	4798      	blx	r3
 8000704:	e7da      	b.n	80006bc <prvCameraTaskUart+0x18>
			}
		}

		else if (pucUartRx[1] == 0xFE) {
 8000706:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800070a:	2bfe      	cmp	r3, #254	; 0xfe
 800070c:	d106      	bne.n	800071c <prvCameraTaskUart+0x78>
			vStepperChangeVelocity((uint16_t) pucUartRx[2]);
 800070e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000712:	b29b      	uxth	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 ff7b 	bl	8001610 <vStepperChangeVelocity>
 800071a:	e7cf      	b.n	80006bc <prvCameraTaskUart+0x18>
		}

		else {
			vCameraSetReg(pucUartRx[1], pucUartRx[2]);
 800071c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000720:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa94 	bl	8000c54 <vCameraSetReg>
	while (1) {
 800072c:	e7c6      	b.n	80006bc <prvCameraTaskUart+0x18>
 800072e:	bf00      	nop
 8000730:	08009520 	.word	0x08009520
 8000734:	200003b0 	.word	0x200003b0

08000738 <prvCameraTaskController>:


/*
 * 	@brief: RTOS task that handles photo petitions.
 */
static void prvCameraTaskController(void* pvParameters) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b0d4      	sub	sp, #336	; 0x150
 800073c:	af00      	add	r7, sp, #0
 800073e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000746:	6018      	str	r0, [r3, #0]

	msg_t xMsg;
	uint16_t i;

	if (xCameraProbe() == pdFAIL) {
 8000748:	f000 fad4 	bl	8000cf4 <xCameraProbe>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <prvCameraTaskController+0x26>
		#ifdef mainDEBUG
		vDebugErrorRoutine("Failed connection to camera.");
 8000752:	4848      	ldr	r0, [pc, #288]	; (8000874 <prvCameraTaskController+0x13c>)
 8000754:	f000 fcde 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 8000758:	f001 fb43 	bl	8001de2 <vToolsErrorRoutine>
 800075c:	e002      	b.n	8000764 <prvCameraTaskController+0x2c>
	}

	else {
		#ifdef mainDEBUG
		vDebugSuccessRoutine("Camera Working.");
 800075e:	4846      	ldr	r0, [pc, #280]	; (8000878 <prvCameraTaskController+0x140>)
 8000760:	f000 fce6 	bl	8001130 <vDebugSuccessRoutine>
		#endif
	}

	vCameraReset();
 8000764:	f000 fa98 	bl	8000c98 <vCameraReset>

	xSemaphoreGive(xCameraSemUart);
 8000768:	4b44      	ldr	r3, [pc, #272]	; (800087c <prvCameraTaskController+0x144>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	f004 feef 	bl	8005554 <xQueueGenericSend>

	while(1) {

		if (xQueueReceive(xCameraImageQueue, &xMsg, pdMS_TO_TICKS(cameraQUEUE_READ_TIMEOUT)) == pdTRUE) {
 8000776:	4b42      	ldr	r3, [pc, #264]	; (8000880 <prvCameraTaskController+0x148>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f107 0108 	add.w	r1, r7, #8
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	4618      	mov	r0, r3
 8000782:	f005 f90d 	bl	80059a0 <xQueueReceive>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d1f4      	bne.n	8000776 <prvCameraTaskController+0x3e>

			if (xMsg.usRow == 0) {
 800078c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000790:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000794:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10b      	bne.n	80007b4 <prvCameraTaskController+0x7c>
				xSemaphoreTake(xCameraSemUart, portMAX_DELAY);
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <prvCameraTaskController+0x144>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 f9db 	bl	8005b60 <xQueueSemaphoreTake>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t *) cameraSOF_HEADER, sizeof(cameraSOF_HEADER) - 1);
 80007aa:	2206      	movs	r2, #6
 80007ac:	4935      	ldr	r1, [pc, #212]	; (8000884 <prvCameraTaskController+0x14c>)
 80007ae:	4836      	ldr	r0, [pc, #216]	; (8000888 <prvCameraTaskController+0x150>)
 80007b0:	f003 fc62 	bl	8004078 <HAL_UART_Transmit_DMA>
			}

			xSemaphoreTake(xCameraSemUart, portMAX_DELAY);
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <prvCameraTaskController+0x144>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 f9cf 	bl	8005b60 <xQueueSemaphoreTake>

			// The first 4 bytes weren't read, fill with trash
			for (i = 0; i < 4; i++){
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
 80007c8:	e00c      	b.n	80007e4 <prvCameraTaskController+0xac>
				xMsg.pucBuffer[i] = 0xFF;
 80007ca:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80007ce:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80007d2:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80007d6:	21ff      	movs	r1, #255	; 0xff
 80007d8:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < 4; i++){
 80007da:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80007de:	3301      	adds	r3, #1
 80007e0:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
 80007e4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d9ee      	bls.n	80007ca <prvCameraTaskController+0x92>
			}

			// Take as many bytes as were read, and complete the rest of the image with the garbage ones.
			xMsg.usBytes -= 4;
 80007ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80007f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80007f4:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80007f8:	3b04      	subs	r3, #4
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000800:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000804:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
			i = cameraQUEUE_ITEM_SIZE - xMsg.usBytes;
 8000808:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800080c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000810:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8000814:	f5c3 739c 	rsb	r3, r3, #312	; 0x138
 8000818:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e

			HAL_UART_Transmit_DMA(&huart2, &xMsg.pucBuffer[i], cameraQUEUE_ITEM_SIZE );
 800081c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8000820:	f107 0208 	add.w	r2, r7, #8
 8000824:	4413      	add	r3, r2
 8000826:	f44f 729c 	mov.w	r2, #312	; 0x138
 800082a:	4619      	mov	r1, r3
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <prvCameraTaskController+0x150>)
 800082e:	f003 fc23 	bl	8004078 <HAL_UART_Transmit_DMA>

			xSemaphoreTake(xCameraSemUart, portMAX_DELAY);
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <prvCameraTaskController+0x144>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800083a:	4618      	mov	r0, r3
 800083c:	f005 f990 	bl	8005b60 <xQueueSemaphoreTake>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t *) cameraEOR_FOOTER, sizeof(cameraEOR_FOOTER) - 1);
 8000840:	2206      	movs	r2, #6
 8000842:	4912      	ldr	r1, [pc, #72]	; (800088c <prvCameraTaskController+0x154>)
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <prvCameraTaskController+0x150>)
 8000846:	f003 fc17 	bl	8004078 <HAL_UART_Transmit_DMA>


			if (xMsg.usRow == cameraH - 1) {
 800084a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800084e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000852:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8000856:	2b77      	cmp	r3, #119	; 0x77
 8000858:	d18d      	bne.n	8000776 <prvCameraTaskController+0x3e>
				xSemaphoreTake(xCameraSemUart, portMAX_DELAY);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <prvCameraTaskController+0x144>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000862:	4618      	mov	r0, r3
 8000864:	f005 f97c 	bl	8005b60 <xQueueSemaphoreTake>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t *) cameraEOF_FOOTER, sizeof(cameraEOF_FOOTER) - 1);
 8000868:	2206      	movs	r2, #6
 800086a:	4909      	ldr	r1, [pc, #36]	; (8000890 <prvCameraTaskController+0x158>)
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <prvCameraTaskController+0x150>)
 800086e:	f003 fc03 	bl	8004078 <HAL_UART_Transmit_DMA>
		if (xQueueReceive(xCameraImageQueue, &xMsg, pdMS_TO_TICKS(cameraQUEUE_READ_TIMEOUT)) == pdTRUE) {
 8000872:	e780      	b.n	8000776 <prvCameraTaskController+0x3e>
 8000874:	080095a8 	.word	0x080095a8
 8000878:	080095c8 	.word	0x080095c8
 800087c:	200000a8 	.word	0x200000a8
 8000880:	200000a4 	.word	0x200000a4
 8000884:	080095d8 	.word	0x080095d8
 8000888:	200003b0 	.word	0x200003b0
 800088c:	080095e0 	.word	0x080095e0
 8000890:	080095e8 	.word	0x080095e8

08000894 <prvCriticalTask>:
 * 			HREF stops. During photo's byte transfers, the RTOS scheduler context switches
 * 			may cause a byte to be missed, and corrupt the whole image. Therefore, the RTOS
 * 			scheduler is suspended to ensure picture integrity. Besides, the sole act of pausing
 * 			the scheduler may produce a missing byte in one of the first 4 bytes.
 */
static void prvCriticalTask(void* pvParameters) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	while(1) {
		vTaskSuspend(NULL);
 800089c:	2000      	movs	r0, #0
 800089e:	f005 fd71 	bl	8006384 <vTaskSuspend>
		vTaskSuspendAll();
 80008a2:	f005 ff0f 	bl	80066c4 <vTaskSuspendAll>
		ucExitCritical = 0;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <prvCriticalTask+0x28>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		while( ! ucExitCritical) {
 80008ac:	bf00      	nop
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <prvCriticalTask+0x28>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0fb      	beq.n	80008ae <prvCriticalTask+0x1a>
			// delay while pixels are read.
		}
		xTaskResumeAll();
 80008b6:	f005 ff13 	bl	80066e0 <xTaskResumeAll>
		vTaskSuspend(NULL);
 80008ba:	e7ef      	b.n	800089c <prvCriticalTask+0x8>
 80008bc:	200000ac 	.word	0x200000ac

080008c0 <vCameraTestPatternOn>:
#include "camera_api.h"

/******************************************************************************
 * TESTING
 *****************************************************************************/
void vCameraTestPatternOn(void) {vCameraChangeRegBit(SCALING_YSC, 7, cameraON);}
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	2201      	movs	r2, #1
 80008c6:	2107      	movs	r1, #7
 80008c8:	2071      	movs	r0, #113	; 0x71
 80008ca:	f000 f97b 	bl	8000bc4 <vCameraChangeRegBit>
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <vCameraTestPatternOff>:

void vCameraTestPatternOff(void) {vCameraChangeRegBit(SCALING_YSC, 7, cameraOFF);}
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	2107      	movs	r1, #7
 80008da:	2071      	movs	r0, #113	; 0x71
 80008dc:	f000 f972 	bl	8000bc4 <vCameraChangeRegBit>
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <vCameraColorBarOn>:

void vCameraColorBarOn(void) {vCameraChangeRegBit(COM7, 1, cameraON);}
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	2012      	movs	r0, #18
 80008ee:	f000 f969 	bl	8000bc4 <vCameraChangeRegBit>
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <vCameraColorBarOff>:

void vCameraColorBarOff(void) {vCameraChangeRegBit(COM7, 1, cameraOFF);}
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	2012      	movs	r0, #18
 8000900:	f000 f960 	bl	8000bc4 <vCameraChangeRegBit>
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <vCameraHMirrorOn>:


/******************************************************************************
 * CONTROL
 *****************************************************************************/
void vCameraHMirrorOn(void) {vCameraChangeRegBit(MVFP, 5, cameraON);}
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
 800090c:	2201      	movs	r2, #1
 800090e:	2105      	movs	r1, #5
 8000910:	201e      	movs	r0, #30
 8000912:	f000 f957 	bl	8000bc4 <vCameraChangeRegBit>
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <vCameraHMirrorOff>:
void vCameraHMirrorOff(void) {vCameraChangeRegBit(MVFP, 5, cameraOFF);}
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	201e      	movs	r0, #30
 8000924:	f000 f94e 	bl	8000bc4 <vCameraChangeRegBit>
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <vCameraVFlipOn>:

void vCameraVFlipOn(void) {vCameraChangeRegBit(MVFP, 4, cameraON);}
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
 8000930:	2201      	movs	r2, #1
 8000932:	2104      	movs	r1, #4
 8000934:	201e      	movs	r0, #30
 8000936:	f000 f945 	bl	8000bc4 <vCameraChangeRegBit>
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <vCameraVFlipOff>:
void vCameraVFlipOff(void) {vCameraChangeRegBit(MVFP, 4, cameraOFF);}
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	201e      	movs	r0, #30
 8000948:	f000 f93c 	bl	8000bc4 <vCameraChangeRegBit>
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <vCameraFreezeAGCAEC>:

void vCameraFreezeAGCAEC(void) {vCameraChangeRegBit(COM9, 0, cameraON);}
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
 8000954:	2201      	movs	r2, #1
 8000956:	2100      	movs	r1, #0
 8000958:	2014      	movs	r0, #20
 800095a:	f000 f933 	bl	8000bc4 <vCameraChangeRegBit>
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}

08000962 <vCameraUnfreezeAGCAEC>:
void vCameraUnfreezeAGCAEC(void) {vCameraChangeRegBit(COM9, 0, cameraOFF);}
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2014      	movs	r0, #20
 800096c:	f000 f92a 	bl	8000bc4 <vCameraChangeRegBit>
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <vCameraManualAGCAEC>:

void vCameraManualAGCAEC(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(COM8, 0, cameraOFF);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2013      	movs	r0, #19
 800097e:	f000 f921 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM8, 2, cameraOFF);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	2013      	movs	r0, #19
 8000988:	f000 f91c 	bl	8000bc4 <vCameraChangeRegBit>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <vCameraAutoAGCAEC>:

void vCameraAutoAGCAEC(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(COM8, 0, cameraON);
 8000994:	2201      	movs	r2, #1
 8000996:	2100      	movs	r1, #0
 8000998:	2013      	movs	r0, #19
 800099a:	f000 f913 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM8, 2, cameraON);
 800099e:	2201      	movs	r2, #1
 80009a0:	2102      	movs	r1, #2
 80009a2:	2013      	movs	r0, #19
 80009a4:	f000 f90e 	bl	8000bc4 <vCameraChangeRegBit>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <vCameraRGB565>:

void vCameraRGB565(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(COM7, 0, cameraOFF);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2012      	movs	r0, #18
 80009b6:	f000 f905 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM7, 2, cameraON);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	2012      	movs	r0, #18
 80009c0:	f000 f900 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM15, 4, cameraON);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2104      	movs	r1, #4
 80009c8:	2040      	movs	r0, #64	; 0x40
 80009ca:	f000 f8fb 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM15, 5, cameraOFF);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2105      	movs	r1, #5
 80009d2:	2040      	movs	r0, #64	; 0x40
 80009d4:	f000 f8f6 	bl	8000bc4 <vCameraChangeRegBit>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <vCameraYUV>:

void vCameraYUV(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(COM7, 0, cameraOFF);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2012      	movs	r0, #18
 80009e6:	f000 f8ed 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM7, 2, cameraOFF);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2102      	movs	r1, #2
 80009ee:	2012      	movs	r0, #18
 80009f0:	f000 f8e8 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(COM15, 4, cameraOFF);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2104      	movs	r1, #4
 80009f8:	2040      	movs	r0, #64	; 0x40
 80009fa:	f000 f8e3 	bl	8000bc4 <vCameraChangeRegBit>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <vCameraAWBB1>:


/******************************************************************************
 * AWB (Automatic White Balance)
 *****************************************************************************/
void vCameraAWBB1(void) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 0, cameraOFF);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2069      	movs	r0, #105	; 0x69
 8000a0c:	f000 f8da 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 1, cameraOFF);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	2069      	movs	r0, #105	; 0x69
 8000a16:	f000 f8d5 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <vCameraAWBB125>:

void vCameraAWBB125(void) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 0, cameraON);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2100      	movs	r1, #0
 8000a26:	2069      	movs	r0, #105	; 0x69
 8000a28:	f000 f8cc 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 1, cameraOFF);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f000 f8c7 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <vCameraAWBB15>:

void vCameraAWBB15(void) {
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 0, cameraOFF);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2069      	movs	r0, #105	; 0x69
 8000a44:	f000 f8be 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 1, cameraON);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2069      	movs	r0, #105	; 0x69
 8000a4e:	f000 f8b9 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <vCameraAWBB175>:

void vCameraAWBB175(void) {
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 0, cameraON);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2069      	movs	r0, #105	; 0x69
 8000a60:	f000 f8b0 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 1, cameraON);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	2069      	movs	r0, #105	; 0x69
 8000a6a:	f000 f8ab 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <vCameraAWBR1>:

void vCameraAWBR1(void) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 2, cameraOFF);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2102      	movs	r1, #2
 8000a7a:	2069      	movs	r0, #105	; 0x69
 8000a7c:	f000 f8a2 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 3, cameraOFF);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2103      	movs	r1, #3
 8000a84:	2069      	movs	r0, #105	; 0x69
 8000a86:	f000 f89d 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <vCameraAWBR125>:

void vCameraAWBR125(void) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 2, cameraON);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	2069      	movs	r0, #105	; 0x69
 8000a98:	f000 f894 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 3, cameraOFF);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2069      	movs	r0, #105	; 0x69
 8000aa2:	f000 f88f 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <vCameraAWBR15>:

void vCameraAWBR15(void) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 2, cameraOFF);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	2069      	movs	r0, #105	; 0x69
 8000ab4:	f000 f886 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 3, cameraON);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2103      	movs	r1, #3
 8000abc:	2069      	movs	r0, #105	; 0x69
 8000abe:	f000 f881 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <vCameraAWBR175>:

void vCameraAWBR175(void) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 2, cameraON);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2102      	movs	r1, #2
 8000ace:	2069      	movs	r0, #105	; 0x69
 8000ad0:	f000 f878 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 3, cameraON);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	2069      	movs	r0, #105	; 0x69
 8000ada:	f000 f873 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <vCameraAWBGB1>:

void vCameraAWBGB1(void) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 4, cameraOFF);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2104      	movs	r1, #4
 8000aea:	2069      	movs	r0, #105	; 0x69
 8000aec:	f000 f86a 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 5, cameraOFF);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2105      	movs	r1, #5
 8000af4:	2069      	movs	r0, #105	; 0x69
 8000af6:	f000 f865 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <vCameraAWBGB125>:

void vCameraAWBGB125(void) {
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 4, cameraON);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	2069      	movs	r0, #105	; 0x69
 8000b08:	f000 f85c 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 5, cameraOFF);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2105      	movs	r1, #5
 8000b10:	2069      	movs	r0, #105	; 0x69
 8000b12:	f000 f857 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <vCameraAWBGB15>:

void vCameraAWBGB15(void) {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 4, cameraOFF);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2104      	movs	r1, #4
 8000b22:	2069      	movs	r0, #105	; 0x69
 8000b24:	f000 f84e 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 5, cameraON);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	2069      	movs	r0, #105	; 0x69
 8000b2e:	f000 f849 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <vCameraAWBGB175>:

void vCameraAWBGB175(void) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 4, cameraON);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	2069      	movs	r0, #105	; 0x69
 8000b40:	f000 f840 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 5, cameraON);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2105      	movs	r1, #5
 8000b48:	2069      	movs	r0, #105	; 0x69
 8000b4a:	f000 f83b 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <vCameraAWBGR1>:

void vCameraAWBGR1(void) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 6, cameraOFF);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2106      	movs	r1, #6
 8000b5a:	2069      	movs	r0, #105	; 0x69
 8000b5c:	f000 f832 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 7, cameraOFF);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2107      	movs	r1, #7
 8000b64:	2069      	movs	r0, #105	; 0x69
 8000b66:	f000 f82d 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <vCameraAWBGR125>:

void vCameraAWBGR125(void) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 6, cameraON);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2106      	movs	r1, #6
 8000b76:	2069      	movs	r0, #105	; 0x69
 8000b78:	f000 f824 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 7, cameraOFF);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2107      	movs	r1, #7
 8000b80:	2069      	movs	r0, #105	; 0x69
 8000b82:	f000 f81f 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <vCameraAWBGR15>:

void vCameraAWBGR15(void) {
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 6, cameraOFF);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2106      	movs	r1, #6
 8000b92:	2069      	movs	r0, #105	; 0x69
 8000b94:	f000 f816 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 7, cameraON);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2107      	movs	r1, #7
 8000b9c:	2069      	movs	r0, #105	; 0x69
 8000b9e:	f000 f811 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <vCameraAWBGR175>:

void vCameraAWBGR175(void) {
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
	vCameraChangeRegBit(GFIX, 6, cameraON);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2106      	movs	r1, #6
 8000bae:	2069      	movs	r0, #105	; 0x69
 8000bb0:	f000 f808 	bl	8000bc4 <vCameraChangeRegBit>
	vCameraChangeRegBit(GFIX, 7, cameraON);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2069      	movs	r0, #105	; 0x69
 8000bba:	f000 f803 	bl	8000bc4 <vCameraChangeRegBit>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <vCameraChangeRegBit>:


/******************************************************************************
 * REGISTER OPERATIONS
 *****************************************************************************/
void vCameraChangeRegBit(uint8_t ucReg, uint8_t ucPos, uint8_t ucState) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	71bb      	strb	r3, [r7, #6]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	717b      	strb	r3, [r7, #5]
	uint8_t ucRegValue;
	xSemaphoreTake(xCameraMutexSCCB, portMAX_DELAY);
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <vCameraChangeRegBit+0x8c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 ffbe 	bl	8005b60 <xQueueSemaphoreTake>
	ucRegValue = prucCameraReadReg(ucReg);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fa57 	bl	800109a <prucCameraReadReg>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
	if (ucState == cameraON) {
 8000bf0:	797b      	ldrb	r3, [r7, #5]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10f      	bne.n	8000c16 <vCameraChangeRegBit+0x52>
		prvCameraWriteReg(ucReg, ucRegValue | 1 << ucPos);
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fa28 	bl	8001064 <prvCameraWriteReg>
 8000c14:	e010      	b.n	8000c38 <vCameraChangeRegBit+0x74>
	}

	else {
		prvCameraWriteReg(ucReg, ucRegValue & ~(1 << ucPos));
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	b25a      	sxtb	r2, r3
 8000c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fa16 	bl	8001064 <prvCameraWriteReg>
	}

	xSemaphoreGive(xCameraMutexSCCB);
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <vCameraChangeRegBit+0x8c>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	f004 fc87 	bl	8005554 <xQueueGenericSend>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000b0 	.word	0x200000b0

08000c54 <vCameraSetReg>:
/*
 * @brief: 	Sets a register to a certain value, overwriting the value before.
 * @param:	ucReg, register address.
 * 			ucValue, register value.
 */
void vCameraSetReg(uint8_t ucReg, uint8_t ucValue) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	xSemaphoreTake(xCameraMutexSCCB, portMAX_DELAY);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <vCameraSetReg+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 ff77 	bl	8005b60 <xQueueSemaphoreTake>
	prvCameraWriteReg(ucReg, ucValue);
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f9f3 	bl	8001064 <prvCameraWriteReg>
	xSemaphoreGive(xCameraMutexSCCB);
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <vCameraSetReg+0x40>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 fc64 	bl	8005554 <xQueueGenericSend>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000b0 	.word	0x200000b0

08000c98 <vCameraReset>:
 *****************************************************************************/
/*
 * @brief: 	Resets camera settings to fabric / default, and later
 * 			configures the QQVGA YUV mode.
 */
void vCameraReset(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	xSemaphoreTake(xCameraMutexSCCB, portMAX_DELAY);
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <vCameraReset+0x54>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 ff5b 	bl	8005b60 <xQueueSemaphoreTake>
	vCameraDisablePCLKIRQ();
 8000caa:	2006      	movs	r0, #6
 8000cac:	f001 fa0e 	bl	80020cc <HAL_NVIC_DisableIRQ>
	vCameraDisableHREFIRQ();
 8000cb0:	2028      	movs	r0, #40	; 0x28
 8000cb2:	f001 fa0b 	bl	80020cc <HAL_NVIC_DisableIRQ>
	vCameraDisableVSYNCIRQ();
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f001 fa08 	bl	80020cc <HAL_NVIC_DisableIRQ>
	prvCameraWriteReg(COM7, 1 << 7);
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	2012      	movs	r0, #18
 8000cc0:	f000 f9d0 	bl	8001064 <prvCameraWriteReg>
	// This delay is proposed by the OV7670's manufacturer (max 1ms).
	vTaskDelay(pdMS_TO_TICKS(1));
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f005 fb29 	bl	800631c <vTaskDelay>
	xSemaphoreGive(xCameraMutexSCCB);
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <vCameraReset+0x54>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f004 fc3e 	bl	8005554 <xQueueGenericSend>
	vCameraQQVGA();
 8000cd8:	f000 f836 	bl	8000d48 <vCameraQQVGA>
	vCameraEnableVSYNCIRQ();
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <vCameraReset+0x58>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f001 f9e4 	bl	80020b0 <HAL_NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000b0 	.word	0x200000b0
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <xCameraProbe>:
/*
 * 	@brief	Checks if the SCCB connection is working by reading the
 * 			manufacturer's ID registers.
 * 	@retval pdPASS if the connection is established, pdFAIL in case of error.
 */
BaseType_t xCameraProbe(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	xSemaphoreTake(xCameraMutexSCCB, portMAX_DELAY);
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <xCameraProbe+0x50>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 ff2d 	bl	8005b60 <xQueueSemaphoreTake>
	if (prucCameraReadReg(MIDH) != 0x7F || prucCameraReadReg(MIDL) != 0xA2) {
 8000d06:	201c      	movs	r0, #28
 8000d08:	f000 f9c7 	bl	800109a <prucCameraReadReg>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d10:	d105      	bne.n	8000d1e <xCameraProbe+0x2a>
 8000d12:	201d      	movs	r0, #29
 8000d14:	f000 f9c1 	bl	800109a <prucCameraReadReg>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2ba2      	cmp	r3, #162	; 0xa2
 8000d1c:	d008      	beq.n	8000d30 <xCameraProbe+0x3c>
		xSemaphoreGive(xCameraMutexSCCB);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <xCameraProbe+0x50>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 fc14 	bl	8005554 <xQueueGenericSend>
		return pdFAIL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e007      	b.n	8000d40 <xCameraProbe+0x4c>
	}

	else {
		xSemaphoreGive(xCameraMutexSCCB);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <xCameraProbe+0x50>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	2300      	movs	r3, #0
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f004 fc0b 	bl	8005554 <xQueueGenericSend>
		return pdPASS;
 8000d3e:	2301      	movs	r3, #1
	}
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000b0 	.word	0x200000b0

08000d48 <vCameraQQVGA>:



void vCameraQQVGA (void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	xSemaphoreTake(xCameraMutexSCCB, portMAX_DELAY);
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <vCameraQQVGA+0x74>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 ff03 	bl	8005b60 <xQueueSemaphoreTake>
	prvCameraWriteReg(CLKRC, 0x07);
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	2011      	movs	r0, #17
 8000d5e:	f000 f981 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(COM7, 0x00);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2012      	movs	r0, #18
 8000d66:	f000 f97d 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(COM3, 0x04);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	200c      	movs	r0, #12
 8000d6e:	f000 f979 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(COM14, 0x1A);
 8000d72:	211a      	movs	r1, #26
 8000d74:	203e      	movs	r0, #62	; 0x3e
 8000d76:	f000 f975 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(SCALING_XSC, 0x3A);
 8000d7a:	213a      	movs	r1, #58	; 0x3a
 8000d7c:	2070      	movs	r0, #112	; 0x70
 8000d7e:	f000 f971 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(SCALING_YSC, 0x35);
 8000d82:	2135      	movs	r1, #53	; 0x35
 8000d84:	2071      	movs	r0, #113	; 0x71
 8000d86:	f000 f96d 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(SCALING_DCWCTR, 0x22);
 8000d8a:	2122      	movs	r1, #34	; 0x22
 8000d8c:	2072      	movs	r0, #114	; 0x72
 8000d8e:	f000 f969 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(SCALING_PCLK_DIV, 0xF2);
 8000d92:	21f2      	movs	r1, #242	; 0xf2
 8000d94:	2073      	movs	r0, #115	; 0x73
 8000d96:	f000 f965 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(SCALING_PCLK_DELAY, 0x02);
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	20a2      	movs	r0, #162	; 0xa2
 8000d9e:	f000 f961 	bl	8001064 <prvCameraWriteReg>
	prvCameraWriteReg(0xb0, 0x84);
 8000da2:	2184      	movs	r1, #132	; 0x84
 8000da4:	20b0      	movs	r0, #176	; 0xb0
 8000da6:	f000 f95d 	bl	8001064 <prvCameraWriteReg>
	xSemaphoreGive(xCameraMutexSCCB);
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <vCameraQQVGA+0x74>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	f004 fbce 	bl	8005554 <xQueueGenericSend>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000b0 	.word	0x200000b0

08000dc0 <vCameraRegInit>:
 * RTOS TASK CONTROL
 *****************************************************************************/
/*
 * @brief	Initialization for the SCCB camera communication.
 */
void vCameraRegInit(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	xCameraMutexSCCB = xSemaphoreCreateMutex();
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f004 fbac 	bl	8005522 <xQueueCreateMutex>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <vCameraRegInit+0x34>)
 8000dce:	6013      	str	r3, [r2, #0]

	if (xCameraMutexSCCB == NULL) {
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <vCameraRegInit+0x34>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <vCameraRegInit+0x22>
		#ifdef mainDEBUG
		vDebugErrorRoutine("SCCB Mutex Creation failed.");
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <vCameraRegInit+0x38>)
 8000dda:	f000 f99b 	bl	8001114 <vDebugErrorRoutine>
		#endif
		vToolsErrorRoutine();
 8000dde:	f001 f800 	bl	8001de2 <vToolsErrorRoutine>
	}

	xSemaphoreGive(xCameraMutexSCCB);
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <vCameraRegInit+0x34>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	f004 fbb2 	bl	8005554 <xQueueGenericSend>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000b0 	.word	0x200000b0
 8000df8:	080095f0 	.word	0x080095f0

08000dfc <prvSDAOutput>:
#ifdef cameraBIT_BANG

/*
 * @brief	Changes the SDA GPIO to Output.
 */
static void prvSDAOutput(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = SDA_Pin;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e14:	2311      	movs	r3, #17
 8000e16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <prvSDAOutput+0x38>)
 8000e26:	f001 fd61 	bl	80028ec <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020400 	.word	0x40020400

08000e38 <prvSDAInput>:

/*
 * @brief	Changes the SDA GPIO to input.
 */
static void prvSDAInput(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = SDA_Pin;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <prvSDAInput+0x34>)
 8000e5e:	f001 fd45 	bl	80028ec <HAL_GPIO_Init>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40020400 	.word	0x40020400

08000e70 <prvWrite>:

/*
 * @brief: 	SCCB bit bang write operation. It writes 8 bits, and then ignores
 * 			the ninth one.
 */
static void prvWrite(uint8_t byte) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	prvSDAOutput();
 8000e7a:	f7ff ffbf 	bl	8000dfc <prvSDAOutput>
	vDelayUs(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f000 ff98 	bl	8001db4 <vDelayUs>
	for (i=0; i < 8; i++) {
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e026      	b.n	8000ed8 <prvWrite+0x68>
		HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <prvWrite+0xb8>)
 8000e90:	f001 fec8 	bl	8002c24 <HAL_GPIO_WritePin>
		vDelayUs(20);
 8000e94:	2014      	movs	r0, #20
 8000e96:	f000 ff8d 	bl	8001db4 <vDelayUs>
		HAL_GPIO_WritePin(GPIOB, SDA_Pin, byte & (0x01 << (7 - i)));
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	f1c3 0307 	rsb	r3, r3, #7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	b25a      	sxtb	r2, r3
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4013      	ands	r3, r2
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <prvWrite+0xb8>)
 8000eb8:	f001 feb4 	bl	8002c24 <HAL_GPIO_WritePin>
		vDelayUs(20);
 8000ebc:	2014      	movs	r0, #20
 8000ebe:	f000 ff79 	bl	8001db4 <vDelayUs>
		HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <prvWrite+0xb8>)
 8000ec8:	f001 feac 	bl	8002c24 <HAL_GPIO_WritePin>
		vDelayUs(20);
 8000ecc:	2014      	movs	r0, #20
 8000ece:	f000 ff71 	bl	8001db4 <vDelayUs>
	for (i=0; i < 8; i++) {
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d9d5      	bls.n	8000e8a <prvWrite+0x1a>
	}

	//ACK ignore
	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <prvWrite+0xb8>)
 8000ee4:	f001 fe9e 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 ff63 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <prvWrite+0xb8>)
 8000ef4:	f001 fe96 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(10);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f000 ff5b 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <prvWrite+0xb8>)
 8000f04:	f001 fe8e 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(20);
 8000f08:	2014      	movs	r0, #20
 8000f0a:	f000 ff53 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <prvWrite+0xb8>)
 8000f14:	f001 fe86 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(20);
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f000 ff4b 	bl	8001db4 <vDelayUs>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400

08000f2c <prvStart>:

/*
 * @brief	SCCB bit bang start condition. SCLK and SDA both high, then
 * 			SDA goes LOW, and then SCLK goes LOW.
 */
static void prvStart(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	prvSDAOutput();
 8000f30:	f7ff ff64 	bl	8000dfc <prvSDAOutput>

	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	480a      	ldr	r0, [pc, #40]	; (8000f64 <prvStart+0x38>)
 8000f3a:	f001 fe73 	bl	8002c24 <HAL_GPIO_WritePin>

	vDelayUs(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 ff38 	bl	8001db4 <vDelayUs>

	HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <prvStart+0x38>)
 8000f4a:	f001 fe6b 	bl	8002c24 <HAL_GPIO_WritePin>

	vDelayUs(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f000 ff30 	bl	8001db4 <vDelayUs>

	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <prvStart+0x38>)
 8000f5a:	f001 fe63 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020400 	.word	0x40020400

08000f68 <prvStop>:

/*
 * @brief	SCCB bit bang Stop condition. SCLK and SDA both low. Then, SCLK
 * 			raises to HIGH, followed by SDA going HIGH.
 */
static void prvStop(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	prvSDAOutput();
 8000f6c:	f7ff ff46 	bl	8000dfc <prvSDAOutput>
	HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <prvStop+0x38>)
 8000f76:	f001 fe55 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(20);
 8000f7a:	2014      	movs	r0, #20
 8000f7c:	f000 ff1a 	bl	8001db4 <vDelayUs>

	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <prvStop+0x38>)
 8000f86:	f001 fe4d 	bl	8002c24 <HAL_GPIO_WritePin>

	vDelayUs(20);
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f000 ff12 	bl	8001db4 <vDelayUs>

	HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <prvStop+0x38>)
 8000f96:	f001 fe45 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <prucRead>:

/*
 * @brief	SCCB bit bang Read operation. 8 Bits are read, followed by a
 * 			NACK response in the ninth bit.
 */
static uint8_t prucRead(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t ucByte = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	prvSDAInput();
 8000fae:	f7ff ff43 	bl	8000e38 <prvSDAInput>
	vDelayUs(10);
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f000 fefe 	bl	8001db4 <vDelayUs>

	for (i=0; i < 8; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
 8000fbc:	e026      	b.n	800100c <prucRead+0x68>
		HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	4827      	ldr	r0, [pc, #156]	; (8001060 <prucRead+0xbc>)
 8000fc4:	f001 fe2e 	bl	8002c24 <HAL_GPIO_WritePin>
		vDelayUs(20);
 8000fc8:	2014      	movs	r0, #20
 8000fca:	f000 fef3 	bl	8001db4 <vDelayUs>
		HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	4823      	ldr	r0, [pc, #140]	; (8001060 <prucRead+0xbc>)
 8000fd4:	f001 fe26 	bl	8002c24 <HAL_GPIO_WritePin>
		vDelayUs(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f000 feeb 	bl	8001db4 <vDelayUs>
		ucByte |= HAL_GPIO_ReadPin(GPIOB, SDA_Pin) << (7 - i);
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <prucRead+0xbc>)
 8000fe2:	f001 fe07 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	f1c3 0307 	rsb	r3, r3, #7
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	71fb      	strb	r3, [r7, #7]
		vDelayUs(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fed7 	bl	8001db4 <vDelayUs>
	for (i=0; i < 8; i++) {
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	3301      	adds	r3, #1
 800100a:	71bb      	strb	r3, [r7, #6]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2b07      	cmp	r3, #7
 8001010:	d9d5      	bls.n	8000fbe <prucRead+0x1a>
	}

	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <prucRead+0xbc>)
 8001018:	f001 fe04 	bl	8002c24 <HAL_GPIO_WritePin>
	prvSDAOutput();
 800101c:	f7ff feee 	bl	8000dfc <prvSDAOutput>
	vDelayUs(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fec7 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <prucRead+0xbc>)
 800102c:	f001 fdfa 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f000 febf 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <prucRead+0xbc>)
 800103c:	f001 fdf2 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(20);
 8001040:	2014      	movs	r0, #20
 8001042:	f000 feb7 	bl	8001db4 <vDelayUs>
	HAL_GPIO_WritePin(GPIOB, SCLK_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <prucRead+0xbc>)
 800104c:	f001 fdea 	bl	8002c24 <HAL_GPIO_WritePin>
	vDelayUs(20);
 8001050:	2014      	movs	r0, #20
 8001052:	f000 feaf 	bl	8001db4 <vDelayUs>

	return ucByte;
 8001056:	79fb      	ldrb	r3, [r7, #7]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020400 	.word	0x40020400

08001064 <prvCameraWriteReg>:
 * 			2. Write the address of the register.
 * 			3. Write the value of the register.
 * 	@param	ucReg, register address.
 * 	@param	ucData, value of the register.
 */
static void prvCameraWriteReg (uint8_t ucReg, uint8_t ucData) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	prvStart();
 8001074:	f7ff ff5a 	bl	8000f2c <prvStart>
	prvWrite(cameraWRITE_ADDRESS);
 8001078:	2042      	movs	r0, #66	; 0x42
 800107a:	f7ff fef9 	bl	8000e70 <prvWrite>
	prvWrite(ucReg);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fef5 	bl	8000e70 <prvWrite>
	prvWrite(ucData);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fef1 	bl	8000e70 <prvWrite>
	prvStop();
 800108e:	f7ff ff6b 	bl	8000f68 <prvStop>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <prucCameraReadReg>:
 * 			4. Write the address of the camera for reading.
 * 			5. Read the register's value.
 * 	@param	ucReg, register to be read from.
 * 	@retval Register's value.
 */
static uint8_t prucCameraReadReg (uint8_t ucReg) {
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint8_t ucData = 0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

	prvStart();
 80010a8:	f7ff ff40 	bl	8000f2c <prvStart>
	prvWrite(cameraWRITE_ADDRESS);
 80010ac:	2042      	movs	r0, #66	; 0x42
 80010ae:	f7ff fedf 	bl	8000e70 <prvWrite>
	prvWrite(ucReg);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fedb 	bl	8000e70 <prvWrite>
	prvStop();
 80010ba:	f7ff ff55 	bl	8000f68 <prvStop>
	prvStart();
 80010be:	f7ff ff35 	bl	8000f2c <prvStart>
	prvWrite(cameraREAD_ADDRESS);;
 80010c2:	2043      	movs	r0, #67	; 0x43
 80010c4:	f7ff fed4 	bl	8000e70 <prvWrite>
	ucData = prucRead();
 80010c8:	f7ff ff6c 	bl	8000fa4 <prucRead>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	prvStop();
 80010d0:	f7ff ff4a 	bl	8000f68 <prvStop>
	return ucData;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <vApplicationGetIdleTaskMemory+0x2c>)
 80010f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <vApplicationGetIdleTaskMemory+0x30>)
 80010f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000b4 	.word	0x200000b4
 8001110:	20000168 	.word	0x20000168

08001114 <vDebugErrorRoutine>:
/*
 * 	@brief 	Prints error msg to stdout, when semihosting is defined.
 * 	@param	pcErrorString, string to be printed through semihosting. The function
 * 			already adds format to the output, so no "\n" is required.
 */
void vDebugErrorRoutine(const char * pcErrorString) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	printf("> Error. %s\n", pcErrorString);
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <vDebugErrorRoutine+0x18>)
 8001120:	f007 fb44 	bl	80087ac <iprintf>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08009618 	.word	0x08009618

08001130 <vDebugSuccessRoutine>:

void vDebugSuccessRoutine(const char * pcSuccessString) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	printf("> Success. %s\n", pcSuccessString);
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <vDebugSuccessRoutine+0x18>)
 800113c:	f007 fb36 	bl	80087ac <iprintf>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08009628 	.word	0x08009628

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
#ifdef mainDEBUG
	initialise_monitor_handles();
 8001152:	f007 f8e1 	bl	8008318 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fe71 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f827 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f943 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001162:	f000 f921 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001166:	f000 f8f5 	bl	8001354 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800116a:	f000 f8a3 	bl	80012b4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800116e:	f000 f88d 	bl	800128c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  vCameraInit();
 8001172:	f7ff fa0f 	bl	8000594 <vCameraInit>
  vStepperInit();
 8001176:	f000 fa0b 	bl	8001590 <vStepperInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0x58>)
 800117c:	1d3c      	adds	r4, r7, #4
 800117e:	461d      	mov	r5, r3
 8001180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f003 ffd6 	bl	8005142 <osThreadCreate>
 8001196:	4603      	mov	r3, r0
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <main+0x5c>)
 800119a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800119c:	f003 ffca 	bl	8005134 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80011a0:	e7fe      	b.n	80011a0 <main+0x54>
 80011a2:	bf00      	nop
 80011a4:	08009638 	.word	0x08009638
 80011a8:	20000454 	.word	0x20000454

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f007 fa59 	bl	8008672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <SystemClock_Config+0xd8>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <SystemClock_Config+0xd8>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemClock_Config+0xd8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <SystemClock_Config+0xdc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f8:	4a23      	ldr	r2, [pc, #140]	; (8001288 <SystemClock_Config+0xdc>)
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <SystemClock_Config+0xdc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001224:	2354      	movs	r3, #84	; 0x54
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fd0f 	bl	8002c58 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001240:	f000 f9a0 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2102      	movs	r1, #2
 8001260:	4618      	mov	r0, r3
 8001262:	f001 ff71 	bl	8003148 <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800126c:	f000 f98a 	bl	8001584 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f002 f84d 	bl	8003314 <HAL_RCC_MCOConfig>
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	; 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2007      	movs	r0, #7
 8001296:	f000 feef 	bl	8002078 <HAL_NVIC_SetPriority>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2006      	movs	r0, #6
 80012a0:	f000 feea 	bl	8002078 <HAL_NVIC_SetPriority>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2105      	movs	r1, #5
 80012a8:	2028      	movs	r0, #40	; 0x28
 80012aa:	f000 fee5 	bl	8002078 <HAL_NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012da:	2253      	movs	r2, #83	; 0x53
 80012dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f8:	4815      	ldr	r0, [pc, #84]	; (8001350 <MX_TIM2_Init+0x9c>)
 80012fa:	f002 f99f 	bl	800363c <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 f93e 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4619      	mov	r1, r3
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <MX_TIM2_Init+0x9c>)
 8001316:	f002 fba5 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f930 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM2_Init+0x9c>)
 8001332:	f002 fda1 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f922 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM2_Init+0x9c>)
 8001342:	f002 f9cb 	bl	80036dc <HAL_TIM_Base_Start>

  /* USER CODE END TIM2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000368 	.word	0x20000368

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f002 fdf6 	bl	8003f7c <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f8f5 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200003b0 	.word	0x200003b0
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	2011      	movs	r0, #17
 80013d0:	f000 fe52 	bl	8002078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013d4:	2011      	movs	r0, #17
 80013d6:	f000 fe6b 	bl	80020b0 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <MX_GPIO_Init+0x150>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <MX_GPIO_Init+0x150>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <MX_GPIO_Init+0x150>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <MX_GPIO_Init+0x150>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a45      	ldr	r2, [pc, #276]	; (8001538 <MX_GPIO_Init+0x150>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <MX_GPIO_Init+0x150>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <MX_GPIO_Init+0x150>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a3e      	ldr	r2, [pc, #248]	; (8001538 <MX_GPIO_Init+0x150>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <MX_GPIO_Init+0x150>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_1_Pin|STEPPER_4_Pin|STEPPER_3_Pin|STEPPER_2_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f24e 0102 	movw	r1, #57346	; 0xe002
 8001458:	4838      	ldr	r0, [pc, #224]	; (800153c <MX_GPIO_Init+0x154>)
 800145a:	f001 fbe3 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCLK_Pin|SDA_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	21c0      	movs	r1, #192	; 0xc0
 8001462:	4836      	ldr	r0, [pc, #216]	; (800153c <MX_GPIO_Init+0x154>)
 8001464:	f001 fbde 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4830      	ldr	r0, [pc, #192]	; (8001540 <MX_GPIO_Init+0x158>)
 8001480:	f001 fa34 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCLK_Pin VSYNC_Pin */
  GPIO_InitStruct.Pin = PCLK_Pin|VSYNC_Pin;
 8001484:	2303      	movs	r3, #3
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <MX_GPIO_Init+0x158>)
 800149a:	f001 fa27 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800149e:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 80014a2:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4823      	ldr	r0, [pc, #140]	; (8001540 <MX_GPIO_Init+0x158>)
 80014b4:	f001 fa1a 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_1_Pin STEPPER_4_Pin STEPPER_3_Pin STEPPER_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_1_Pin|STEPPER_4_Pin|STEPPER_3_Pin|STEPPER_2_Pin;
 80014b8:	f24e 0302 	movw	r3, #57346	; 0xe002
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <MX_GPIO_Init+0x154>)
 80014d2:	f001 fa0b 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4619      	mov	r1, r3
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <MX_GPIO_Init+0x15c>)
 80014f4:	f001 f9fa 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : HREF_Pin */
  GPIO_InitStruct.Pin = HREF_Pin;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HREF_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_GPIO_Init+0x15c>)
 8001510:	f001 f9ec 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDA_Pin;
 8001514:	23c0      	movs	r3, #192	; 0xc0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001518:	2311      	movs	r3, #17
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_GPIO_Init+0x154>)
 800152c:	f001 f9de 	bl	80028ec <HAL_GPIO_Init>

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  vTaskSuspend(NULL);
 8001550:	2000      	movs	r0, #0
 8001552:	f004 ff17 	bl	8006384 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f003 fe3f 	bl	80051da <osDelay>
 800155c:	e7fb      	b.n	8001556 <StartDefaultTask+0xe>
	...

08001560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001572:	f000 fc85 	bl	8001e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010000 	.word	0x40010000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <vStepperInit>:
 *****************************************************************************/
/*
 *	@brief: Resource initialization for the stepper motor action. To be called
 *		before initializing the RTOS scheduler.
 */
void vStepperInit (void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af02      	add	r7, sp, #8
	xTaskCreate(prvStepperTask, "stepper_task", configMINIMAL_STACK_SIZE, NULL, stepperTASK_PRIORITY, &xStepperTaskHandle);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <vStepperInit+0x20>)
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2301      	movs	r3, #1
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	4904      	ldr	r1, [pc, #16]	; (80015b4 <vStepperInit+0x24>)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <vStepperInit+0x28>)
 80015a6:	f004 fd6c 	bl	8006082 <xTaskCreate>
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000458 	.word	0x20000458
 80015b4:	08009654 	.word	0x08009654
 80015b8:	08001649 	.word	0x08001649

080015bc <vStepperStart>:

/*
 *	@brief: Starts stepper motor operation. Not ISR safe.
 */
void vStepperStart(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	xTaskNotify(xStepperTaskHandle, stepperSTART_NOTIFICATION, eSetBits);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <vStepperStart+0x18>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	2300      	movs	r3, #0
 80015c6:	2201      	movs	r2, #1
 80015c8:	2101      	movs	r1, #1
 80015ca:	f005 fe8b 	bl	80072e4 <xTaskGenericNotify>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000458 	.word	0x20000458

080015d8 <vStepperStop>:
}

/*
 *	@brief: Stops stepper motor operation. Not ISR safe.
 */
void vStepperStop(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	xTaskNotify(xStepperTaskHandle, stepperSTOP_NOTIFICATION, eSetBits);
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <vStepperStop+0x18>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	f005 fe7d 	bl	80072e4 <xTaskGenericNotify>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000458 	.word	0x20000458

080015f4 <vStepperChangeDirection>:
}

/*
 *	@brief: Changes the direction of the motor. Not ISR safe.
 */
void vStepperChangeDirection(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	xTaskNotify(xStepperTaskHandle, stepperDIRECTION_NOTIFICATION, eSetBits);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <vStepperChangeDirection+0x18>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	2201      	movs	r2, #1
 8001600:	2104      	movs	r1, #4
 8001602:	f005 fe6f 	bl	80072e4 <xTaskGenericNotify>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000458 	.word	0x20000458

08001610 <vStepperChangeVelocity>:
 *		represent milisenconds per step. Not ISR safe.
 *
 *	@param:	usVelocity, rotational speed. Lower values (starting from 5),
 *		mean higher speeds.
 */
void vStepperChangeVelocity(uint16_t usVelocity) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
	if (usVelocity < 5) {
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d801      	bhi.n	8001624 <vStepperChangeVelocity+0x14>
		usVelocity = 5;
 8001620:	2305      	movs	r3, #5
 8001622:	80fb      	strh	r3, [r7, #6]
	}
	xTaskNotify(xStepperTaskHandle, stepperVELOCITY_NOTIFICATION | (usVelocity << stepperVELOCITY_INDEX), eSetBits);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <vStepperChangeVelocity+0x34>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	4619      	mov	r1, r3
 8001632:	2300      	movs	r3, #0
 8001634:	2201      	movs	r2, #1
 8001636:	f005 fe55 	bl	80072e4 <xTaskGenericNotify>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000458 	.word	0x20000458

08001648 <prvStepperTask>:
 *	@brief: Manages the motor's step sequence. It waits for a notification,
 *		which could be either start the motor, stop the motor, change direction
 *		or change velocity. If the last one is true, then a Queue is read for
 *		the velocity change.
 */
static void prvStepperTask (void* pvParameters) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	uint8_t ucWorking = stepperON;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
	uint8_t ucDirection = stepperFORWARD;
 8001654:	2300      	movs	r3, #0
 8001656:	73bb      	strb	r3, [r7, #14]
	uint16_t usVelocity = stepperDEFAULT_VELOCITY;
 8001658:	2328      	movs	r3, #40	; 0x28
 800165a:	81bb      	strh	r3, [r7, #12]
	uint32_t ulNotification;

	while(1) {

		if (xTaskNotifyWait(0, ULONG_MAX, &ulNotification, 0) == pdTRUE) {
 800165c:	f107 0208 	add.w	r2, r7, #8
 8001660:	2300      	movs	r3, #0
 8001662:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001666:	2000      	movs	r0, #0
 8001668:	f005 fddc 	bl	8007224 <xTaskNotifyWait>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d121      	bne.n	80016b6 <prvStepperTask+0x6e>
			if (ulNotification & stepperSTART_NOTIFICATION) {
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <prvStepperTask+0x38>
				ucWorking = stepperON;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
			}

			if (ulNotification & stepperSTOP_NOTIFICATION) {
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <prvStepperTask+0x46>
				ucWorking = stepperOFF;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
			}

			if (ulNotification & stepperDIRECTION_NOTIFICATION) {
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <prvStepperTask+0x5e>
				ucDirection = !ucDirection;
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	73bb      	strb	r3, [r7, #14]
			}

			if (ulNotification & stepperVELOCITY_NOTIFICATION) {
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <prvStepperTask+0x6e>
				usVelocity = (uint16_t) (ulNotification >> stepperVELOCITY_INDEX);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	81bb      	strh	r3, [r7, #12]
			}
		}

		if (ucWorking == stepperON) {
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d1cf      	bne.n	800165c <prvStepperTask+0x14>
			if (ucDirection) {
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d05e      	beq.n	8001780 <prvStepperTask+0x138>

				STEPPER_3_LOW();
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c8:	485d      	ldr	r0, [pc, #372]	; (8001840 <prvStepperTask+0x1f8>)
 80016ca:	f001 faab 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_1_HIGH();
 80016ce:	2201      	movs	r2, #1
 80016d0:	2102      	movs	r1, #2
 80016d2:	485b      	ldr	r0, [pc, #364]	; (8001840 <prvStepperTask+0x1f8>)
 80016d4:	f001 faa6 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 80016d8:	89bb      	ldrh	r3, [r7, #12]
 80016da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <prvStepperTask+0x1fc>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fe16 	bl	800631c <vTaskDelay>

				STEPPER_4_LOW();
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f6:	4852      	ldr	r0, [pc, #328]	; (8001840 <prvStepperTask+0x1f8>)
 80016f8:	f001 fa94 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_2_HIGH();
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001702:	484f      	ldr	r0, [pc, #316]	; (8001840 <prvStepperTask+0x1f8>)
 8001704:	f001 fa8e 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 8001708:	89bb      	ldrh	r3, [r7, #12]
 800170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <prvStepperTask+0x1fc>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fdfe 	bl	800631c <vTaskDelay>

				STEPPER_1_LOW();
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4846      	ldr	r0, [pc, #280]	; (8001840 <prvStepperTask+0x1f8>)
 8001726:	f001 fa7d 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_3_HIGH();
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001730:	4843      	ldr	r0, [pc, #268]	; (8001840 <prvStepperTask+0x1f8>)
 8001732:	f001 fa77 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	4a40      	ldr	r2, [pc, #256]	; (8001844 <prvStepperTask+0x1fc>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fde7 	bl	800631c <vTaskDelay>

				STEPPER_2_LOW();
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001754:	483a      	ldr	r0, [pc, #232]	; (8001840 <prvStepperTask+0x1f8>)
 8001756:	f001 fa65 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_4_HIGH();
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001760:	4837      	ldr	r0, [pc, #220]	; (8001840 <prvStepperTask+0x1f8>)
 8001762:	f001 fa5f 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 8001766:	89bb      	ldrh	r3, [r7, #12]
 8001768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	4a34      	ldr	r2, [pc, #208]	; (8001844 <prvStepperTask+0x1fc>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fdcf 	bl	800631c <vTaskDelay>
 800177e:	e76d      	b.n	800165c <prvStepperTask+0x14>

			}

			else {
				STEPPER_2_LOW();
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001786:	482e      	ldr	r0, [pc, #184]	; (8001840 <prvStepperTask+0x1f8>)
 8001788:	f001 fa4c 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_4_HIGH();
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	482b      	ldr	r0, [pc, #172]	; (8001840 <prvStepperTask+0x1f8>)
 8001794:	f001 fa46 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 8001798:	89bb      	ldrh	r3, [r7, #12]
 800179a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <prvStepperTask+0x1fc>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fdb6 	bl	800631c <vTaskDelay>

				STEPPER_1_LOW();
 80017b0:	2200      	movs	r2, #0
 80017b2:	2102      	movs	r1, #2
 80017b4:	4822      	ldr	r0, [pc, #136]	; (8001840 <prvStepperTask+0x1f8>)
 80017b6:	f001 fa35 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_3_HIGH();
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	481f      	ldr	r0, [pc, #124]	; (8001840 <prvStepperTask+0x1f8>)
 80017c2:	f001 fa2f 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <prvStepperTask+0x1fc>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fd9f 	bl	800631c <vTaskDelay>

				STEPPER_4_LOW();
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e4:	4816      	ldr	r0, [pc, #88]	; (8001840 <prvStepperTask+0x1f8>)
 80017e6:	f001 fa1d 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_2_HIGH();
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <prvStepperTask+0x1f8>)
 80017f2:	f001 fa17 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	4a10      	ldr	r2, [pc, #64]	; (8001844 <prvStepperTask+0x1fc>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fd87 	bl	800631c <vTaskDelay>

				STEPPER_3_LOW();
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <prvStepperTask+0x1f8>)
 8001816:	f001 fa05 	bl	8002c24 <HAL_GPIO_WritePin>
				STEPPER_1_HIGH();
 800181a:	2201      	movs	r2, #1
 800181c:	2102      	movs	r1, #2
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <prvStepperTask+0x1f8>)
 8001820:	f001 fa00 	bl	8002c24 <HAL_GPIO_WritePin>

				vTaskDelay(pdMS_TO_TICKS(usVelocity));
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <prvStepperTask+0x1fc>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fd70 	bl	800631c <vTaskDelay>
		if (xTaskNotifyWait(0, ULONG_MAX, &ulNotification, 0) == pdTRUE) {
 800183c:	e70e      	b.n	800165c <prvStepperTask+0x14>
 800183e:	bf00      	nop
 8001840:	40020400 	.word	0x40020400
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_MspInit+0x54>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_MspInit+0x54>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x54>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_MspInit+0x54>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_MspInit+0x54>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x54>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f000 fbf3 	bl	8002078 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d10d      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_UART_MspInit+0xf0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d161      	bne.n	80019c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a2b      	ldr	r2, [pc, #172]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_UART_MspInit+0xf4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800193a:	230c      	movs	r3, #12
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194a:	2307      	movs	r3, #7
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4820      	ldr	r0, [pc, #128]	; (80019d8 <HAL_UART_MspInit+0xf8>)
 8001956:	f000 ffc9 	bl	80028ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_UART_MspInit+0xfc>)
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_UART_MspInit+0x100>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_UART_MspInit+0xfc>)
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0xfc>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0xfc>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0xfc>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800199a:	4810      	ldr	r0, [pc, #64]	; (80019dc <HAL_UART_MspInit+0xfc>)
 800199c:	f000 fba4 	bl	80020e8 <HAL_DMA_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80019a6:	f7ff fded 	bl	8001584 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_UART_MspInit+0xfc>)
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_UART_MspInit+0xfc>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	2026      	movs	r0, #38	; 0x26
 80019bc:	f000 fb5c 	bl	8002078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c0:	2026      	movs	r0, #38	; 0x26
 80019c2:	f000 fb75 	bl	80020b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	200003f4 	.word	0x200003f4
 80019e0:	400260a0 	.word	0x400260a0

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_InitTick+0xd0>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <HAL_InitTick+0xd0>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6453      	str	r3, [r2, #68]	; 0x44
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_InitTick+0xd0>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a10:	f107 020c 	add.w	r2, r7, #12
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fddc 	bl	80035d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a20:	f001 fdc6 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8001a24:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	3b01      	subs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_InitTick+0xd8>)
 8001a36:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_InitTick+0xd8>)
 8001a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_InitTick+0xd8>)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_InitTick+0xd8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_InitTick+0xd8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_InitTick+0xd8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a5a:	4818      	ldr	r0, [pc, #96]	; (8001abc <HAL_InitTick+0xd8>)
 8001a5c:	f001 fdee 	bl	800363c <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <HAL_InitTick+0xd8>)
 8001a70:	f001 fe8e 	bl	8003790 <HAL_TIM_Base_Start_IT>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d111      	bne.n	8001aa6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a82:	2019      	movs	r0, #25
 8001a84:	f000 fb14 	bl	80020b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	d808      	bhi.n	8001aa0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	2019      	movs	r0, #25
 8001a94:	f000 faf0 	bl	8002078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_InitTick+0xe0>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e002      	b.n	8001aa6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3730      	adds	r7, #48	; 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	2000045c 	.word	0x2000045c
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Stream6_IRQHandler+0x10>)
 8001afa:	f000 fc8d 	bl	8002418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003f4 	.word	0x200003f4

08001b08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b0e:	f001 fea1 	bl	8003854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000045c 	.word	0x2000045c

08001b1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <USART2_IRQHandler+0x10>)
 8001b22:	f002 fb27 	bl	8004174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200003b0 	.word	0x200003b0

08001b30 <EXTI0_IRQHandler>:


/*
 * @brief: PCLK interrupt handler. The bytes read are stored in a global buffer.
 */
void EXTI0_IRQHandler(void) {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(PCLK_Pin) != RESET)
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <EXTI0_IRQHandler+0x40>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d011      	beq.n	8001b64 <EXTI0_IRQHandler+0x34>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(PCLK_Pin);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <EXTI0_IRQHandler+0x40>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
		xMsg.pucBuffer[xMsg.usBytes++] = cameraGPIO_IDR >> 5;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <EXTI0_IRQHandler+0x44>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	0959      	lsrs	r1, r3, #5
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <EXTI0_IRQHandler+0x48>)
 8001b4e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	b290      	uxth	r0, r2
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <EXTI0_IRQHandler+0x48>)
 8001b58:	f8a2 0144 	strh.w	r0, [r2, #324]	; 0x144
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	b2c9      	uxtb	r1, r1
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <EXTI0_IRQHandler+0x48>)
 8001b62:	5499      	strb	r1, [r3, r2]
	}
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40013c00 	.word	0x40013c00
 8001b74:	40020800 	.word	0x40020800
 8001b78:	200004a4 	.word	0x200004a4

08001b7c <EXTI1_IRQHandler>:

/*
 * @brief	VSYNC IRQ handler. When a rising edge is detected, a debounce
 * 			routine is started.
 */
void EXTI1_IRQHandler(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]

	if(__HAL_GPIO_EXTI_GET_IT(VSYNC_Pin) != RESET) {
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <EXTI1_IRQHandler+0x64>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d022      	beq.n	8001bd8 <EXTI1_IRQHandler+0x5c>
		__HAL_GPIO_EXTI_CLEAR_IT(VSYNC_Pin);
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <EXTI1_IRQHandler+0x64>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	615a      	str	r2, [r3, #20]

		vDelayUs(10);
 8001b98:	200a      	movs	r0, #10
 8001b9a:	f000 f90b 	bl	8001db4 <vDelayUs>
		if (RISING_EDGE_VSYNC()) {
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <EXTI1_IRQHandler+0x68>)
 8001ba2:	f001 f827 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10a      	bne.n	8001bc2 <EXTI1_IRQHandler+0x46>
			vCameraEnableHREFIRQ();
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <EXTI1_IRQHandler+0x64>)
 8001bae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	2028      	movs	r0, #40	; 0x28
 8001bb6:	f000 fa7b 	bl	80020b0 <HAL_NVIC_EnableIRQ>
			xMsg.usRow = 0;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <EXTI1_IRQHandler+0x6c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
		}

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <EXTI1_IRQHandler+0x5c>
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <EXTI1_IRQHandler+0x70>)
 8001bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	f3bf 8f6f 	isb	sy
	}
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40013c00 	.word	0x40013c00
 8001be4:	40020800 	.word	0x40020800
 8001be8:	200004a4 	.word	0x200004a4
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <EXTI15_10_IRQHandler>:
/*
 * @brief: 	HREF interrupt handler. On rising edge, the PCLK interrupt will be
 * 			enabled and the camera bytes read. On falling edge, all the camera information
 * 			will be copied to the Stream Buffer.
 */
void EXTI15_10_IRQHandler(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
	if(__HAL_GPIO_EXTI_GET_IT(HREF_Pin) != RESET) {
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <EXTI15_10_IRQHandler+0x94>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03a      	beq.n	8001c7c <EXTI15_10_IRQHandler+0x8c>
		__HAL_GPIO_EXTI_CLEAR_IT(HREF_Pin);
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <EXTI15_10_IRQHandler+0x94>)
 8001c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0c:	615a      	str	r2, [r3, #20]

		// Start of new pixel row.
		if (RISING_EDGE_HREF()) {
 8001c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c12:	481d      	ldr	r0, [pc, #116]	; (8001c88 <EXTI15_10_IRQHandler+0x98>)
 8001c14:	f000 ffee 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10a      	bne.n	8001c34 <EXTI15_10_IRQHandler+0x44>
			vCameraEnablePCLKIRQ();
 8001c1e:	2006      	movs	r0, #6
 8001c20:	f000 fa46 	bl	80020b0 <HAL_NVIC_EnableIRQ>

			// Resume the critical task.
			xHigherPriorityTaskWoken = xTaskResumeFromISR(xCameraTaskCriticalHandle);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <EXTI15_10_IRQHandler+0x9c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fc6f 	bl	800650c <xTaskResumeFromISR>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	e018      	b.n	8001c66 <EXTI15_10_IRQHandler+0x76>

		}

		// End of row.
		else {
			vCameraDisablePCLKIRQ();
 8001c34:	2006      	movs	r0, #6
 8001c36:	f000 fa49 	bl	80020cc <HAL_NVIC_DisableIRQ>
			xQueueSendToBackFromISR(xCameraImageQueue, &xMsg, &xHigherPriorityTaskWoken);
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <EXTI15_10_IRQHandler+0xa0>)
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	1d3a      	adds	r2, r7, #4
 8001c40:	2300      	movs	r3, #0
 8001c42:	4914      	ldr	r1, [pc, #80]	; (8001c94 <EXTI15_10_IRQHandler+0xa4>)
 8001c44:	f003 fd84 	bl	8005750 <xQueueGenericSendFromISR>
			xMsg.usRow++;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <EXTI15_10_IRQHandler+0xa4>)
 8001c4a:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <EXTI15_10_IRQHandler+0xa4>)
 8001c54:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142

			// The first 2 pixels of the camera will be ignored. This interruption handling and the
			// scheduler context switch are too slow to read the first bytes.
			xMsg.usBytes = 4;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <EXTI15_10_IRQHandler+0xa4>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144

			// End of critical task section.
			ucExitCritical = 1;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <EXTI15_10_IRQHandler+0xa8>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
		}
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <EXTI15_10_IRQHandler+0x8c>
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <EXTI15_10_IRQHandler+0xac>)
 8001c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	f3bf 8f6f 	isb	sy
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40013c00 	.word	0x40013c00
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	200000a0 	.word	0x200000a0
 8001c90:	200000a4 	.word	0x200000a4
 8001c94:	200004a4 	.word	0x200004a4
 8001c98:	200000ac 	.word	0x200000ac
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <HAL_UART_TxCpltCallback>:

/*
 * 	@brief  ISR called when the DMA transfer was completed. It wakes up the
 * 			task to start sending more data (if there is any left).
 */
void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;
	xSemaphoreGiveFromISR(xCameraSemUart, &xHigherPriorityTaskWoken);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_UART_TxCpltCallback+0x38>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fde7 	bl	8005886 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_UART_TxCpltCallback+0x2e>
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_UART_TxCpltCallback+0x3c>)
 8001cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f3bf 8f4f 	dsb	sy
 8001cca:	f3bf 8f6f 	isb	sy
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000a8 	.word	0x200000a8
 8001cdc:	e000ed04 	.word	0xe000ed04

08001ce0 <HAL_UART_RxCpltCallback>:
/*
 * @brief:	ISR called when an order from the computer (UART2)
 * 			is received. It sends a notification to the task to
 * 			process it.
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(xCameraTaskUartHandle, &xHigherPriorityTaskWoken);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_UART_RxCpltCallback+0x3c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f107 020c 	add.w	r2, r7, #12
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fbb2 	bl	8007460 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_UART_RxCpltCallback+0x32>
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_UART_RxCpltCallback+0x40>)
 8001d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	f3bf 8f6f 	isb	sy
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000009c 	.word	0x2000009c
 8001d20:	e000ed04 	.word	0xe000ed04

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f006 fb5c 	bl	8008410 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20018000 	.word	0x20018000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	200005ec 	.word	0x200005ec
 8001d8c:	20010808 	.word	0x20010808

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <vDelayUs>:
 */
#include "tools.h"

EventGroupHandle_t xDebounceEvent;

void vDelayUs(uint16_t n) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 8001dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < n);
 8001dc6:	bf00      	nop
 8001dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3f9      	bcc.n	8001dc8 <vDelayUs+0x14>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <vToolsErrorRoutine>:


void vToolsErrorRoutine(void) {
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
	while(1) {}
 8001de6:	e7fe      	b.n	8001de6 <vToolsErrorRoutine+0x4>

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ffbd 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f006 fbf7 	bl	8008608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff f997 	bl	800114c <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e2c:	08009750 	.word	0x08009750
  ldr r2, =_sbss
 8001e30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e34:	20010804 	.word	0x20010804

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f8fc 	bl	8002062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f7ff fdba 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fcea 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	200005f0 	.word	0x200005f0

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200005f0 	.word	0x200005f0

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db12      	blt.n	8001f98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	490a      	ldr	r1, [pc, #40]	; (8001fa4 <__NVIC_DisableIRQ+0x44>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	3320      	adds	r3, #32
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8c:	f3bf 8f4f 	dsb	sy
}
 8001f90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f92:	f3bf 8f6f 	isb	sy
}
 8001f96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff28 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208a:	f7ff ff3d 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7ff ffb1 	bl	8001ffc <NVIC_EncodePriority>
 800209a:	4602      	mov	r2, r0
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff80 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff30 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff40 	bl	8001f60 <__NVIC_DisableIRQ>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff fed8 	bl	8001ea8 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e099      	b.n	8002238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002124:	e00f      	b.n	8002146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002126:	f7ff febf 	bl	8001ea8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b05      	cmp	r3, #5
 8002132:	d908      	bls.n	8002146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e078      	b.n	8002238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e8      	bne.n	8002126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_DMA_Init+0x158>)
 8002160:	4013      	ands	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2b04      	cmp	r3, #4
 800219e:	d107      	bne.n	80021b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4313      	orrs	r3, r2
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f023 0307 	bic.w	r3, r3, #7
 80021c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d117      	bne.n	800220a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fb01 	bl	80027f4 <DMA_CheckFifoParam>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002206:	2301      	movs	r3, #1
 8002208:	e016      	b.n	8002238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fab8 	bl	8002788 <DMA_CalcBaseAndBitshift>
 8002218:	4603      	mov	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	223f      	movs	r2, #63	; 0x3f
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	f010803f 	.word	0xf010803f

08002244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_DMA_Start_IT+0x26>
 8002266:	2302      	movs	r3, #2
 8002268:	e040      	b.n	80022ec <HAL_DMA_Start_IT+0xa8>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d12f      	bne.n	80022de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa4a 	bl	800272c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0216 	orr.w	r2, r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0208 	orr.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e005      	b.n	80022ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002302:	f7ff fdd1 	bl	8001ea8 <HAL_GetTick>
 8002306:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e052      	b.n	80023cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0216 	bic.w	r2, r2, #22
 8002334:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002344:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_DMA_Abort+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	e013      	b.n	80023a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002378:	f7ff fd96 	bl	8001ea8 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b05      	cmp	r3, #5
 8002384:	d90c      	bls.n	80023a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e015      	b.n	80023cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1e4      	bne.n	8002378 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	223f      	movs	r2, #63	; 0x3f
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d004      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00c      	b.n	800240c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2205      	movs	r2, #5
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_DMA_IRQHandler+0x248>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a8e      	ldr	r2, [pc, #568]	; (8002664 <HAL_DMA_IRQHandler+0x24c>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0a9b      	lsrs	r3, r3, #10
 8002430:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2208      	movs	r2, #8
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2208      	movs	r2, #8
 8002472:	409a      	lsls	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2201      	movs	r2, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f043 0202 	orr.w	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2204      	movs	r2, #4
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2204      	movs	r2, #4
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2210      	movs	r2, #16
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d043      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03c      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2210      	movs	r2, #16
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d018      	beq.n	800255a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d024      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
 8002546:	e01f      	b.n	8002588 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
 8002558:	e016      	b.n	8002588 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0208 	bic.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2220      	movs	r2, #32
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 808f 	beq.w	80026b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8087 	beq.w	80026b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2220      	movs	r2, #32
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d136      	bne.n	8002630 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0216 	bic.w	r2, r2, #22
 80025d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x1da>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0208 	bic.w	r2, r2, #8
 8002600:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	223f      	movs	r2, #63	; 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	d07e      	beq.n	8002724 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
        }
        return;
 800262e:	e079      	b.n	8002724 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01d      	beq.n	800267a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	2b00      	cmp	r3, #0
 8002652:	d031      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e02c      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000
 8002664:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e01e      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0210 	bic.w	r2, r2, #16
 8002696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d032      	beq.n	8002726 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d022      	beq.n	8002712 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d307      	bcc.n	8002700 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f2      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x2cc>
 80026fe:	e000      	b.n	8002702 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002700:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
 8002722:	e000      	b.n	8002726 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002724:	bf00      	nop
    }
  }
}
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002748:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d108      	bne.n	800276c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800276a:	e007      	b.n	800277c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3b10      	subs	r3, #16
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <DMA_CalcBaseAndBitshift+0x64>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <DMA_CalcBaseAndBitshift+0x68>)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d909      	bls.n	80027ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	1d1a      	adds	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58
 80027c8:	e007      	b.n	80027da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	aaaaaaab 	.word	0xaaaaaaab
 80027f0:	08009684 	.word	0x08009684

080027f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11f      	bne.n	800284e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d856      	bhi.n	80028c2 <DMA_CheckFifoParam+0xce>
 8002814:	a201      	add	r2, pc, #4	; (adr r2, 800281c <DMA_CheckFifoParam+0x28>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	0800282d 	.word	0x0800282d
 8002820:	0800283f 	.word	0x0800283f
 8002824:	0800282d 	.word	0x0800282d
 8002828:	080028c3 	.word	0x080028c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d046      	beq.n	80028c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283c:	e043      	b.n	80028c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002846:	d140      	bne.n	80028ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e03d      	b.n	80028ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d121      	bne.n	800289c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d837      	bhi.n	80028ce <DMA_CheckFifoParam+0xda>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <DMA_CheckFifoParam+0x70>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	0800287b 	.word	0x0800287b
 800286c:	08002875 	.word	0x08002875
 8002870:	0800288d 	.word	0x0800288d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e030      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d025      	beq.n	80028d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288a:	e022      	b.n	80028d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002894:	d11f      	bne.n	80028d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800289a:	e01c      	b.n	80028d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d903      	bls.n	80028aa <DMA_CheckFifoParam+0xb6>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d003      	beq.n	80028b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a8:	e018      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      break;
 80028ae:	e015      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e00b      	b.n	80028da <DMA_CheckFifoParam+0xe6>
      break;
 80028c2:	bf00      	nop
 80028c4:	e00a      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e008      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e006      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;   
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
    }
  } 
  
  return status; 
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e159      	b.n	8002bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8148 	bne.w	8002bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a2 	beq.w	8002bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_GPIO_Init+0x2ec>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <HAL_GPIO_Init+0x2f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d019      	beq.n	8002aee <HAL_GPIO_Init+0x202>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_GPIO_Init+0x2f4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x1fe>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_GPIO_Init+0x2f8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x1fa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <HAL_GPIO_Init+0x2fc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x1f6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a45      	ldr	r2, [pc, #276]	; (8002bec <HAL_GPIO_Init+0x300>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x1f2>
 8002ada:	2304      	movs	r3, #4
 8002adc:	e008      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e004      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e002      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002aee:	2300      	movs	r3, #0
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f002 0203 	and.w	r2, r2, #3
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4093      	lsls	r3, r2
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b00:	4935      	ldr	r1, [pc, #212]	; (8002bd8 <HAL_GPIO_Init+0x2ec>)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b32:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb0:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	f67f aea2 	bls.w	8002908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e267      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d075      	beq.n	8002d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b85      	ldr	r3, [pc, #532]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e242      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x74>
 8002cbe:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a75      	ldr	r2, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6f      	ldr	r2, [pc, #444]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6c      	ldr	r2, [pc, #432]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a68      	ldr	r2, [pc, #416]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f8ca 	bl	8001ea8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff f8c6 	bl	8001ea8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e207      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xc0>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f8b6 	bl	8001ea8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff f8b2 	bl	8001ea8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1f3      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0xe8>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1c7      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4937      	ldr	r1, [pc, #220]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x244>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7ff f86b 	bl	8001ea8 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7ff f867 	bl	8001ea8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1a8      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_OscConfig+0x244>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7ff f84a 	bl	8001ea8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7ff f846 	bl	8001ea8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e187      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d036      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCC_OscConfig+0x248>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7ff f82a 	bl	8001ea8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7ff f826 	bl	8001ea8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e167      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x200>
 8002e76:	e01b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x248>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff f813 	bl	8001ea8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e00e      	b.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7ff f80f 	bl	8001ea8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d907      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e150      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	42470000 	.word	0x42470000
 8002ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ea      	bne.n	8002e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8097 	beq.w	8002fec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b7d      	ldr	r3, [pc, #500]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a7c      	ldr	r2, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b7a      	ldr	r3, [pc, #488]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b77      	ldr	r3, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x474>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b74      	ldr	r3, [pc, #464]	; (80030cc <HAL_RCC_OscConfig+0x474>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a73      	ldr	r2, [pc, #460]	; (80030cc <HAL_RCC_OscConfig+0x474>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fe ffcf 	bl	8001ea8 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fe ffcb 	bl	8001ea8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e10c      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x474>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2ea>
 8002f34:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e01c      	b.n	8002f7c <HAL_RCC_OscConfig+0x324>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x30c>
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a5e      	ldr	r2, [pc, #376]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b5c      	ldr	r3, [pc, #368]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a5b      	ldr	r2, [pc, #364]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0x324>
 8002f64:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a57      	ldr	r2, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b55      	ldr	r3, [pc, #340]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a54      	ldr	r2, [pc, #336]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f023 0304 	bic.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe ff90 	bl	8001ea8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe ff8c 	bl	8001ea8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0cb      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ee      	beq.n	8002f8c <HAL_RCC_OscConfig+0x334>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb0:	f7fe ff7a 	bl	8001ea8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe ff76 	bl	8001ea8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0b5      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ee      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	4a38      	ldr	r2, [pc, #224]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a1 	beq.w	8003138 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d05c      	beq.n	80030bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d141      	bne.n	800308e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_OscConfig+0x478>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe ff4a 	bl	8001ea8 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe ff46 	bl	8001ea8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e087      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	3b01      	subs	r3, #1
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	491b      	ldr	r1, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x478>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe ff1f 	bl	8001ea8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe ff1b 	bl	8001ea8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e05c      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x416>
 800308c:	e054      	b.n	8003138 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_RCC_OscConfig+0x478>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe ff08 	bl	8001ea8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe ff04 	bl	8001ea8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e045      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_OscConfig+0x470>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x444>
 80030ba:	e03d      	b.n	8003138 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e038      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4ec>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d028      	beq.n	8003134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d121      	bne.n	8003134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d11a      	bne.n	8003134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003104:	4013      	ands	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800310a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800310c:	4293      	cmp	r3, r2
 800310e:	d111      	bne.n	8003134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	3b01      	subs	r3, #1
 800311e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0cc      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d90c      	bls.n	8003184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a52      	ldr	r2, [pc, #328]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	494d      	ldr	r1, [pc, #308]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d044      	beq.n	8003268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d119      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003202:	2b03      	cmp	r3, #3
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003206:	4b3f      	ldr	r3, [pc, #252]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e067      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0203 	bic.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4934      	ldr	r1, [pc, #208]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003238:	f7fe fe36 	bl	8001ea8 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	e00a      	b.n	8003256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fe fe32 	bl	8001ea8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e04f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 020c 	and.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d1eb      	bne.n	8003240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d20c      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e032      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ce:	f000 f889 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	490a      	ldr	r1, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fb78 	bl	80019e4 <HAL_InitTick>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00
 8003304:	40023800 	.word	0x40023800
 8003308:	0800966c 	.word	0x0800966c
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d129      	bne.n	800337a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	481f      	ldr	r0, [pc, #124]	; (80033dc <HAL_RCC_MCOConfig+0xc8>)
 8003360:	f7ff fac4 	bl	80028ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	430b      	orrs	r3, r1
 8003372:	4919      	ldr	r1, [pc, #100]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003378:	e029      	b.n	80033ce <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	480b      	ldr	r0, [pc, #44]	; (80033e0 <HAL_RCC_MCOConfig+0xcc>)
 80033b4:	f7ff fa9a 	bl	80028ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	00d9      	lsls	r1, r3, #3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_MCOConfig+0xc4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
}
 80033ce:	bf00      	nop
 80033d0:	3730      	adds	r7, #48	; 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020800 	.word	0x40020800

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e8:	b090      	sub	sp, #64	; 0x40
 80033ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
 80033f0:	2300      	movs	r3, #0
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	2300      	movs	r3, #0
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d00d      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x40>
 8003408:	2b08      	cmp	r3, #8
 800340a:	f200 80a1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x16c>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x34>
 8003412:	2b04      	cmp	r3, #4
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x3a>
 8003416:	e09b      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_GetSysClockFreq+0x184>)
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800341c:	e09b      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341e:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_GetSysClockFreq+0x188>)
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003422:	e098      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003424:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800342e:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d028      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	2200      	movs	r2, #0
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	627a      	str	r2, [r7, #36]	; 0x24
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800344c:	2100      	movs	r1, #0
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_GetSysClockFreq+0x188>)
 8003450:	fb03 f201 	mul.w	r2, r3, r1
 8003454:	2300      	movs	r3, #0
 8003456:	fb00 f303 	mul.w	r3, r0, r3
 800345a:	4413      	add	r3, r2
 800345c:	4a43      	ldr	r2, [pc, #268]	; (800356c <HAL_RCC_GetSysClockFreq+0x188>)
 800345e:	fba0 1202 	umull	r1, r2, r0, r2
 8003462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003464:	460a      	mov	r2, r1
 8003466:	62ba      	str	r2, [r7, #40]	; 0x28
 8003468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346a:	4413      	add	r3, r2
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	2200      	movs	r2, #0
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	61fa      	str	r2, [r7, #28]
 8003476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800347e:	f7fc ff07 	bl	8000290 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4613      	mov	r3, r2
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348a:	e053      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	2200      	movs	r2, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	617a      	str	r2, [r7, #20]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800349e:	f04f 0b00 	mov.w	fp, #0
 80034a2:	4652      	mov	r2, sl
 80034a4:	465b      	mov	r3, fp
 80034a6:	f04f 0000 	mov.w	r0, #0
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	0159      	lsls	r1, r3, #5
 80034b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b4:	0150      	lsls	r0, r2, #5
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	ebb2 080a 	subs.w	r8, r2, sl
 80034be:	eb63 090b 	sbc.w	r9, r3, fp
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034d6:	ebb2 0408 	subs.w	r4, r2, r8
 80034da:	eb63 0509 	sbc.w	r5, r3, r9
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	00eb      	lsls	r3, r5, #3
 80034e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ec:	00e2      	lsls	r2, r4, #3
 80034ee:	4614      	mov	r4, r2
 80034f0:	461d      	mov	r5, r3
 80034f2:	eb14 030a 	adds.w	r3, r4, sl
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	eb45 030b 	adc.w	r3, r5, fp
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	2200      	movs	r2, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	60fa      	str	r2, [r7, #12]
 8003524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003528:	f7fc feb2 	bl	8000290 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x184>)
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003558:	4618      	mov	r0, r3
 800355a:	3740      	adds	r7, #64	; 0x40
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	017d7840 	.word	0x017d7840

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800967c 	.word	0x0800967c

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800967c 	.word	0x0800967c

080035d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	220f      	movs	r2, #15
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_GetClockConfig+0x5c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	08db      	lsrs	r3, r3, #3
 8003612:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCC_GetClockConfig+0x60>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40023c00 	.word	0x40023c00

0800363c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e041      	b.n	80036d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe f91c 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fae2 	bl	8003c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d001      	beq.n	80036f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e03c      	b.n	800376e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_TIM_Base_Start+0xa0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_TIM_Base_Start+0x5c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d013      	beq.n	8003738 <HAL_TIM_Base_Start+0x5c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_TIM_Base_Start+0xa4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_TIM_Base_Start+0x5c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_TIM_Base_Start+0xa8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_TIM_Base_Start+0x5c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_TIM_Base_Start+0xac>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIM_Base_Start+0x5c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <HAL_TIM_Base_Start+0xb0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d111      	bne.n	800375c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d010      	beq.n	800376c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375a:	e007      	b.n	800376c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40014000 	.word	0x40014000

08003790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e044      	b.n	8003832 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_TIM_Base_Start_IT+0xb0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x6c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d013      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x6c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_TIM_Base_Start_IT+0xb4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x6c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a19      	ldr	r2, [pc, #100]	; (8003848 <HAL_TIM_Base_Start_IT+0xb8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x6c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_TIM_Base_Start_IT+0xbc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x6c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a16      	ldr	r2, [pc, #88]	; (8003850 <HAL_TIM_Base_Start_IT+0xc0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d010      	beq.n	8003830 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	e007      	b.n	8003830 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40014000 	.word	0x40014000

08003854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9b5 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9a7 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9b8 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0204 	mvn.w	r2, #4
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f98b 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f97d 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f98e 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0208 	mvn.w	r2, #8
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f961 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f953 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f964 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0210 	mvn.w	r2, #16
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2208      	movs	r2, #8
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f937 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f929 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f93a 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0201 	mvn.w	r2, #1
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fdc4 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b80      	cmp	r3, #128	; 0x80
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fab2 	bl	8003f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8ff 	bl	8003c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0220 	mvn.w	r2, #32
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa7c 	bl	8003f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0b4      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d03e      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xd4>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 8087 	bhi.w	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	f000 8086 	beq.w	8003bd6 <HAL_TIM_ConfigClockSource+0x172>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d87f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d01a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d87b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d050      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x11a>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d877      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d03c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d873      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d058      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x13a>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d86f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d86b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d060      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d867      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d05a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 f98d 	bl	8003e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	609a      	str	r2, [r3, #8]
      break;
 8003b36:	e04f      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 f976 	bl	8003e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 f8ea 	bl	8003d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2150      	movs	r1, #80	; 0x50
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f943 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e02c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 f909 	bl	8003da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f933 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e01c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 f8ca 	bl	8003d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f923 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e00c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 f91a 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00f      	beq.n	8003c7c <TIM_Base_SetConfig+0x38>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0x38>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <TIM_Base_SetConfig+0xe8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0x38>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a30      	ldr	r2, [pc, #192]	; (8003d30 <TIM_Base_SetConfig+0xec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0x38>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <TIM_Base_SetConfig+0xf0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d108      	bne.n	8003c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01b      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d017      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_Base_SetConfig+0xe8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_Base_SetConfig+0xec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00f      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <TIM_Base_SetConfig+0xf0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <TIM_Base_SetConfig+0xf4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <TIM_Base_SetConfig+0xf8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <TIM_Base_SetConfig+0xfc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800

08003d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 030a 	bic.w	r3, r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	031b      	lsls	r3, r3, #12
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f043 0307 	orr.w	r3, r3, #7
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	021a      	lsls	r2, r3, #8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e050      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d013      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000

08003f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e03f      	b.n	800400e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fc9c 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fe2b 	bl	8004c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d11d      	bne.n	800406c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Receive_IT+0x26>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e016      	b.n	800406e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_UART_Receive_IT+0x38>
 800404a:	2302      	movs	r3, #2
 800404c:	e00f      	b.n	800406e <HAL_UART_Receive_IT+0x58>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	461a      	mov	r2, r3
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fbd9 	bl	800481a <UART_Start_Receive_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	e000      	b.n	800406e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	d165      	bne.n	800415e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_Transmit_DMA+0x26>
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e05e      	b.n	8004160 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Transmit_DMA+0x38>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e057      	b.n	8004160 <HAL_UART_Transmit_DMA+0xe8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2221      	movs	r2, #33	; 0x21
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <HAL_UART_Transmit_DMA+0xf0>)
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	4a21      	ldr	r2, [pc, #132]	; (800416c <HAL_UART_Transmit_DMA+0xf4>)
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	4a20      	ldr	r2, [pc, #128]	; (8004170 <HAL_UART_Transmit_DMA+0xf8>)
 80040ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2200      	movs	r2, #0
 80040f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	461a      	mov	r2, r3
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f7fe f898 	bl	8002244 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800411c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	617b      	str	r3, [r7, #20]
   return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004146:	627a      	str	r2, [r7, #36]	; 0x24
 8004148:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6a39      	ldr	r1, [r7, #32]
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	61fb      	str	r3, [r7, #28]
   return(result);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3730      	adds	r7, #48	; 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	080046d1 	.word	0x080046d1
 800416c:	0800476b 	.word	0x0800476b
 8004170:	08004787 	.word	0x08004787

08004174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0ba      	sub	sp, #232	; 0xe8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_UART_IRQHandler+0x66>
 80041c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fc66 	bl	8004aa4 <UART_Receive_IT>
      return;
 80041d8:	e256      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80de 	beq.w	80043a0 <HAL_UART_IRQHandler+0x22c>
 80041e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d1 	beq.w	80043a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_UART_IRQHandler+0xae>
 800420a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_UART_IRQHandler+0xd2>
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xf6>
 8004252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d011      	beq.n	800429a <HAL_UART_IRQHandler+0x126>
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 81ed 	beq.w	800467e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_UART_IRQHandler+0x14e>
 80042b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fbf1 	bl	8004aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_UART_IRQHandler+0x17a>
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04f      	beq.n	800438e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 faf9 	bl	80048e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d141      	bne.n	8004386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800431c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800432e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800433a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1d9      	bne.n	8004302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	4a7d      	ldr	r2, [pc, #500]	; (8004550 <HAL_UART_IRQHandler+0x3dc>)
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f836 	bl	80023d4 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e00e      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f990 	bl	80046a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00a      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f98c 	bl	80046a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e006      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f988 	bl	80046a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800439a:	e170      	b.n	800467e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	bf00      	nop
    return;
 800439e:	e16e      	b.n	800467e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 814a 	bne.w	800463e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8143 	beq.w	800463e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 813c 	beq.w	800463e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	f040 80b4 	bne.w	8004554 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8140 	beq.w	8004682 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800440a:	429a      	cmp	r2, r3
 800440c:	f080 8139 	bcs.w	8004682 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	f000 8088 	beq.w	8004536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800443c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800445e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800446a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1d9      	bne.n	8004426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800449a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800449e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e1      	bne.n	8004472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e3      	bne.n	80044ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004518:	65ba      	str	r2, [r7, #88]	; 0x58
 800451a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800451e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e3      	bne.n	80044f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fedf 	bl	80022f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800453e:	b29b      	uxth	r3, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	b29b      	uxth	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8b6 	bl	80046b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800454c:	e099      	b.n	8004682 <HAL_UART_IRQHandler+0x50e>
 800454e:	bf00      	nop
 8004550:	080049ad 	.word	0x080049ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 808b 	beq.w	8004686 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8086 	beq.w	8004686 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800459e:	647a      	str	r2, [r7, #68]	; 0x44
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3314      	adds	r3, #20
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	623b      	str	r3, [r7, #32]
   return(result);
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3314      	adds	r3, #20
 80045d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045d6:	633a      	str	r2, [r7, #48]	; 0x30
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e3      	bne.n	80045b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60fb      	str	r3, [r7, #12]
   return(result);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	617b      	str	r3, [r7, #20]
   return(result);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e3      	bne.n	80045f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f83e 	bl	80046b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800463c:	e023      	b.n	8004686 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_UART_IRQHandler+0x4ea>
 800464a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9bc 	bl	80049d4 <UART_Transmit_IT>
    return;
 800465c:	e014      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <HAL_UART_IRQHandler+0x514>
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9fc 	bl	8004a74 <UART_EndTransmit_IT>
    return;
 800467c:	e004      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
    return;
 800467e:	bf00      	nop
 8004680:	e002      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
      return;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
      return;
 8004686:	bf00      	nop
  }
}
 8004688:	37e8      	adds	r7, #232	; 0xe8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop

08004690 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	; 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d137      	bne.n	800475c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	2200      	movs	r2, #0
 80046f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	623b      	str	r3, [r7, #32]
   return(result);
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	63bb      	str	r3, [r7, #56]	; 0x38
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004712:	633a      	str	r2, [r7, #48]	; 0x30
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60fb      	str	r3, [r7, #12]
   return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004746:	61fa      	str	r2, [r7, #28]
 8004748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	617b      	str	r3, [r7, #20]
   return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475a:	e002      	b.n	8004762 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800475c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800475e:	f7fd fa9f 	bl	8001ca0 <HAL_UART_TxCpltCallback>
}
 8004762:	bf00      	nop
 8004764:	3740      	adds	r7, #64	; 0x40
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff ff89 	bl	8004690 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b21      	cmp	r3, #33	; 0x21
 80047b8:	d108      	bne.n	80047cc <UART_DMAError+0x46>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f000 f865 	bl	8004896 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b22      	cmp	r3, #34	; 0x22
 80047ec:	d108      	bne.n	8004800 <UART_DMAError+0x7a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f000 f873 	bl	80048e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	f7ff ff49 	bl	80046a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	4613      	mov	r3, r2
 8004826:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2222      	movs	r2, #34	; 0x22
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0220 	orr.w	r2, r2, #32
 8004886:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b089      	sub	sp, #36	; 0x24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	61ba      	str	r2, [r7, #24]
 80048c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	613b      	str	r3, [r7, #16]
   return(result);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80048da:	bf00      	nop
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	; 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490e:	643a      	str	r2, [r7, #64]	; 0x40
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	61fb      	str	r3, [r7, #28]
   return(result);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	64bb      	str	r3, [r7, #72]	; 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	2b01      	cmp	r3, #1
 800495c:	d119      	bne.n	8004992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60bb      	str	r3, [r7, #8]
   return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497e:	61ba      	str	r2, [r7, #24]
 8004980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a0:	bf00      	nop
 80049a2:	3754      	adds	r7, #84	; 0x54
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fe6c 	bl	80046a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b21      	cmp	r3, #33	; 0x21
 80049e6:	d13e      	bne.n	8004a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d114      	bne.n	8004a1c <UART_Transmit_IT+0x48>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	1c9a      	adds	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]
 8004a1a:	e008      	b.n	8004a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6211      	str	r1, [r2, #32]
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fd f903 	bl	8001ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b22      	cmp	r3, #34	; 0x22
 8004ab6:	f040 80ab 	bne.w	8004c10 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d117      	bne.n	8004af4 <UART_Receive_IT+0x50>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
 8004af2:	e026      	b.n	8004b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d007      	beq.n	8004b18 <UART_Receive_IT+0x74>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <UART_Receive_IT+0x82>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e008      	b.n	8004b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d15a      	bne.n	8004c0c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0220 	bic.w	r2, r2, #32
 8004b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d135      	bne.n	8004c02 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	623a      	str	r2, [r7, #32]
 8004bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	69f9      	ldr	r1, [r7, #28]
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d10a      	bne.n	8004bf4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fd5c 	bl	80046b8 <HAL_UARTEx_RxEventCallback>
 8004c00:	e002      	b.n	8004c08 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd f86c 	bl	8001ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e002      	b.n	8004c12 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3730      	adds	r7, #48	; 0x30
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b0c0      	sub	sp, #256	; 0x100
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	ea40 0301 	orr.w	r3, r0, r1
 8004c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c74:	f021 010c 	bic.w	r1, r1, #12
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c82:	430b      	orrs	r3, r1
 8004c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	6999      	ldr	r1, [r3, #24]
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b8f      	ldr	r3, [pc, #572]	; (8004ee8 <UART_SetConfig+0x2cc>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d005      	beq.n	8004cbc <UART_SetConfig+0xa0>
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4b8d      	ldr	r3, [pc, #564]	; (8004eec <UART_SetConfig+0x2d0>)
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d104      	bne.n	8004cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cbc:	f7fe fc78 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8004cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cc4:	e003      	b.n	8004cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cc6:	f7fe fc5f 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd8:	f040 810c 	bne.w	8004ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	1891      	adds	r1, r2, r2
 8004cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cfe:	4621      	mov	r1, r4
 8004d00:	eb12 0801 	adds.w	r8, r2, r1
 8004d04:	4629      	mov	r1, r5
 8004d06:	eb43 0901 	adc.w	r9, r3, r1
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d1e:	4690      	mov	r8, r2
 8004d20:	4699      	mov	r9, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	eb18 0303 	adds.w	r3, r8, r3
 8004d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	eb49 0303 	adc.w	r3, r9, r3
 8004d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	18db      	adds	r3, r3, r3
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d50:	4613      	mov	r3, r2
 8004d52:	eb42 0303 	adc.w	r3, r2, r3
 8004d56:	657b      	str	r3, [r7, #84]	; 0x54
 8004d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d60:	f7fb fa96 	bl	8000290 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4b61      	ldr	r3, [pc, #388]	; (8004ef0 <UART_SetConfig+0x2d4>)
 8004d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	011c      	lsls	r4, r3, #4
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d94:	4641      	mov	r1, r8
 8004d96:	eb12 0a01 	adds.w	sl, r2, r1
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db4:	4692      	mov	sl, r2
 8004db6:	469b      	mov	fp, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	eb1a 0303 	adds.w	r3, sl, r3
 8004dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de0:	460b      	mov	r3, r1
 8004de2:	18db      	adds	r3, r3, r3
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
 8004dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004df6:	f7fb fa4b 	bl	8000290 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <UART_SetConfig+0x2d4>)
 8004e02:	fba3 2301 	umull	r2, r3, r3, r1
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2264      	movs	r2, #100	; 0x64
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	1acb      	subs	r3, r1, r3
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e16:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <UART_SetConfig+0x2d4>)
 8004e18:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e24:	441c      	add	r4, r3
 8004e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e40:	415b      	adcs	r3, r3
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e48:	4641      	mov	r1, r8
 8004e4a:	1851      	adds	r1, r2, r1
 8004e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e4e:	4649      	mov	r1, r9
 8004e50:	414b      	adcs	r3, r1
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e60:	4659      	mov	r1, fp
 8004e62:	00cb      	lsls	r3, r1, #3
 8004e64:	4651      	mov	r1, sl
 8004e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	00ca      	lsls	r2, r1, #3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	4642      	mov	r2, r8
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	460a      	mov	r2, r1
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	18db      	adds	r3, r3, r3
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eb2:	f7fb f9ed 	bl	8000290 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <UART_SetConfig+0x2d4>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	3332      	adds	r3, #50	; 0x32
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <UART_SetConfig+0x2d4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 0207 	and.w	r2, r3, #7
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4422      	add	r2, r4
 8004ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee4:	e105      	b.n	80050f2 <UART_SetConfig+0x4d6>
 8004ee6:	bf00      	nop
 8004ee8:	40011000 	.word	0x40011000
 8004eec:	40011400 	.word	0x40011400
 8004ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	1891      	adds	r1, r2, r2
 8004f0c:	6239      	str	r1, [r7, #32]
 8004f0e:	415b      	adcs	r3, r3
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
 8004f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f16:	4641      	mov	r1, r8
 8004f18:	1854      	adds	r4, r2, r1
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	eb43 0501 	adc.w	r5, r3, r1
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	00eb      	lsls	r3, r5, #3
 8004f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f2e:	00e2      	lsls	r2, r4, #3
 8004f30:	4614      	mov	r4, r2
 8004f32:	461d      	mov	r5, r3
 8004f34:	4643      	mov	r3, r8
 8004f36:	18e3      	adds	r3, r4, r3
 8004f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	eb45 0303 	adc.w	r3, r5, r3
 8004f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f62:	4629      	mov	r1, r5
 8004f64:	008b      	lsls	r3, r1, #2
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	008a      	lsls	r2, r1, #2
 8004f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f74:	f7fb f98c 	bl	8000290 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4b60      	ldr	r3, [pc, #384]	; (8005100 <UART_SetConfig+0x4e4>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	011c      	lsls	r4, r3, #4
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	61b9      	str	r1, [r7, #24]
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa8:	4641      	mov	r1, r8
 8004faa:	1851      	adds	r1, r2, r1
 8004fac:	6139      	str	r1, [r7, #16]
 8004fae:	4649      	mov	r1, r9
 8004fb0:	414b      	adcs	r3, r1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4651      	mov	r1, sl
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fdc:	464b      	mov	r3, r9
 8004fde:	460a      	mov	r2, r1
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005000:	4649      	mov	r1, r9
 8005002:	008b      	lsls	r3, r1, #2
 8005004:	4641      	mov	r1, r8
 8005006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500a:	4641      	mov	r1, r8
 800500c:	008a      	lsls	r2, r1, #2
 800500e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005012:	f7fb f93d 	bl	8000290 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <UART_SetConfig+0x4e4>)
 800501c:	fba3 1302 	umull	r1, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	2164      	movs	r1, #100	; 0x64
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	3332      	adds	r3, #50	; 0x32
 800502e:	4a34      	ldr	r2, [pc, #208]	; (8005100 <UART_SetConfig+0x4e4>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503a:	441c      	add	r4, r3
 800503c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005040:	2200      	movs	r2, #0
 8005042:	673b      	str	r3, [r7, #112]	; 0x70
 8005044:	677a      	str	r2, [r7, #116]	; 0x74
 8005046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	1891      	adds	r1, r2, r2
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	415b      	adcs	r3, r3
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800505a:	4641      	mov	r1, r8
 800505c:	1851      	adds	r1, r2, r1
 800505e:	6039      	str	r1, [r7, #0]
 8005060:	4649      	mov	r1, r9
 8005062:	414b      	adcs	r3, r1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005072:	4659      	mov	r1, fp
 8005074:	00cb      	lsls	r3, r1, #3
 8005076:	4651      	mov	r1, sl
 8005078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507c:	4651      	mov	r1, sl
 800507e:	00ca      	lsls	r2, r1, #3
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	4603      	mov	r3, r0
 8005086:	4642      	mov	r2, r8
 8005088:	189b      	adds	r3, r3, r2
 800508a:	66bb      	str	r3, [r7, #104]	; 0x68
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	663b      	str	r3, [r7, #96]	; 0x60
 80050a0:	667a      	str	r2, [r7, #100]	; 0x64
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050ae:	4649      	mov	r1, r9
 80050b0:	008b      	lsls	r3, r1, #2
 80050b2:	4641      	mov	r1, r8
 80050b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b8:	4641      	mov	r1, r8
 80050ba:	008a      	lsls	r2, r1, #2
 80050bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050c0:	f7fb f8e6 	bl	8000290 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <UART_SetConfig+0x4e4>)
 80050ca:	fba3 1302 	umull	r1, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2164      	movs	r1, #100	; 0x64
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	3332      	adds	r3, #50	; 0x32
 80050dc:	4a08      	ldr	r2, [pc, #32]	; (8005100 <UART_SetConfig+0x4e4>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4422      	add	r2, r4
 80050f0:	609a      	str	r2, [r3, #8]
}
 80050f2:	bf00      	nop
 80050f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050f8:	46bd      	mov	sp, r7
 80050fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050fe:	bf00      	nop
 8005100:	51eb851f 	.word	0x51eb851f

08005104 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005116:	2b84      	cmp	r3, #132	; 0x84
 8005118:	d005      	beq.n	8005126 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800511a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	3303      	adds	r3, #3
 8005124:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005138:	f001 fa5a 	bl	80065f0 <vTaskStartScheduler>
  
  return osOK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	bd80      	pop	{r7, pc}

08005142 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005144:	b089      	sub	sp, #36	; 0x24
 8005146:	af04      	add	r7, sp, #16
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <osThreadCreate+0x54>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01c      	beq.n	8005196 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685c      	ldr	r4, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681d      	ldr	r5, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691e      	ldr	r6, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ffc8 	bl	8005104 <makeFreeRtosPriority>
 8005174:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800517e:	9202      	str	r2, [sp, #8]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	9100      	str	r1, [sp, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4632      	mov	r2, r6
 8005188:	4629      	mov	r1, r5
 800518a:	4620      	mov	r0, r4
 800518c:	f000 ff1c 	bl	8005fc8 <xTaskCreateStatic>
 8005190:	4603      	mov	r3, r0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e01c      	b.n	80051d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685c      	ldr	r4, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a2:	b29e      	uxth	r6, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ffaa 	bl	8005104 <makeFreeRtosPriority>
 80051b0:	4602      	mov	r2, r0
 80051b2:	f107 030c 	add.w	r3, r7, #12
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	9200      	str	r2, [sp, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	4632      	mov	r2, r6
 80051be:	4629      	mov	r1, r5
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 ff5e 	bl	8006082 <xTaskCreate>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <osDelay+0x16>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	e000      	b.n	80051f2 <osDelay+0x18>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f892 	bl	800631c <vTaskDelay>
  
  return osOK;
 80051f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800521a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 0208 	add.w	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ba:	d103      	bne.n	80052c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e00c      	b.n	80052de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3308      	adds	r3, #8
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e002      	b.n	80052d2 <vListInsert+0x2e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d2f6      	bcs.n	80052cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6892      	ldr	r2, [r2, #8]
 800532c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d103      	bne.n	800534a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	1e5a      	subs	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005396:	f002 fa8d 	bl	80078b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	441a      	add	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	3b01      	subs	r3, #1
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d114      	bne.n	8005416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3310      	adds	r3, #16
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 fb4b 	bl	8006a94 <xTaskRemoveFromEventList>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <xQueueGenericReset+0xcc>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	e009      	b.n	800542a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fef1 	bl	8005202 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff feec 	bl	8005202 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800542a:	f002 fa73 	bl	8007914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3348      	adds	r3, #72	; 0x48
 8005474:	4618      	mov	r0, r3
 8005476:	f002 fb3f 	bl	8007af8 <pvPortMalloc>
 800547a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d011      	beq.n	80054a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	3348      	adds	r3, #72	; 0x48
 800548a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005494:	79fa      	ldrb	r2, [r7, #7]
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f805 	bl	80054b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054a6:	69bb      	ldr	r3, [r7, #24]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d103      	bne.n	80054cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054de:	2101      	movs	r1, #1
 80054e0:	69b8      	ldr	r0, [r7, #24]
 80054e2:	f7ff ff43 	bl	800536c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800550e:	2300      	movs	r3, #0
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f81d 	bl	8005554 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	4603      	mov	r3, r0
 800552a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	461a      	mov	r2, r3
 8005538:	6939      	ldr	r1, [r7, #16]
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff ff7e 	bl	800543c <xQueueGenericCreate>
 8005540:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ffd3 	bl	80054ee <prvInitialiseMutex>

		return xNewQueue;
 8005548:	68fb      	ldr	r3, [r7, #12]
	}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueGenericSend+0x32>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <xQueueGenericSend+0x40>
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <xQueueGenericSend+0x44>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <xQueueGenericSend+0x46>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <xQueueGenericSend+0x60>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x6e>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSend+0x72>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSend+0x74>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e2:	f001 fc17 	bl	8006e14 <xTaskGetSchedulerState>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <xQueueGenericSend+0x9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSend+0xa2>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSend+0xa4>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xQueueGenericSend+0xbe>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	61fb      	str	r3, [r7, #28]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005612:	f002 f94f 	bl	80078b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSend+0xd4>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d129      	bne.n	800567c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fbbb 	bl	8005da8 <prvCopyDataToQueue>
 8005632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3324      	adds	r3, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fa27 	bl	8006a94 <xTaskRemoveFromEventList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800564c:	4b3f      	ldr	r3, [pc, #252]	; (800574c <xQueueGenericSend+0x1f8>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e00a      	b.n	8005674 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <xQueueGenericSend+0x1f8>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005674:	f002 f94e 	bl	8007914 <vPortExitCritical>
				return pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	e063      	b.n	8005744 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005682:	f002 f947 	bl	8007914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e05c      	b.n	8005744 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fa5f 	bl	8006b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569e:	f002 f939 	bl	8007914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a2:	f001 f80f 	bl	80066c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a6:	f002 f905 	bl	80078b4 <vPortEnterCritical>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x16c>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSend+0x182>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d6:	f002 f91d 	bl	8007914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056da:	1d3a      	adds	r2, r7, #4
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fa4e 	bl	8006b84 <xTaskCheckForTimeOut>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d124      	bne.n	8005738 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f0:	f000 fc52 	bl	8005f98 <prvIsQueueFull>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3310      	adds	r3, #16
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f9a2 	bl	8006a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fbdd 	bl	8005ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570e:	f000 ffe7 	bl	80066e0 <xTaskResumeAll>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f af7c 	bne.w	8005612 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <xQueueGenericSend+0x1f8>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	e772      	b.n	8005612 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fbcb 	bl	8005ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005732:	f000 ffd5 	bl	80066e0 <xTaskResumeAll>
 8005736:	e76c      	b.n	8005612 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fbc5 	bl	8005ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573e:	f000 ffcf 	bl	80066e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005744:	4618      	mov	r0, r3
 8005746:	3738      	adds	r7, #56	; 0x38
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b090      	sub	sp, #64	; 0x40
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <xQueueGenericSendFromISR+0x3c>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xQueueGenericSendFromISR+0x40>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericSendFromISR+0x42>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d103      	bne.n	80057ba <xQueueGenericSendFromISR+0x6a>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <xQueueGenericSendFromISR+0x6e>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericSendFromISR+0x70>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057da:	f002 f94d 	bl	8007a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057de:	f3ef 8211 	mrs	r2, BASEPRI
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSendFromISR+0xbc>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d12f      	bne.n	800586c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005822:	f000 fac1 	bl	8005da8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582e:	d112      	bne.n	8005856 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d016      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f929 	bl	8006a94 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e007      	b.n	8005866 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005856:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800585a:	3301      	adds	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	b25a      	sxtb	r2, r3
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800586a:	e001      	b.n	8005870 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800586c:	2300      	movs	r3, #0
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800587a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800587e:	4618      	mov	r0, r3
 8005880:	3740      	adds	r7, #64	; 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b08e      	sub	sp, #56	; 0x38
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	623b      	str	r3, [r7, #32]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61fb      	str	r3, [r7, #28]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <xQueueGiveFromISR+0x58>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <xQueueGiveFromISR+0x5c>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <xQueueGiveFromISR+0x5e>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	61bb      	str	r3, [r7, #24]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058fe:	f002 f8bb 	bl	8007a78 <vPortValidateInterruptPriority>
	__asm volatile
 8005902:	f3ef 8211 	mrs	r2, BASEPRI
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617a      	str	r2, [r7, #20]
 8005918:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800591a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592a:	429a      	cmp	r2, r3
 800592c:	d22b      	bcs.n	8005986 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005948:	d112      	bne.n	8005970 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	3324      	adds	r3, #36	; 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f001 f89c 	bl	8006a94 <xTaskRemoveFromEventList>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e007      	b.n	8005980 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005974:	3301      	adds	r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	b25a      	sxtb	r2, r3
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
 8005984:	e001      	b.n	800598a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005986:	2300      	movs	r3, #0
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005998:	4618      	mov	r0, r3
 800599a:	3738      	adds	r7, #56	; 0x38
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueReceive+0x30>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	623b      	str	r3, [r7, #32]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <xQueueReceive+0x3e>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueReceive+0x42>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueReceive+0x44>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueReceive+0x5e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 fa09 	bl	8006e14 <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueReceive+0x6e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueReceive+0x72>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueReceive+0x74>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueReceive+0x8e>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61bb      	str	r3, [r7, #24]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f001 ff41 	bl	80078b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01f      	beq.n	8005a7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 fa1b 	bl	8005e7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1e5a      	subs	r2, r3, #1
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	3310      	adds	r3, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f81a 	bl	8006a94 <xTaskRemoveFromEventList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a66:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <xQueueReceive+0x1bc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a76:	f001 ff4d 	bl	8007914 <vPortExitCritical>
				return pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e069      	b.n	8005b52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a84:	f001 ff46 	bl	8007914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e062      	b.n	8005b52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 0310 	add.w	r3, r7, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f85e 	bl	8006b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f001 ff38 	bl	8007914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fe0e 	bl	80066c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f001 ff04 	bl	80078b4 <vPortEnterCritical>
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab8:	d103      	bne.n	8005ac2 <xQueueReceive+0x122>
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ace:	d103      	bne.n	8005ad8 <xQueueReceive+0x138>
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 ff1c 	bl	8007914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	1d3a      	adds	r2, r7, #4
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f84d 	bl	8006b84 <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d123      	bne.n	8005b38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af2:	f000 fa3b 	bl	8005f6c <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 ffa1 	bl	8006a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0c:	f000 f9dc 	bl	8005ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b10:	f000 fde6 	bl	80066e0 <xTaskResumeAll>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d189      	bne.n	8005a2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <xQueueReceive+0x1bc>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	e780      	b.n	8005a2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 f9cb 	bl	8005ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b32:	f000 fdd5 	bl	80066e0 <xTaskResumeAll>
 8005b36:	e77a      	b.n	8005a2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3a:	f000 f9c5 	bl	8005ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3e:	f000 fdcf 	bl	80066e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 fa12 	bl	8005f6c <prvIsQueueEmpty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f af6f 	beq.w	8005a2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08e      	sub	sp, #56	; 0x38
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fb      	str	r3, [r7, #28]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb0:	f001 f930 	bl	8006e14 <xTaskGetSchedulerState>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <xQueueSemaphoreTake+0x60>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <xQueueSemaphoreTake+0x64>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <xQueueSemaphoreTake+0x66>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	61bb      	str	r3, [r7, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be0:	f001 fe68 	bl	80078b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d024      	beq.n	8005c3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c00:	f001 fab0 	bl	8007164 <pvTaskIncrementMutexHeldCount>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00f      	beq.n	8005c32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	3310      	adds	r3, #16
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff3c 	bl	8006a94 <xTaskRemoveFromEventList>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <xQueueSemaphoreTake+0x214>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c32:	f001 fe6f 	bl	8007914 <vPortExitCritical>
				return pdPASS;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e097      	b.n	8005d6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c5c:	f001 fe5a 	bl	8007914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e082      	b.n	8005d6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 ff72 	bl	8006b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c74:	2301      	movs	r3, #1
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c78:	f001 fe4c 	bl	8007914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c7c:	f000 fd22 	bl	80066c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c80:	f001 fe18 	bl	80078b4 <vPortEnterCritical>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c90:	d103      	bne.n	8005c9a <xQueueSemaphoreTake+0x13a>
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca6:	d103      	bne.n	8005cb0 <xQueueSemaphoreTake+0x150>
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb0:	f001 fe30 	bl	8007914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff61 	bl	8006b84 <xTaskCheckForTimeOut>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d132      	bne.n	8005d2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cca:	f000 f94f 	bl	8005f6c <prvIsQueueEmpty>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d026      	beq.n	8005d22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005cdc:	f001 fdea 	bl	80078b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f8b3 	bl	8006e50 <xTaskPriorityInherit>
 8005cea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cec:	f001 fe12 	bl	8007914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fea7 	bl	8006a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d00:	f000 f8e2 	bl	8005ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d04:	f000 fcec 	bl	80066e0 <xTaskResumeAll>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f47f af68 	bne.w	8005be0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <xQueueSemaphoreTake+0x214>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	e75e      	b.n	8005be0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d24:	f000 f8d0 	bl	8005ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d28:	f000 fcda 	bl	80066e0 <xTaskResumeAll>
 8005d2c:	e758      	b.n	8005be0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d30:	f000 f8ca 	bl	8005ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d34:	f000 fcd4 	bl	80066e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3a:	f000 f917 	bl	8005f6c <prvIsQueueEmpty>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f43f af4d 	beq.w	8005be0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d4c:	f001 fdb2 	bl	80078b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d52:	f000 f811 	bl	8005d78 <prvGetDisinheritPriorityAfterTimeout>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f972 	bl	8007048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d64:	f001 fdd6 	bl	8007914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3738      	adds	r7, #56	; 0x38
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1c3 0307 	rsb	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e001      	b.n	8005d9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10d      	bne.n	8005de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d14d      	bne.n	8005e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 f8b2 	bl	8006f3c <xTaskPriorityDisinherit>
 8005dd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	e043      	b.n	8005e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d119      	bne.n	8005e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6858      	ldr	r0, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	461a      	mov	r2, r3
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	f002 fc2f 	bl	8008656 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d32b      	bcc.n	8005e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	e026      	b.n	8005e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68d8      	ldr	r0, [r3, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	461a      	mov	r2, r3
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	f002 fc15 	bl	8008656 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	425b      	negs	r3, r3
 8005e36:	441a      	add	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d207      	bcs.n	8005e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	425b      	negs	r3, r3
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d105      	bne.n	8005e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e72:	697b      	ldr	r3, [r7, #20]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d018      	beq.n	8005ec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	441a      	add	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d303      	bcc.n	8005eb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68d9      	ldr	r1, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6838      	ldr	r0, [r7, #0]
 8005ebc:	f002 fbcb 	bl	8008656 <memcpy>
	}
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ed0:	f001 fcf0 	bl	80078b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005edc:	e011      	b.n	8005f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3324      	adds	r3, #36	; 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fdd2 	bl	8006a94 <xTaskRemoveFromEventList>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ef6:	f000 fea7 	bl	8006c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dce9      	bgt.n	8005ede <prvUnlockQueue+0x16>
 8005f0a:	e000      	b.n	8005f0e <prvUnlockQueue+0x46>
					break;
 8005f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	22ff      	movs	r2, #255	; 0xff
 8005f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f16:	f001 fcfd 	bl	8007914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f1a:	f001 fccb 	bl	80078b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f26:	e011      	b.n	8005f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3310      	adds	r3, #16
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fdad 	bl	8006a94 <xTaskRemoveFromEventList>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f40:	f000 fe82 	bl	8006c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dce9      	bgt.n	8005f28 <prvUnlockQueue+0x60>
 8005f54:	e000      	b.n	8005f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	22ff      	movs	r2, #255	; 0xff
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f60:	f001 fcd8 	bl	8007914 <vPortExitCritical>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f74:	f001 fc9e 	bl	80078b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8a:	f001 fcc3 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa0:	f001 fc88 	bl	80078b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d102      	bne.n	8005fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e001      	b.n	8005fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fcab 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	; 0x38
 8005fcc:	af04      	add	r7, sp, #16
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xTaskCreateStatic+0x46>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	61fb      	str	r3, [r7, #28]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800600e:	23b4      	movs	r3, #180	; 0xb4
 8006010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2bb4      	cmp	r3, #180	; 0xb4
 8006016:	d00a      	beq.n	800602e <xTaskCreateStatic+0x66>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61bb      	str	r3, [r7, #24]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800602e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01e      	beq.n	8006074 <xTaskCreateStatic+0xac>
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006044:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	2202      	movs	r2, #2
 800604a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800604e:	2300      	movs	r3, #0
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f850 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800606e:	f000 f8eb 	bl	8006248 <prvAddNewTaskToReadyList>
 8006072:	e001      	b.n	8006078 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006078:	697b      	ldr	r3, [r7, #20]
	}
 800607a:	4618      	mov	r0, r3
 800607c:	3728      	adds	r7, #40	; 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08c      	sub	sp, #48	; 0x30
 8006086:	af04      	add	r7, sp, #16
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fd2e 	bl	8007af8 <pvPortMalloc>
 800609c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060a4:	20b4      	movs	r0, #180	; 0xb4
 80060a6:	f001 fd27 	bl	8007af8 <pvPortMalloc>
 80060aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
 80060b8:	e005      	b.n	80060c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f001 fde8 	bl	8007c90 <vPortFree>
 80060c0:	e001      	b.n	80060c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f80e 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f0:	69f8      	ldr	r0, [r7, #28]
 80060f2:	f000 f8a9 	bl	8006248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e002      	b.n	8006102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006102:	69bb      	ldr	r3, [r7, #24]
	}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006124:	3b01      	subs	r3, #1
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <prvInitialiseNewTask+0x48>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	617b      	str	r3, [r7, #20]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01f      	beq.n	800619a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e012      	b.n	8006186 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	7819      	ldrb	r1, [r3, #0]
 8006168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	3334      	adds	r3, #52	; 0x34
 8006170:	460a      	mov	r2, r1
 8006172:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b0f      	cmp	r3, #15
 800618a:	d9e9      	bls.n	8006160 <prvInitialiseNewTask+0x54>
 800618c:	e000      	b.n	8006190 <prvInitialiseNewTask+0x84>
			{
				break;
 800618e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006198:	e003      	b.n	80061a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d901      	bls.n	80061ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061a8:	2306      	movs	r3, #6
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	2200      	movs	r2, #0
 80061bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff f83d 	bl	8005242 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	3318      	adds	r3, #24
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff f838 	bl	8005242 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	f1c3 0207 	rsb	r2, r3, #7
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	334c      	adds	r3, #76	; 0x4c
 80061fc:	2260      	movs	r2, #96	; 0x60
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f002 fa36 	bl	8008672 <memset>
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	4a0c      	ldr	r2, [pc, #48]	; (800623c <prvInitialiseNewTask+0x130>)
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	4a0c      	ldr	r2, [pc, #48]	; (8006240 <prvInitialiseNewTask+0x134>)
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	4a0b      	ldr	r2, [pc, #44]	; (8006244 <prvInitialiseNewTask+0x138>)
 8006216:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	69b8      	ldr	r0, [r7, #24]
 800621e:	f001 fa19 	bl	8007654 <pxPortInitialiseStack>
 8006222:	4602      	mov	r2, r0
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006232:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006234:	bf00      	nop
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	080096c8 	.word	0x080096c8
 8006240:	080096e8 	.word	0x080096e8
 8006244:	080096a8 	.word	0x080096a8

08006248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006250:	f001 fb30 	bl	80078b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006254:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <prvAddNewTaskToReadyList+0xb8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a29      	ldr	r2, [pc, #164]	; (8006300 <prvAddNewTaskToReadyList+0xb8>)
 800625c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800625e:	4b29      	ldr	r3, [pc, #164]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006266:	4a27      	ldr	r2, [pc, #156]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <prvAddNewTaskToReadyList+0xb8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d110      	bne.n	8006296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006274:	f000 fd0c 	bl	8006c90 <prvInitialiseTaskLists>
 8006278:	e00d      	b.n	8006296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800627a:	4b23      	ldr	r3, [pc, #140]	; (8006308 <prvAddNewTaskToReadyList+0xc0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006282:	4b20      	ldr	r3, [pc, #128]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	429a      	cmp	r2, r3
 800628e:	d802      	bhi.n	8006296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006290:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <prvAddNewTaskToReadyList+0xc4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	4a1b      	ldr	r2, [pc, #108]	; (800630c <prvAddNewTaskToReadyList+0xc4>)
 800629e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <prvAddNewTaskToReadyList+0xc8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	4a18      	ldr	r2, [pc, #96]	; (8006310 <prvAddNewTaskToReadyList+0xc8>)
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4a15      	ldr	r2, [pc, #84]	; (8006314 <prvAddNewTaskToReadyList+0xcc>)
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f7fe ffc7 	bl	800525c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062ce:	f001 fb21 	bl	8007914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062d2:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <prvAddNewTaskToReadyList+0xc0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00e      	beq.n	80062f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062da:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d207      	bcs.n	80062f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <prvAddNewTaskToReadyList+0xd0>)
 80062ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200006f4 	.word	0x200006f4
 8006304:	200005f4 	.word	0x200005f4
 8006308:	20000700 	.word	0x20000700
 800630c:	20000710 	.word	0x20000710
 8006310:	200006fc 	.word	0x200006fc
 8006314:	200005f8 	.word	0x200005f8
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <vTaskDelay+0x60>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <vTaskDelay+0x30>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800634c:	f000 f9ba 	bl	80066c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006350:	2100      	movs	r1, #0
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 f918 	bl	8007588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006358:	f000 f9c2 	bl	80066e0 <xTaskResumeAll>
 800635c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <vTaskDelay+0x64>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2000071c 	.word	0x2000071c
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800638c:	f001 fa92 	bl	80078b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <vTaskSuspend+0x18>
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <vTaskSuspend+0x104>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	e000      	b.n	800639e <vTaskSuspend+0x1a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe ffb6 	bl	8005316 <uxListRemove>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d115      	bne.n	80063dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4935      	ldr	r1, [pc, #212]	; (800648c <vTaskSuspend+0x108>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <vTaskSuspend+0x58>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2201      	movs	r2, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	43da      	mvns	r2, r3
 80063d2:	4b2f      	ldr	r3, [pc, #188]	; (8006490 <vTaskSuspend+0x10c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4013      	ands	r3, r2
 80063d8:	4a2d      	ldr	r2, [pc, #180]	; (8006490 <vTaskSuspend+0x10c>)
 80063da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe ff94 	bl	8005316 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4827      	ldr	r0, [pc, #156]	; (8006494 <vTaskSuspend+0x110>)
 80063f6:	f7fe ff31 	bl	800525c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d103      	bne.n	800640e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800640e:	f001 fa81 	bl	8007914 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006412:	4b21      	ldr	r3, [pc, #132]	; (8006498 <vTaskSuspend+0x114>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800641a:	f001 fa4b 	bl	80078b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800641e:	f000 fcd9 	bl	8006dd4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006422:	f001 fa77 	bl	8007914 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <vTaskSuspend+0x104>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	429a      	cmp	r2, r3
 800642e:	d127      	bne.n	8006480 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006430:	4b19      	ldr	r3, [pc, #100]	; (8006498 <vTaskSuspend+0x114>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d017      	beq.n	8006468 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006438:	4b18      	ldr	r3, [pc, #96]	; (800649c <vTaskSuspend+0x118>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <vTaskSuspend+0xd2>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60bb      	str	r3, [r7, #8]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <vTaskSuspend+0x11c>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006466:	e00b      	b.n	8006480 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <vTaskSuspend+0x110>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <vTaskSuspend+0x120>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d103      	bne.n	800647c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <vTaskSuspend+0x104>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
	}
 800647a:	e001      	b.n	8006480 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800647c:	f000 fa84 	bl	8006988 <vTaskSwitchContext>
	}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200005f4 	.word	0x200005f4
 800648c:	200005f8 	.word	0x200005f8
 8006490:	200006fc 	.word	0x200006fc
 8006494:	200006e0 	.word	0x200006e0
 8006498:	20000700 	.word	0x20000700
 800649c:	2000071c 	.word	0x2000071c
 80064a0:	e000ed04 	.word	0xe000ed04
 80064a4:	200006f4 	.word	0x200006f4

080064a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <prvTaskIsTaskSuspended+0x5c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10a      	bne.n	80064f4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <prvTaskIsTaskSuspended+0x60>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d005      	beq.n	80064f4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064f4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200006e0 	.word	0x200006e0
 8006508:	200006b4 	.word	0x200006b4

0800650c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	61bb      	str	r3, [r7, #24]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006538:	f001 fa9e 	bl	8007a78 <vPortValidateInterruptPriority>
	__asm volatile
 800653c:	f3ef 8211 	mrs	r2, BASEPRI
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	617a      	str	r2, [r7, #20]
 8006552:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006554:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006556:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006558:	6a38      	ldr	r0, [r7, #32]
 800655a:	f7ff ffa5 	bl	80064a8 <prvTaskIsTaskSuspended>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d02f      	beq.n	80065c4 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006564:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <xTaskResumeFromISR+0xd0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d125      	bne.n	80065b8 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <xTaskResumeFromISR+0xd4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d301      	bcc.n	800657e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fec7 	bl	8005316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <xTaskResumeFromISR+0xd8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4313      	orrs	r3, r2
 8006596:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <xTaskResumeFromISR+0xd8>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <xTaskResumeFromISR+0xdc>)
 80065a8:	441a      	add	r2, r3
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7fe fe53 	bl	800525c <vListInsertEnd>
 80065b6:	e005      	b.n	80065c4 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	3318      	adds	r3, #24
 80065bc:	4619      	mov	r1, r3
 80065be:	480b      	ldr	r0, [pc, #44]	; (80065ec <xTaskResumeFromISR+0xe0>)
 80065c0:	f7fe fe4c 	bl	800525c <vListInsertEnd>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3728      	adds	r7, #40	; 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000071c 	.word	0x2000071c
 80065e0:	200005f4 	.word	0x200005f4
 80065e4:	200006fc 	.word	0x200006fc
 80065e8:	200005f8 	.word	0x200005f8
 80065ec:	200006b4 	.word	0x200006b4

080065f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065fe:	463a      	mov	r2, r7
 8006600:	1d39      	adds	r1, r7, #4
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	4618      	mov	r0, r3
 8006608:	f7fa fd6a 	bl	80010e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	460a      	mov	r2, r1
 800661e:	4921      	ldr	r1, [pc, #132]	; (80066a4 <vTaskStartScheduler+0xb4>)
 8006620:	4821      	ldr	r0, [pc, #132]	; (80066a8 <vTaskStartScheduler+0xb8>)
 8006622:	f7ff fcd1 	bl	8005fc8 <xTaskCreateStatic>
 8006626:	4603      	mov	r3, r0
 8006628:	4a20      	ldr	r2, [pc, #128]	; (80066ac <vTaskStartScheduler+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <vTaskStartScheduler+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e001      	b.n	800663e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d11b      	bne.n	800667c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <vTaskStartScheduler+0xc0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	334c      	adds	r3, #76	; 0x4c
 800665e:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <vTaskStartScheduler+0xc4>)
 8006660:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <vTaskStartScheduler+0xc8>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <vTaskStartScheduler+0xcc>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <vTaskStartScheduler+0xd0>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006676:	f001 f87b 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800667a:	e00e      	b.n	800669a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006682:	d10a      	bne.n	800669a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <vTaskStartScheduler+0xa8>
}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08009664 	.word	0x08009664
 80066a8:	08006c61 	.word	0x08006c61
 80066ac:	20000718 	.word	0x20000718
 80066b0:	200005f4 	.word	0x200005f4
 80066b4:	20000018 	.word	0x20000018
 80066b8:	20000714 	.word	0x20000714
 80066bc:	20000700 	.word	0x20000700
 80066c0:	200006f8 	.word	0x200006f8

080066c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <vTaskSuspendAll+0x18>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	4a03      	ldr	r2, [pc, #12]	; (80066dc <vTaskSuspendAll+0x18>)
 80066d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066d2:	bf00      	nop
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	2000071c 	.word	0x2000071c

080066e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <xTaskResumeAll+0x114>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <xTaskResumeAll+0x2c>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	603b      	str	r3, [r7, #0]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800670c:	f001 f8d2 	bl	80078b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006710:	4b38      	ldr	r3, [pc, #224]	; (80067f4 <xTaskResumeAll+0x114>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	4a37      	ldr	r2, [pc, #220]	; (80067f4 <xTaskResumeAll+0x114>)
 8006718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <xTaskResumeAll+0x114>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d161      	bne.n	80067e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006722:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <xTaskResumeAll+0x118>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d05d      	beq.n	80067e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672a:	e02e      	b.n	800678a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672c:	4b33      	ldr	r3, [pc, #204]	; (80067fc <xTaskResumeAll+0x11c>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3318      	adds	r3, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fdec 	bl	8005316 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fde7 	bl	8005316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <xTaskResumeAll+0x120>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4313      	orrs	r3, r2
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <xTaskResumeAll+0x120>)
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4a27      	ldr	r2, [pc, #156]	; (8006804 <xTaskResumeAll+0x124>)
 8006768:	441a      	add	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3304      	adds	r3, #4
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7fe fd73 	bl	800525c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <xTaskResumeAll+0x128>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006784:	4b21      	ldr	r3, [pc, #132]	; (800680c <xTaskResumeAll+0x12c>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <xTaskResumeAll+0x11c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1cc      	bne.n	800672c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006798:	f000 fb1c 	bl	8006dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <xTaskResumeAll+0x130>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d010      	beq.n	80067ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067a8:	f000 f836 	bl	8006818 <xTaskIncrementTick>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <xTaskResumeAll+0x12c>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f1      	bne.n	80067a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80067c4:	4b12      	ldr	r3, [pc, #72]	; (8006810 <xTaskResumeAll+0x130>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <xTaskResumeAll+0x12c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <xTaskResumeAll+0x134>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 f895 	bl	8007914 <vPortExitCritical>

	return xAlreadyYielded;
 80067ea:	68bb      	ldr	r3, [r7, #8]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	2000071c 	.word	0x2000071c
 80067f8:	200006f4 	.word	0x200006f4
 80067fc:	200006b4 	.word	0x200006b4
 8006800:	200006fc 	.word	0x200006fc
 8006804:	200005f8 	.word	0x200005f8
 8006808:	200005f4 	.word	0x200005f4
 800680c:	20000708 	.word	0x20000708
 8006810:	20000704 	.word	0x20000704
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006822:	4b4e      	ldr	r3, [pc, #312]	; (800695c <xTaskIncrementTick+0x144>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 808e 	bne.w	8006948 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800682c:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <xTaskIncrementTick+0x148>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006834:	4a4a      	ldr	r2, [pc, #296]	; (8006960 <xTaskIncrementTick+0x148>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d120      	bne.n	8006882 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006840:	4b48      	ldr	r3, [pc, #288]	; (8006964 <xTaskIncrementTick+0x14c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <xTaskIncrementTick+0x48>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xTaskIncrementTick+0x46>
 8006860:	4b40      	ldr	r3, [pc, #256]	; (8006964 <xTaskIncrementTick+0x14c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4b40      	ldr	r3, [pc, #256]	; (8006968 <xTaskIncrementTick+0x150>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3e      	ldr	r2, [pc, #248]	; (8006964 <xTaskIncrementTick+0x14c>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4a3e      	ldr	r2, [pc, #248]	; (8006968 <xTaskIncrementTick+0x150>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b3d      	ldr	r3, [pc, #244]	; (800696c <xTaskIncrementTick+0x154>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a3c      	ldr	r2, [pc, #240]	; (800696c <xTaskIncrementTick+0x154>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	f000 faa9 	bl	8006dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006882:	4b3b      	ldr	r3, [pc, #236]	; (8006970 <xTaskIncrementTick+0x158>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	429a      	cmp	r2, r3
 800688a:	d348      	bcc.n	800691e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688c:	4b35      	ldr	r3, [pc, #212]	; (8006964 <xTaskIncrementTick+0x14c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006896:	4b36      	ldr	r3, [pc, #216]	; (8006970 <xTaskIncrementTick+0x158>)
 8006898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800689c:	601a      	str	r2, [r3, #0]
					break;
 800689e:	e03e      	b.n	800691e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a0:	4b30      	ldr	r3, [pc, #192]	; (8006964 <xTaskIncrementTick+0x14c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d203      	bcs.n	80068c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068b8:	4a2d      	ldr	r2, [pc, #180]	; (8006970 <xTaskIncrementTick+0x158>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068be:	e02e      	b.n	800691e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe fd26 	bl	8005316 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3318      	adds	r3, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fd1d 	bl	8005316 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	2201      	movs	r2, #1
 80068e2:	409a      	lsls	r2, r3
 80068e4:	4b23      	ldr	r3, [pc, #140]	; (8006974 <xTaskIncrementTick+0x15c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	4a22      	ldr	r2, [pc, #136]	; (8006974 <xTaskIncrementTick+0x15c>)
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <xTaskIncrementTick+0x160>)
 80068fc:	441a      	add	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f7fe fca9 	bl	800525c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	4b1b      	ldr	r3, [pc, #108]	; (800697c <xTaskIncrementTick+0x164>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d3b9      	bcc.n	800688c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800691c:	e7b6      	b.n	800688c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <xTaskIncrementTick+0x164>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4914      	ldr	r1, [pc, #80]	; (8006978 <xTaskIncrementTick+0x160>)
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d901      	bls.n	800693a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <xTaskIncrementTick+0x168>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e004      	b.n	8006952 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006948:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <xTaskIncrementTick+0x16c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <xTaskIncrementTick+0x16c>)
 8006950:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006952:	697b      	ldr	r3, [r7, #20]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	2000071c 	.word	0x2000071c
 8006960:	200006f8 	.word	0x200006f8
 8006964:	200006ac 	.word	0x200006ac
 8006968:	200006b0 	.word	0x200006b0
 800696c:	2000070c 	.word	0x2000070c
 8006970:	20000714 	.word	0x20000714
 8006974:	200006fc 	.word	0x200006fc
 8006978:	200005f8 	.word	0x200005f8
 800697c:	200005f4 	.word	0x200005f4
 8006980:	20000708 	.word	0x20000708
 8006984:	20000704 	.word	0x20000704

08006988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <vTaskSwitchContext+0xac>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006996:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <vTaskSwitchContext+0xb0>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800699c:	e044      	b.n	8006a28 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800699e:	4b26      	ldr	r3, [pc, #152]	; (8006a38 <vTaskSwitchContext+0xb0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <vTaskSwitchContext+0xb4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	fab3 f383 	clz	r3, r3
 80069b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	f1c3 031f 	rsb	r3, r3, #31
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	4921      	ldr	r1, [pc, #132]	; (8006a40 <vTaskSwitchContext+0xb8>)
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vTaskSwitchContext+0x5a>
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4a14      	ldr	r2, [pc, #80]	; (8006a40 <vTaskSwitchContext+0xb8>)
 80069f0:	4413      	add	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3308      	adds	r3, #8
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d104      	bne.n	8006a14 <vTaskSwitchContext+0x8c>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	605a      	str	r2, [r3, #4]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <vTaskSwitchContext+0xbc>)
 8006a1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <vTaskSwitchContext+0xbc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	334c      	adds	r3, #76	; 0x4c
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <vTaskSwitchContext+0xc0>)
 8006a26:	6013      	str	r3, [r2, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2000071c 	.word	0x2000071c
 8006a38:	20000708 	.word	0x20000708
 8006a3c:	200006fc 	.word	0x200006fc
 8006a40:	200005f8 	.word	0x200005f8
 8006a44:	200005f4 	.word	0x200005f4
 8006a48:	20000018 	.word	0x20000018

08006a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vTaskPlaceOnEventList+0x44>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3318      	adds	r3, #24
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fe fc12 	bl	80052a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a80:	2101      	movs	r1, #1
 8006a82:	6838      	ldr	r0, [r7, #0]
 8006a84:	f000 fd80 	bl	8007588 <prvAddCurrentTaskToDelayedList>
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200005f4 	.word	0x200005f4

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fc26 	bl	8005316 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <xTaskRemoveFromEventList+0xac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11c      	bne.n	8006b0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fc1d 	bl	8005316 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006afc:	441a      	add	r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe fba9 	bl	800525c <vListInsertEnd>
 8006b0a:	e005      	b.n	8006b18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4619      	mov	r1, r3
 8006b12:	480e      	ldr	r0, [pc, #56]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006b14:	f7fe fba2 	bl	800525c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d905      	bls.n	8006b32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e001      	b.n	8006b36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b36:	697b      	ldr	r3, [r7, #20]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	2000071c 	.word	0x2000071c
 8006b44:	200006fc 	.word	0x200006fc
 8006b48:	200005f8 	.word	0x200005f8
 8006b4c:	200006b4 	.word	0x200006b4
 8006b50:	200005f4 	.word	0x200005f4
 8006b54:	20000708 	.word	0x20000708

08006b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <vTaskInternalSetTimeOutState+0x24>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <vTaskInternalSetTimeOutState+0x28>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	605a      	str	r2, [r3, #4]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	2000070c 	.word	0x2000070c
 8006b80:	200006f8 	.word	0x200006f8

08006b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	613b      	str	r3, [r7, #16]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	60fb      	str	r3, [r7, #12]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bc6:	f000 fe75 	bl	80078b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bca:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <xTaskCheckForTimeOut+0xbc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be2:	d102      	bne.n	8006bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	e023      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <xTaskCheckForTimeOut+0xc0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d007      	beq.n	8006c06 <xTaskCheckForTimeOut+0x82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d302      	bcc.n	8006c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	e015      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d20b      	bcs.n	8006c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff9b 	bl	8006b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e004      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c32:	f000 fe6f 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8006c36:	69fb      	ldr	r3, [r7, #28]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	200006f8 	.word	0x200006f8
 8006c44:	2000070c 	.word	0x2000070c

08006c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <vTaskMissedYield+0x14>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000708 	.word	0x20000708

08006c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c68:	f000 f852 	bl	8006d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvIdleTask+0x28>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d9f9      	bls.n	8006c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <prvIdleTask+0x2c>)
 8006c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c84:	e7f0      	b.n	8006c68 <prvIdleTask+0x8>
 8006c86:	bf00      	nop
 8006c88:	200005f8 	.word	0x200005f8
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c96:	2300      	movs	r3, #0
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	e00c      	b.n	8006cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <prvInitialiseTaskLists+0x60>)
 8006ca8:	4413      	add	r3, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe faa9 	bl	8005202 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d9ef      	bls.n	8006c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cbc:	480d      	ldr	r0, [pc, #52]	; (8006cf4 <prvInitialiseTaskLists+0x64>)
 8006cbe:	f7fe faa0 	bl	8005202 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cc2:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <prvInitialiseTaskLists+0x68>)
 8006cc4:	f7fe fa9d 	bl	8005202 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cc8:	480c      	ldr	r0, [pc, #48]	; (8006cfc <prvInitialiseTaskLists+0x6c>)
 8006cca:	f7fe fa9a 	bl	8005202 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cce:	480c      	ldr	r0, [pc, #48]	; (8006d00 <prvInitialiseTaskLists+0x70>)
 8006cd0:	f7fe fa97 	bl	8005202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cd4:	480b      	ldr	r0, [pc, #44]	; (8006d04 <prvInitialiseTaskLists+0x74>)
 8006cd6:	f7fe fa94 	bl	8005202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <prvInitialiseTaskLists+0x78>)
 8006cdc:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <prvInitialiseTaskLists+0x64>)
 8006cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvInitialiseTaskLists+0x7c>)
 8006ce2:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <prvInitialiseTaskLists+0x68>)
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200005f8 	.word	0x200005f8
 8006cf4:	20000684 	.word	0x20000684
 8006cf8:	20000698 	.word	0x20000698
 8006cfc:	200006b4 	.word	0x200006b4
 8006d00:	200006c8 	.word	0x200006c8
 8006d04:	200006e0 	.word	0x200006e0
 8006d08:	200006ac 	.word	0x200006ac
 8006d0c:	200006b0 	.word	0x200006b0

08006d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d16:	e019      	b.n	8006d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d18:	f000 fdcc 	bl	80078b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <prvCheckTasksWaitingTermination+0x50>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe faf4 	bl	8005316 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <prvCheckTasksWaitingTermination+0x54>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	4a0b      	ldr	r2, [pc, #44]	; (8006d64 <prvCheckTasksWaitingTermination+0x54>)
 8006d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4a0a      	ldr	r2, [pc, #40]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d42:	f000 fde7 	bl	8007914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f810 	bl	8006d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e1      	bne.n	8006d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200006c8 	.word	0x200006c8
 8006d64:	200006f4 	.word	0x200006f4
 8006d68:	200006dc 	.word	0x200006dc

08006d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	334c      	adds	r3, #76	; 0x4c
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fd3d 	bl	80087f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 ff7f 	bl	8007c90 <vPortFree>
				vPortFree( pxTCB );
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 ff7c 	bl	8007c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d98:	e018      	b.n	8006dcc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d103      	bne.n	8006dac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 ff73 	bl	8007c90 <vPortFree>
	}
 8006daa:	e00f      	b.n	8006dcc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d00a      	beq.n	8006dcc <prvDeleteTCB+0x60>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60fb      	str	r3, [r7, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <prvDeleteTCB+0x5e>
	}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <prvResetNextTaskUnblockTime+0x38>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <prvResetNextTaskUnblockTime+0x3c>)
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dec:	e008      	b.n	8006e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <prvResetNextTaskUnblockTime+0x38>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	200006ac 	.word	0x200006ac
 8006e10:	20000714 	.word	0x20000714

08006e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <xTaskGetSchedulerState+0x34>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e22:	2301      	movs	r3, #1
 8006e24:	607b      	str	r3, [r7, #4]
 8006e26:	e008      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <xTaskGetSchedulerState+0x38>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e30:	2302      	movs	r3, #2
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	e001      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e3a:	687b      	ldr	r3, [r7, #4]
	}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000700 	.word	0x20000700
 8006e4c:	2000071c 	.word	0x2000071c

08006e50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d05e      	beq.n	8006f24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <xTaskPriorityInherit+0xe0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d24e      	bcs.n	8006f12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db06      	blt.n	8006e8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7c:	4b2c      	ldr	r3, [pc, #176]	; (8006f30 <xTaskPriorityInherit+0xe0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	f1c3 0207 	rsb	r2, r3, #7
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <xTaskPriorityInherit+0xe4>)
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d12f      	bne.n	8006f02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fa35 	bl	8005316 <uxListRemove>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43da      	mvns	r2, r3
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <xTaskPriorityInherit+0xe8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <xTaskPriorityInherit+0xe8>)
 8006ec6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <xTaskPriorityInherit+0xe0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <xTaskPriorityInherit+0xe8>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <xTaskPriorityInherit+0xe8>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <xTaskPriorityInherit+0xe4>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe f9ae 	bl	800525c <vListInsertEnd>
 8006f00:	e004      	b.n	8006f0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <xTaskPriorityInherit+0xe0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e008      	b.n	8006f24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <xTaskPriorityInherit+0xe0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d201      	bcs.n	8006f24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f24:	68fb      	ldr	r3, [r7, #12]
	}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200005f4 	.word	0x200005f4
 8006f34:	200005f8 	.word	0x200005f8
 8006f38:	200006fc 	.word	0x200006fc

08006f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d06e      	beq.n	8007030 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f52:	4b3a      	ldr	r3, [pc, #232]	; (800703c <xTaskPriorityDisinherit+0x100>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d00a      	beq.n	8006f72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	60fb      	str	r3, [r7, #12]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60bb      	str	r3, [r7, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d044      	beq.n	8007030 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d140      	bne.n	8007030 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe f9af 	bl	8005316 <uxListRemove>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d115      	bne.n	8006fea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	491f      	ldr	r1, [pc, #124]	; (8007040 <xTaskPriorityDisinherit+0x104>)
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xTaskPriorityDisinherit+0xae>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	2201      	movs	r2, #1
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43da      	mvns	r2, r3
 8006fe0:	4b18      	ldr	r3, [pc, #96]	; (8007044 <xTaskPriorityDisinherit+0x108>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	4a17      	ldr	r2, [pc, #92]	; (8007044 <xTaskPriorityDisinherit+0x108>)
 8006fe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	f1c3 0207 	rsb	r2, r3, #7
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	2201      	movs	r2, #1
 8007004:	409a      	lsls	r2, r3
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <xTaskPriorityDisinherit+0x108>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4313      	orrs	r3, r2
 800700c:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <xTaskPriorityDisinherit+0x108>)
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <xTaskPriorityDisinherit+0x104>)
 800701e:	441a      	add	r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7fe f918 	bl	800525c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007030:	697b      	ldr	r3, [r7, #20]
	}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	200005f4 	.word	0x200005f4
 8007040:	200005f8 	.word	0x200005f8
 8007044:	200006fc 	.word	0x200006fc

08007048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d077      	beq.n	8007150 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60fb      	str	r3, [r7, #12]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d902      	bls.n	800708e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	e002      	b.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	429a      	cmp	r2, r3
 800709c:	d058      	beq.n	8007150 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d153      	bne.n	8007150 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80070a8:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d10a      	bne.n	80070c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60bb      	str	r3, [r7, #8]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db04      	blt.n	80070e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f1c3 0207 	rsb	r2, r3, #7
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	6959      	ldr	r1, [r3, #20]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80070f6:	4413      	add	r3, r2
 80070f8:	4299      	cmp	r1, r3
 80070fa:	d129      	bne.n	8007150 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe f908 	bl	8005316 <uxListRemove>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	2201      	movs	r2, #1
 8007112:	fa02 f303 	lsl.w	r3, r2, r3
 8007116:	43da      	mvns	r2, r3
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4013      	ands	r3, r2
 800711e:	4a10      	ldr	r2, [pc, #64]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007120:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	2201      	movs	r2, #1
 8007128:	409a      	lsls	r2, r3
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4313      	orrs	r3, r2
 8007130:	4a0b      	ldr	r2, [pc, #44]	; (8007160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4a06      	ldr	r2, [pc, #24]	; (800715c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007142:	441a      	add	r2, r3
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe f886 	bl	800525c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007150:	bf00      	nop
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	200005f4 	.word	0x200005f4
 800715c:	200005f8 	.word	0x200005f8
 8007160:	200006fc 	.word	0x200006fc

08007164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <pvTaskIncrementMutexHeldCount+0x24>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <pvTaskIncrementMutexHeldCount+0x24>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007176:	3201      	adds	r2, #1
 8007178:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <pvTaskIncrementMutexHeldCount+0x24>)
 800717c:	681b      	ldr	r3, [r3, #0]
	}
 800717e:	4618      	mov	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	200005f4 	.word	0x200005f4

0800718c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007196:	f000 fb8d 	bl	80078b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800719a:	4b20      	ldr	r3, [pc, #128]	; (800721c <ulTaskNotifyTake+0x90>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d113      	bne.n	80071ce <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <ulTaskNotifyTake+0x90>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00b      	beq.n	80071ce <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b6:	2101      	movs	r1, #1
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	f000 f9e5 	bl	8007588 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80071be:	4b18      	ldr	r3, [pc, #96]	; (8007220 <ulTaskNotifyTake+0x94>)
 80071c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80071ce:	f000 fba1 	bl	8007914 <vPortExitCritical>

		taskENTER_CRITICAL();
 80071d2:	f000 fb6f 	bl	80078b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <ulTaskNotifyTake+0x90>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071de:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00e      	beq.n	8007204 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <ulTaskNotifyTake+0x90>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80071f6:	e005      	b.n	8007204 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <ulTaskNotifyTake+0x90>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	3a01      	subs	r2, #1
 8007200:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <ulTaskNotifyTake+0x90>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800720e:	f000 fb81 	bl	8007914 <vPortExitCritical>

		return ulReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
	}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200005f4 	.word	0x200005f4
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007232:	f000 fb3f 	bl	80078b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007236:	4b29      	ldr	r3, [pc, #164]	; (80072dc <xTaskNotifyWait+0xb8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d01c      	beq.n	800727e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007244:	4b25      	ldr	r3, [pc, #148]	; (80072dc <xTaskNotifyWait+0xb8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	43d2      	mvns	r2, r2
 8007250:	400a      	ands	r2, r1
 8007252:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007256:	4b21      	ldr	r3, [pc, #132]	; (80072dc <xTaskNotifyWait+0xb8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007266:	2101      	movs	r1, #1
 8007268:	6838      	ldr	r0, [r7, #0]
 800726a:	f000 f98d 	bl	8007588 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800726e:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <xTaskNotifyWait+0xbc>)
 8007270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800727e:	f000 fb49 	bl	8007914 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007282:	f000 fb17 	bl	80078b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <xTaskNotifyWait+0xb8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007298:	4b10      	ldr	r3, [pc, #64]	; (80072dc <xTaskNotifyWait+0xb8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d002      	beq.n	80072ac <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e00a      	b.n	80072c2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <xTaskNotifyWait+0xb8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	43d2      	mvns	r2, r2
 80072b8:	400a      	ands	r2, r1
 80072ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <xTaskNotifyWait+0xb8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80072cc:	f000 fb22 	bl	8007914 <vPortExitCritical>

		return xReturn;
 80072d0:	697b      	ldr	r3, [r7, #20]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200005f4 	.word	0x200005f4
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	4613      	mov	r3, r2
 80072f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <xTaskGenericNotify+0x30>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	61bb      	str	r3, [r7, #24]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007318:	f000 facc 	bl	80078b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007332:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d82d      	bhi.n	800739e <xTaskGenericNotify+0xba>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <xTaskGenericNotify+0x64>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	080073c1 	.word	0x080073c1
 800734c:	0800735d 	.word	0x0800735d
 8007350:	0800736f 	.word	0x0800736f
 8007354:	0800737f 	.word	0x0800737f
 8007358:	08007389 	.word	0x08007389
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	431a      	orrs	r2, r3
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800736c:	e02b      	b.n	80073c6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800737c:	e023      	b.n	80073c6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007386:	e01e      	b.n	80073c6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007388:	7ffb      	ldrb	r3, [r7, #31]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d004      	beq.n	8007398 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007396:	e016      	b.n	80073c6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800739c:	e013      	b.n	80073c6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a8:	d00c      	beq.n	80073c4 <xTaskGenericNotify+0xe0>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	617b      	str	r3, [r7, #20]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xTaskGenericNotify+0xda>
					break;
 80073c0:	bf00      	nop
 80073c2:	e000      	b.n	80073c6 <xTaskGenericNotify+0xe2>

					break;
 80073c4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073c6:	7ffb      	ldrb	r3, [r7, #31]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d139      	bne.n	8007440 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd ffa0 	bl	8005316 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	2201      	movs	r2, #1
 80073dc:	409a      	lsls	r2, r3
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <xTaskGenericNotify+0x16c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <xTaskGenericNotify+0x16c>)
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <xTaskGenericNotify+0x170>)
 80073f6:	441a      	add	r2, r3
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f7fd ff2c 	bl	800525c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <xTaskGenericNotify+0x13e>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	613b      	str	r3, [r7, #16]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <xTaskGenericNotify+0x174>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	429a      	cmp	r2, r3
 800742e:	d907      	bls.n	8007440 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <xTaskGenericNotify+0x178>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007440:	f000 fa68 	bl	8007914 <vPortExitCritical>

		return xReturn;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007446:	4618      	mov	r0, r3
 8007448:	3728      	adds	r7, #40	; 0x28
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	200006fc 	.word	0x200006fc
 8007454:	200005f8 	.word	0x200005f8
 8007458:	200005f4 	.word	0x200005f4
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61bb      	str	r3, [r7, #24]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007486:	f000 faf7 	bl	8007a78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800748e:	f3ef 8211 	mrs	r2, BASEPRI
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	617a      	str	r2, [r7, #20]
 80074a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074a6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074a8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80074b0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074c8:	7ffb      	ldrb	r3, [r7, #31]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d145      	bne.n	800755a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ec:	4b20      	ldr	r3, [pc, #128]	; (8007570 <vTaskNotifyGiveFromISR+0x110>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11c      	bne.n	800752e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fd ff0c 	bl	8005316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	2201      	movs	r2, #1
 8007504:	409a      	lsls	r2, r3
 8007506:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <vTaskNotifyGiveFromISR+0x114>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	4a19      	ldr	r2, [pc, #100]	; (8007574 <vTaskNotifyGiveFromISR+0x114>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a16      	ldr	r2, [pc, #88]	; (8007578 <vTaskNotifyGiveFromISR+0x118>)
 800751e:	441a      	add	r2, r3
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fd fe98 	bl	800525c <vListInsertEnd>
 800752c:	e005      	b.n	800753a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	3318      	adds	r3, #24
 8007532:	4619      	mov	r1, r3
 8007534:	4811      	ldr	r0, [pc, #68]	; (800757c <vTaskNotifyGiveFromISR+0x11c>)
 8007536:	f7fd fe91 	bl	800525c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753e:	4b10      	ldr	r3, [pc, #64]	; (8007580 <vTaskNotifyGiveFromISR+0x120>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	429a      	cmp	r2, r3
 8007546:	d908      	bls.n	800755a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <vTaskNotifyGiveFromISR+0x124>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f383 8811 	msr	BASEPRI, r3
}
 8007564:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007566:	bf00      	nop
 8007568:	3728      	adds	r7, #40	; 0x28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	2000071c 	.word	0x2000071c
 8007574:	200006fc 	.word	0x200006fc
 8007578:	200005f8 	.word	0x200005f8
 800757c:	200006b4 	.word	0x200006b4
 8007580:	200005f4 	.word	0x200005f4
 8007584:	20000708 	.word	0x20000708

08007588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007592:	4b29      	ldr	r3, [pc, #164]	; (8007638 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd feb9 	bl	8005316 <uxListRemove>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	2201      	movs	r2, #1
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43da      	mvns	r2, r3
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	4a20      	ldr	r2, [pc, #128]	; (8007640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c8:	d10a      	bne.n	80075e0 <prvAddCurrentTaskToDelayedList+0x58>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d0:	4b1a      	ldr	r3, [pc, #104]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	481a      	ldr	r0, [pc, #104]	; (8007644 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075da:	f7fd fe3f 	bl	800525c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075de:	e026      	b.n	800762e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075e8:	4b14      	ldr	r3, [pc, #80]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d209      	bcs.n	800760c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f8:	4b13      	ldr	r3, [pc, #76]	; (8007648 <prvAddCurrentTaskToDelayedList+0xc0>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7fd fe4d 	bl	80052a4 <vListInsert>
}
 800760a:	e010      	b.n	800762e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760c:	4b0f      	ldr	r3, [pc, #60]	; (800764c <prvAddCurrentTaskToDelayedList+0xc4>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7fd fe43 	bl	80052a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	d202      	bcs.n	800762e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007628:	4a09      	ldr	r2, [pc, #36]	; (8007650 <prvAddCurrentTaskToDelayedList+0xc8>)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6013      	str	r3, [r2, #0]
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200006f8 	.word	0x200006f8
 800763c:	200005f4 	.word	0x200005f4
 8007640:	200006fc 	.word	0x200006fc
 8007644:	200006e0 	.word	0x200006e0
 8007648:	200006b0 	.word	0x200006b0
 800764c:	200006ac 	.word	0x200006ac
 8007650:	20000714 	.word	0x20000714

08007654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3b04      	subs	r3, #4
 8007664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800766c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3b04      	subs	r3, #4
 8007672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0201 	bic.w	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3b04      	subs	r3, #4
 8007682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007684:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <pxPortInitialiseStack+0x64>)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b14      	subs	r3, #20
 800768e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b04      	subs	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f06f 0202 	mvn.w	r2, #2
 80076a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3b20      	subs	r3, #32
 80076a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	080076bd 	.word	0x080076bd

080076bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076c6:	4b12      	ldr	r3, [pc, #72]	; (8007710 <prvTaskExitError+0x54>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ce:	d00a      	beq.n	80076e6 <prvTaskExitError+0x2a>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <prvTaskExitError+0x28>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60bb      	str	r3, [r7, #8]
}
 80076f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076fa:	bf00      	nop
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0fc      	beq.n	80076fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	2000000c 	.word	0x2000000c
	...

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	200005f4 	.word	0x200005f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007776:	4b46      	ldr	r3, [pc, #280]	; (8007890 <xPortStartScheduler+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a46      	ldr	r2, [pc, #280]	; (8007894 <xPortStartScheduler+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10a      	bne.n	8007796 <xPortStartScheduler+0x26>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007796:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a3f      	ldr	r2, [pc, #252]	; (8007898 <xPortStartScheduler+0x128>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x46>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	60fb      	str	r3, [r7, #12]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077b6:	4b39      	ldr	r3, [pc, #228]	; (800789c <xPortStartScheduler+0x12c>)
 80077b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b31      	ldr	r3, [pc, #196]	; (80078a0 <xPortStartScheduler+0x130>)
 80077dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e4:	e009      	b.n	80077fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077e6:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <xPortStartScheduler+0x134>)
 80077ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b80      	cmp	r3, #128	; 0x80
 8007804:	d0ef      	beq.n	80077e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00a      	beq.n	8007828 <xPortStartScheduler+0xb8>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <xPortStartScheduler+0x134>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <xPortStartScheduler+0x134>)
 8007830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <xPortStartScheduler+0x134>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800783a:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <xPortStartScheduler+0x134>)
 800783c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007846:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <xPortStartScheduler+0x138>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <xPortStartScheduler+0x138>)
 800784c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <xPortStartScheduler+0x138>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <xPortStartScheduler+0x138>)
 8007858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800785c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800785e:	f000 f8dd 	bl	8007a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <xPortStartScheduler+0x13c>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007868:	f000 f8fc 	bl	8007a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xPortStartScheduler+0x140>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0f      	ldr	r2, [pc, #60]	; (80078b0 <xPortStartScheduler+0x140>)
 8007872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007878:	f7ff ff66 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800787c:	f7ff f884 	bl	8006988 <vTaskSwitchContext>
	prvTaskExitError();
 8007880:	f7ff ff1c 	bl	80076bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	e000ed00 	.word	0xe000ed00
 8007894:	410fc271 	.word	0x410fc271
 8007898:	410fc270 	.word	0x410fc270
 800789c:	e000e400 	.word	0xe000e400
 80078a0:	20000720 	.word	0x20000720
 80078a4:	20000724 	.word	0x20000724
 80078a8:	e000ed20 	.word	0xe000ed20
 80078ac:	2000000c 	.word	0x2000000c
 80078b0:	e000ef34 	.word	0xe000ef34

080078b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <vPortEnterCritical+0x58>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <vPortEnterCritical+0x58>)
 80078d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <vPortEnterCritical+0x58>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10f      	bne.n	8007900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <vPortEnterCritical+0x5c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <vPortEnterCritical+0x4c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	603b      	str	r3, [r7, #0]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <vPortEnterCritical+0x4a>
	}
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	2000000c 	.word	0x2000000c
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <vPortExitCritical+0x50>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <vPortExitCritical+0x24>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	607b      	str	r3, [r7, #4]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007938:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <vPortExitCritical+0x50>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <vPortExitCritical+0x50>)
 8007940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <vPortExitCritical+0x42>
 800794a:	2300      	movs	r3, #0
 800794c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f383 8811 	msr	BASEPRI, r3
}
 8007954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	2000000c 	.word	0x2000000c
	...

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007994:	f380 8811 	msr	BASEPRI, r0
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f7fe fff2 	bl	8006988 <vTaskSwitchContext>
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f380 8811 	msr	BASEPRI, r0
 80079ac:	bc09      	pop	{r0, r3}
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	f01e 0f10 	tst.w	lr, #16
 80079ba:	bf08      	it	eq
 80079bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c0:	f380 8809 	msr	PSP, r0
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst>:
 80079d0:	200005f4 	.word	0x200005f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f2:	f7fe ff11 	bl	8006818 <xTaskIncrementTick>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <SysTick_Handler+0x40>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <vPortSetupTimerInterrupt+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <vPortSetupTimerInterrupt+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <vPortSetupTimerInterrupt+0x40>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <vPortSetupTimerInterrupt+0x44>)
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3e:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010
 8007a54:	e000e018 	.word	0xe000e018
 8007a58:	20000000 	.word	0x20000000
 8007a5c:	10624dd3 	.word	0x10624dd3
 8007a60:	e000e014 	.word	0xe000e014

08007a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a74 <vPortEnableVFP+0x10>
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a6e:	6001      	str	r1, [r0, #0]
 8007a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a72:	bf00      	nop
 8007a74:	e000ed88 	.word	0xe000ed88

08007a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a7e:	f3ef 8305 	mrs	r3, IPSR
 8007a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d914      	bls.n	8007ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <vPortValidateInterruptPriority+0x70>)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a94:	4b15      	ldr	r3, [pc, #84]	; (8007aec <vPortValidateInterruptPriority+0x74>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	7afa      	ldrb	r2, [r7, #11]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20a      	bcs.n	8007ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <vPortValidateInterruptPriority+0x78>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <vPortValidateInterruptPriority+0x7c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d90a      	bls.n	8007ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	603b      	str	r3, [r7, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <vPortValidateInterruptPriority+0x60>
	}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	e000e3f0 	.word	0xe000e3f0
 8007aec:	20000720 	.word	0x20000720
 8007af0:	e000ed0c 	.word	0xe000ed0c
 8007af4:	20000724 	.word	0x20000724

08007af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b04:	f7fe fdde 	bl	80066c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b08:	4b5b      	ldr	r3, [pc, #364]	; (8007c78 <pvPortMalloc+0x180>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b10:	f000 f920 	bl	8007d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b14:	4b59      	ldr	r3, [pc, #356]	; (8007c7c <pvPortMalloc+0x184>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8093 	bne.w	8007c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01d      	beq.n	8007b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b28:	2208      	movs	r2, #8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d014      	beq.n	8007b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f023 0307 	bic.w	r3, r3, #7
 8007b40:	3308      	adds	r3, #8
 8007b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <pvPortMalloc+0x6c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	617b      	str	r3, [r7, #20]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d06e      	beq.n	8007c48 <pvPortMalloc+0x150>
 8007b6a:	4b45      	ldr	r3, [pc, #276]	; (8007c80 <pvPortMalloc+0x188>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d869      	bhi.n	8007c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b74:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <pvPortMalloc+0x18c>)
 8007b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b78:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <pvPortMalloc+0x18c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b7e:	e004      	b.n	8007b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d903      	bls.n	8007b9c <pvPortMalloc+0xa4>
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f1      	bne.n	8007b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b9c:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <pvPortMalloc+0x180>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d050      	beq.n	8007c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2208      	movs	r2, #8
 8007bac:	4413      	add	r3, r2
 8007bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d91f      	bls.n	8007c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	613b      	str	r3, [r7, #16]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c02:	69b8      	ldr	r0, [r7, #24]
 8007c04:	f000 f908 	bl	8007e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c08:	4b1d      	ldr	r3, [pc, #116]	; (8007c80 <pvPortMalloc+0x188>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	4a1b      	ldr	r2, [pc, #108]	; (8007c80 <pvPortMalloc+0x188>)
 8007c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c16:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <pvPortMalloc+0x188>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <pvPortMalloc+0x190>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d203      	bcs.n	8007c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c22:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <pvPortMalloc+0x188>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <pvPortMalloc+0x190>)
 8007c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <pvPortMalloc+0x184>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <pvPortMalloc+0x194>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <pvPortMalloc+0x194>)
 8007c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c48:	f7fe fd4a 	bl	80066e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <pvPortMalloc+0x174>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60fb      	str	r3, [r7, #12]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <pvPortMalloc+0x172>
	return pvReturn;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3728      	adds	r7, #40	; 0x28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20010730 	.word	0x20010730
 8007c7c:	20010744 	.word	0x20010744
 8007c80:	20010734 	.word	0x20010734
 8007c84:	20010728 	.word	0x20010728
 8007c88:	20010738 	.word	0x20010738
 8007c8c:	2001073c 	.word	0x2001073c

08007c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d04d      	beq.n	8007d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <vPortFree+0xb8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <vPortFree+0x44>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60fb      	str	r3, [r7, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <vPortFree+0x62>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60bb      	str	r3, [r7, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <vPortFree+0xb8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01e      	beq.n	8007d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11a      	bne.n	8007d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <vPortFree+0xb8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d18:	f7fe fcd4 	bl	80066c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <vPortFree+0xbc>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4413      	add	r3, r2
 8007d26:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <vPortFree+0xbc>)
 8007d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d2a:	6938      	ldr	r0, [r7, #16]
 8007d2c:	f000 f874 	bl	8007e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <vPortFree+0xc0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	4a06      	ldr	r2, [pc, #24]	; (8007d50 <vPortFree+0xc0>)
 8007d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d3a:	f7fe fcd1 	bl	80066e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d3e:	bf00      	nop
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20010744 	.word	0x20010744
 8007d4c:	20010734 	.word	0x20010734
 8007d50:	20010740 	.word	0x20010740

08007d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d60:	4b27      	ldr	r3, [pc, #156]	; (8007e00 <prvHeapInit+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3307      	adds	r3, #7
 8007d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	4a1f      	ldr	r2, [pc, #124]	; (8007e00 <prvHeapInit+0xac>)
 8007d84:	4413      	add	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <prvHeapInit+0xb0>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d92:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <prvHeapInit+0xb0>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007da0:	2208      	movs	r2, #8
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0307 	bic.w	r3, r3, #7
 8007dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <prvHeapInit+0xb4>)
 8007db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <prvHeapInit+0xb4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <prvHeapInit+0xb4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <prvHeapInit+0xb4>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <prvHeapInit+0xb8>)
 8007de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <prvHeapInit+0xbc>)
 8007dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvHeapInit+0xc0>)
 8007dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000728 	.word	0x20000728
 8007e04:	20010728 	.word	0x20010728
 8007e08:	20010730 	.word	0x20010730
 8007e0c:	20010738 	.word	0x20010738
 8007e10:	20010734 	.word	0x20010734
 8007e14:	20010744 	.word	0x20010744

08007e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e20:	4b28      	ldr	r3, [pc, #160]	; (8007ec4 <prvInsertBlockIntoFreeList+0xac>)
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e002      	b.n	8007e2c <prvInsertBlockIntoFreeList+0x14>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d8f7      	bhi.n	8007e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d108      	bne.n	8007e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	441a      	add	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d118      	bne.n	8007ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d00d      	beq.n	8007e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	441a      	add	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e008      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e003      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d002      	beq.n	8007eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20010728 	.word	0x20010728
 8007ec8:	20010730 	.word	0x20010730

08007ecc <findslot>:
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <findslot+0x2c>)
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	b118      	cbz	r0, 8007ede <findslot+0x12>
 8007ed6:	6983      	ldr	r3, [r0, #24]
 8007ed8:	b90b      	cbnz	r3, 8007ede <findslot+0x12>
 8007eda:	f000 faf7 	bl	80084cc <__sinit>
 8007ede:	2c13      	cmp	r4, #19
 8007ee0:	d807      	bhi.n	8007ef2 <findslot+0x26>
 8007ee2:	4806      	ldr	r0, [pc, #24]	; (8007efc <findslot+0x30>)
 8007ee4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007ee8:	3201      	adds	r2, #1
 8007eea:	d002      	beq.n	8007ef2 <findslot+0x26>
 8007eec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e7fc      	b.n	8007ef0 <findslot+0x24>
 8007ef6:	bf00      	nop
 8007ef8:	20000018 	.word	0x20000018
 8007efc:	20010754 	.word	0x20010754

08007f00 <error>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	f000 fa84 	bl	8008410 <__errno>
 8007f08:	2613      	movs	r6, #19
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	2700      	movs	r7, #0
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	beab      	bkpt	0x00ab
 8007f14:	4606      	mov	r6, r0
 8007f16:	602e      	str	r6, [r5, #0]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f1c <checkerror>:
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d101      	bne.n	8007f24 <checkerror+0x8>
 8007f20:	f7ff bfee 	b.w	8007f00 <error>
 8007f24:	4770      	bx	lr

08007f26 <_swiread>:
 8007f26:	b530      	push	{r4, r5, lr}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007f2e:	9203      	str	r2, [sp, #12]
 8007f30:	2406      	movs	r4, #6
 8007f32:	ad01      	add	r5, sp, #4
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	beab      	bkpt	0x00ab
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff ffed 	bl	8007f1c <checkerror>
 8007f42:	b005      	add	sp, #20
 8007f44:	bd30      	pop	{r4, r5, pc}

08007f46 <_read>:
 8007f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f48:	4615      	mov	r5, r2
 8007f4a:	9101      	str	r1, [sp, #4]
 8007f4c:	f7ff ffbe 	bl	8007ecc <findslot>
 8007f50:	9901      	ldr	r1, [sp, #4]
 8007f52:	4604      	mov	r4, r0
 8007f54:	b938      	cbnz	r0, 8007f66 <_read+0x20>
 8007f56:	f000 fa5b 	bl	8008410 <__errno>
 8007f5a:	2309      	movs	r3, #9
 8007f5c:	6003      	str	r3, [r0, #0]
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f62:	b003      	add	sp, #12
 8007f64:	bd30      	pop	{r4, r5, pc}
 8007f66:	6800      	ldr	r0, [r0, #0]
 8007f68:	462a      	mov	r2, r5
 8007f6a:	f7ff ffdc 	bl	8007f26 <_swiread>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d0f7      	beq.n	8007f62 <_read+0x1c>
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	1a2a      	subs	r2, r5, r0
 8007f76:	4413      	add	r3, r2
 8007f78:	6063      	str	r3, [r4, #4]
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	e7f1      	b.n	8007f62 <_read+0x1c>

08007f7e <_swilseek>:
 8007f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	4616      	mov	r6, r2
 8007f84:	f7ff ffa2 	bl	8007ecc <findslot>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	b940      	cbnz	r0, 8007f9e <_swilseek+0x20>
 8007f8c:	f000 fa40 	bl	8008410 <__errno>
 8007f90:	2309      	movs	r3, #9
 8007f92:	6003      	str	r3, [r0, #0]
 8007f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f98:	4620      	mov	r0, r4
 8007f9a:	b003      	add	sp, #12
 8007f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9e:	2e02      	cmp	r6, #2
 8007fa0:	d903      	bls.n	8007faa <_swilseek+0x2c>
 8007fa2:	f000 fa35 	bl	8008410 <__errno>
 8007fa6:	2316      	movs	r3, #22
 8007fa8:	e7f3      	b.n	8007f92 <_swilseek+0x14>
 8007faa:	2e01      	cmp	r6, #1
 8007fac:	d112      	bne.n	8007fd4 <_swilseek+0x56>
 8007fae:	6843      	ldr	r3, [r0, #4]
 8007fb0:	18e4      	adds	r4, r4, r3
 8007fb2:	d4f6      	bmi.n	8007fa2 <_swilseek+0x24>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	260a      	movs	r6, #10
 8007fb8:	e9cd 3400 	strd	r3, r4, [sp]
 8007fbc:	466f      	mov	r7, sp
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	beab      	bkpt	0x00ab
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ffa8 	bl	8007f1c <checkerror>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	dbe1      	blt.n	8007f94 <_swilseek+0x16>
 8007fd0:	606c      	str	r4, [r5, #4]
 8007fd2:	e7e1      	b.n	8007f98 <_swilseek+0x1a>
 8007fd4:	2e02      	cmp	r6, #2
 8007fd6:	d1ed      	bne.n	8007fb4 <_swilseek+0x36>
 8007fd8:	6803      	ldr	r3, [r0, #0]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	260c      	movs	r6, #12
 8007fde:	466f      	mov	r7, sp
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	beab      	bkpt	0x00ab
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ff97 	bl	8007f1c <checkerror>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d0d0      	beq.n	8007f94 <_swilseek+0x16>
 8007ff2:	4404      	add	r4, r0
 8007ff4:	e7de      	b.n	8007fb4 <_swilseek+0x36>

08007ff6 <_lseek>:
 8007ff6:	f7ff bfc2 	b.w	8007f7e <_swilseek>

08007ffa <_swiwrite>:
 8007ffa:	b530      	push	{r4, r5, lr}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008002:	9203      	str	r2, [sp, #12]
 8008004:	2405      	movs	r4, #5
 8008006:	ad01      	add	r5, sp, #4
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	beab      	bkpt	0x00ab
 800800e:	4604      	mov	r4, r0
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff ff83 	bl	8007f1c <checkerror>
 8008016:	b005      	add	sp, #20
 8008018:	bd30      	pop	{r4, r5, pc}

0800801a <_write>:
 800801a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800801c:	4615      	mov	r5, r2
 800801e:	9101      	str	r1, [sp, #4]
 8008020:	f7ff ff54 	bl	8007ecc <findslot>
 8008024:	9901      	ldr	r1, [sp, #4]
 8008026:	4604      	mov	r4, r0
 8008028:	b930      	cbnz	r0, 8008038 <_write+0x1e>
 800802a:	f000 f9f1 	bl	8008410 <__errno>
 800802e:	2309      	movs	r3, #9
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008036:	e012      	b.n	800805e <_write+0x44>
 8008038:	6800      	ldr	r0, [r0, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	f7ff ffdd 	bl	8007ffa <_swiwrite>
 8008040:	2800      	cmp	r0, #0
 8008042:	dbf6      	blt.n	8008032 <_write+0x18>
 8008044:	6862      	ldr	r2, [r4, #4]
 8008046:	1a2b      	subs	r3, r5, r0
 8008048:	441a      	add	r2, r3
 800804a:	42a8      	cmp	r0, r5
 800804c:	6062      	str	r2, [r4, #4]
 800804e:	d105      	bne.n	800805c <_write+0x42>
 8008050:	2000      	movs	r0, #0
 8008052:	b003      	add	sp, #12
 8008054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008058:	f7ff bf52 	b.w	8007f00 <error>
 800805c:	4618      	mov	r0, r3
 800805e:	b003      	add	sp, #12
 8008060:	bd30      	pop	{r4, r5, pc}

08008062 <_swiclose>:
 8008062:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008064:	2402      	movs	r4, #2
 8008066:	9001      	str	r0, [sp, #4]
 8008068:	ad01      	add	r5, sp, #4
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	beab      	bkpt	0x00ab
 8008070:	4604      	mov	r4, r0
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff ff52 	bl	8007f1c <checkerror>
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}

0800807c <_close>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4605      	mov	r5, r0
 8008080:	f7ff ff24 	bl	8007ecc <findslot>
 8008084:	4604      	mov	r4, r0
 8008086:	b930      	cbnz	r0, 8008096 <_close+0x1a>
 8008088:	f000 f9c2 	bl	8008410 <__errno>
 800808c:	2309      	movs	r3, #9
 800808e:	6003      	str	r3, [r0, #0]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	3d01      	subs	r5, #1
 8008098:	2d01      	cmp	r5, #1
 800809a:	d809      	bhi.n	80080b0 <_close+0x34>
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <_close+0x48>)
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d104      	bne.n	80080b0 <_close+0x34>
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080aa:	6003      	str	r3, [r0, #0]
 80080ac:	2000      	movs	r0, #0
 80080ae:	e7f1      	b.n	8008094 <_close+0x18>
 80080b0:	6820      	ldr	r0, [r4, #0]
 80080b2:	f7ff ffd6 	bl	8008062 <_swiclose>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d1ec      	bne.n	8008094 <_close+0x18>
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	e7e8      	b.n	8008094 <_close+0x18>
 80080c2:	bf00      	nop
 80080c4:	20010754 	.word	0x20010754

080080c8 <_swistat>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	f7ff fefe 	bl	8007ecc <findslot>
 80080d0:	4605      	mov	r5, r0
 80080d2:	b930      	cbnz	r0, 80080e2 <_swistat+0x1a>
 80080d4:	f000 f99c 	bl	8008410 <__errno>
 80080d8:	2309      	movs	r3, #9
 80080da:	6003      	str	r3, [r0, #0]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	6863      	ldr	r3, [r4, #4]
 80080e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80080f0:	260c      	movs	r6, #12
 80080f2:	4630      	mov	r0, r6
 80080f4:	4629      	mov	r1, r5
 80080f6:	beab      	bkpt	0x00ab
 80080f8:	4605      	mov	r5, r0
 80080fa:	4628      	mov	r0, r5
 80080fc:	f7ff ff0e 	bl	8007f1c <checkerror>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	bf1c      	itt	ne
 8008104:	6120      	strne	r0, [r4, #16]
 8008106:	2000      	movne	r0, #0
 8008108:	e7ea      	b.n	80080e0 <_swistat+0x18>

0800810a <_fstat>:
 800810a:	460b      	mov	r3, r1
 800810c:	b510      	push	{r4, lr}
 800810e:	2100      	movs	r1, #0
 8008110:	4604      	mov	r4, r0
 8008112:	2258      	movs	r2, #88	; 0x58
 8008114:	4618      	mov	r0, r3
 8008116:	f000 faac 	bl	8008672 <memset>
 800811a:	4601      	mov	r1, r0
 800811c:	4620      	mov	r0, r4
 800811e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008122:	f7ff bfd1 	b.w	80080c8 <_swistat>

08008126 <_stat>:
 8008126:	b538      	push	{r3, r4, r5, lr}
 8008128:	460d      	mov	r5, r1
 800812a:	4604      	mov	r4, r0
 800812c:	2258      	movs	r2, #88	; 0x58
 800812e:	2100      	movs	r1, #0
 8008130:	4628      	mov	r0, r5
 8008132:	f000 fa9e 	bl	8008672 <memset>
 8008136:	4620      	mov	r0, r4
 8008138:	2100      	movs	r1, #0
 800813a:	f000 f811 	bl	8008160 <_swiopen>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	4604      	mov	r4, r0
 8008142:	d00b      	beq.n	800815c <_stat+0x36>
 8008144:	686b      	ldr	r3, [r5, #4]
 8008146:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800814a:	606b      	str	r3, [r5, #4]
 800814c:	4629      	mov	r1, r5
 800814e:	f7ff ffbb 	bl	80080c8 <_swistat>
 8008152:	4605      	mov	r5, r0
 8008154:	4620      	mov	r0, r4
 8008156:	f7ff ff91 	bl	800807c <_close>
 800815a:	462c      	mov	r4, r5
 800815c:	4620      	mov	r0, r4
 800815e:	bd38      	pop	{r3, r4, r5, pc}

08008160 <_swiopen>:
 8008160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008164:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008210 <_swiopen+0xb0>
 8008168:	b097      	sub	sp, #92	; 0x5c
 800816a:	4607      	mov	r7, r0
 800816c:	460e      	mov	r6, r1
 800816e:	2500      	movs	r5, #0
 8008170:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8008174:	1c61      	adds	r1, r4, #1
 8008176:	d037      	beq.n	80081e8 <_swiopen+0x88>
 8008178:	3501      	adds	r5, #1
 800817a:	2d14      	cmp	r5, #20
 800817c:	d1f8      	bne.n	8008170 <_swiopen+0x10>
 800817e:	f000 f947 	bl	8008410 <__errno>
 8008182:	2318      	movs	r3, #24
 8008184:	6003      	str	r3, [r0, #0]
 8008186:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800818a:	e03d      	b.n	8008208 <_swiopen+0xa8>
 800818c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8008190:	f240 6301 	movw	r3, #1537	; 0x601
 8008194:	07b2      	lsls	r2, r6, #30
 8008196:	bf48      	it	mi
 8008198:	f044 0402 	orrmi.w	r4, r4, #2
 800819c:	421e      	tst	r6, r3
 800819e:	bf18      	it	ne
 80081a0:	f044 0404 	orrne.w	r4, r4, #4
 80081a4:	0733      	lsls	r3, r6, #28
 80081a6:	bf48      	it	mi
 80081a8:	f024 0404 	bicmi.w	r4, r4, #4
 80081ac:	4638      	mov	r0, r7
 80081ae:	bf48      	it	mi
 80081b0:	f044 0408 	orrmi.w	r4, r4, #8
 80081b4:	9700      	str	r7, [sp, #0]
 80081b6:	f7f8 f813 	bl	80001e0 <strlen>
 80081ba:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80081be:	2401      	movs	r4, #1
 80081c0:	4620      	mov	r0, r4
 80081c2:	4649      	mov	r1, r9
 80081c4:	beab      	bkpt	0x00ab
 80081c6:	4604      	mov	r4, r0
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	db08      	blt.n	80081de <_swiopen+0x7e>
 80081cc:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80081d0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80081da:	462c      	mov	r4, r5
 80081dc:	e014      	b.n	8008208 <_swiopen+0xa8>
 80081de:	4620      	mov	r0, r4
 80081e0:	f7ff fe8e 	bl	8007f00 <error>
 80081e4:	4604      	mov	r4, r0
 80081e6:	e00f      	b.n	8008208 <_swiopen+0xa8>
 80081e8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80081ec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80081f0:	46e9      	mov	r9, sp
 80081f2:	d1cb      	bne.n	800818c <_swiopen+0x2c>
 80081f4:	4649      	mov	r1, r9
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7ff ff95 	bl	8008126 <_stat>
 80081fc:	3001      	adds	r0, #1
 80081fe:	d0c5      	beq.n	800818c <_swiopen+0x2c>
 8008200:	f000 f906 	bl	8008410 <__errno>
 8008204:	2311      	movs	r3, #17
 8008206:	6003      	str	r3, [r0, #0]
 8008208:	4620      	mov	r0, r4
 800820a:	b017      	add	sp, #92	; 0x5c
 800820c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008210:	20010754 	.word	0x20010754

08008214 <_get_semihosting_exts>:
 8008214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008218:	4606      	mov	r6, r0
 800821a:	460f      	mov	r7, r1
 800821c:	482a      	ldr	r0, [pc, #168]	; (80082c8 <_get_semihosting_exts+0xb4>)
 800821e:	2100      	movs	r1, #0
 8008220:	4615      	mov	r5, r2
 8008222:	f7ff ff9d 	bl	8008160 <_swiopen>
 8008226:	462a      	mov	r2, r5
 8008228:	4604      	mov	r4, r0
 800822a:	2100      	movs	r1, #0
 800822c:	4630      	mov	r0, r6
 800822e:	f000 fa20 	bl	8008672 <memset>
 8008232:	1c63      	adds	r3, r4, #1
 8008234:	d016      	beq.n	8008264 <_get_semihosting_exts+0x50>
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fe48 	bl	8007ecc <findslot>
 800823c:	f04f 090c 	mov.w	r9, #12
 8008240:	4680      	mov	r8, r0
 8008242:	4648      	mov	r0, r9
 8008244:	4641      	mov	r1, r8
 8008246:	beab      	bkpt	0x00ab
 8008248:	4680      	mov	r8, r0
 800824a:	4640      	mov	r0, r8
 800824c:	f7ff fe66 	bl	8007f1c <checkerror>
 8008250:	2803      	cmp	r0, #3
 8008252:	dd02      	ble.n	800825a <_get_semihosting_exts+0x46>
 8008254:	1ec3      	subs	r3, r0, #3
 8008256:	42ab      	cmp	r3, r5
 8008258:	dc08      	bgt.n	800826c <_get_semihosting_exts+0x58>
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ff0e 	bl	800807c <_close>
 8008260:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008264:	4620      	mov	r0, r4
 8008266:	b003      	add	sp, #12
 8008268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800826c:	2204      	movs	r2, #4
 800826e:	eb0d 0102 	add.w	r1, sp, r2
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff fe67 	bl	8007f46 <_read>
 8008278:	2803      	cmp	r0, #3
 800827a:	ddee      	ble.n	800825a <_get_semihosting_exts+0x46>
 800827c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008280:	2b53      	cmp	r3, #83	; 0x53
 8008282:	d1ea      	bne.n	800825a <_get_semihosting_exts+0x46>
 8008284:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008288:	2b48      	cmp	r3, #72	; 0x48
 800828a:	d1e6      	bne.n	800825a <_get_semihosting_exts+0x46>
 800828c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008290:	2b46      	cmp	r3, #70	; 0x46
 8008292:	d1e2      	bne.n	800825a <_get_semihosting_exts+0x46>
 8008294:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008298:	2b42      	cmp	r3, #66	; 0x42
 800829a:	d1de      	bne.n	800825a <_get_semihosting_exts+0x46>
 800829c:	2201      	movs	r2, #1
 800829e:	4639      	mov	r1, r7
 80082a0:	4620      	mov	r0, r4
 80082a2:	f7ff fe6c 	bl	8007f7e <_swilseek>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dbd7      	blt.n	800825a <_get_semihosting_exts+0x46>
 80082aa:	462a      	mov	r2, r5
 80082ac:	4631      	mov	r1, r6
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7ff fe49 	bl	8007f46 <_read>
 80082b4:	4605      	mov	r5, r0
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff fee0 	bl	800807c <_close>
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fe2d 	bl	8007f1c <checkerror>
 80082c2:	4604      	mov	r4, r0
 80082c4:	e7ce      	b.n	8008264 <_get_semihosting_exts+0x50>
 80082c6:	bf00      	nop
 80082c8:	0800968c 	.word	0x0800968c

080082cc <initialise_semihosting_exts>:
 80082cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ce:	4d0a      	ldr	r5, [pc, #40]	; (80082f8 <initialise_semihosting_exts+0x2c>)
 80082d0:	4c0a      	ldr	r4, [pc, #40]	; (80082fc <initialise_semihosting_exts+0x30>)
 80082d2:	2100      	movs	r1, #0
 80082d4:	2201      	movs	r2, #1
 80082d6:	a801      	add	r0, sp, #4
 80082d8:	6029      	str	r1, [r5, #0]
 80082da:	6022      	str	r2, [r4, #0]
 80082dc:	f7ff ff9a 	bl	8008214 <_get_semihosting_exts>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dd07      	ble.n	80082f4 <initialise_semihosting_exts+0x28>
 80082e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082e8:	f003 0201 	and.w	r2, r3, #1
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	602a      	str	r2, [r5, #0]
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	b003      	add	sp, #12
 80082f6:	bd30      	pop	{r4, r5, pc}
 80082f8:	20000010 	.word	0x20000010
 80082fc:	20000014 	.word	0x20000014

08008300 <_has_ext_stdout_stderr>:
 8008300:	b510      	push	{r4, lr}
 8008302:	4c04      	ldr	r4, [pc, #16]	; (8008314 <_has_ext_stdout_stderr+0x14>)
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da01      	bge.n	800830e <_has_ext_stdout_stderr+0xe>
 800830a:	f7ff ffdf 	bl	80082cc <initialise_semihosting_exts>
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	20000014 	.word	0x20000014

08008318 <initialise_monitor_handles>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	b085      	sub	sp, #20
 800831e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80083d0 <initialise_monitor_handles+0xb8>
 8008322:	f8cd 9004 	str.w	r9, [sp, #4]
 8008326:	2303      	movs	r3, #3
 8008328:	2400      	movs	r4, #0
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	af01      	add	r7, sp, #4
 800832e:	9402      	str	r4, [sp, #8]
 8008330:	2501      	movs	r5, #1
 8008332:	4628      	mov	r0, r5
 8008334:	4639      	mov	r1, r7
 8008336:	beab      	bkpt	0x00ab
 8008338:	4605      	mov	r5, r0
 800833a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80083d4 <initialise_monitor_handles+0xbc>
 800833e:	4623      	mov	r3, r4
 8008340:	4c20      	ldr	r4, [pc, #128]	; (80083c4 <initialise_monitor_handles+0xac>)
 8008342:	f8c8 5000 	str.w	r5, [r8]
 8008346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800834e:	3301      	adds	r3, #1
 8008350:	2b14      	cmp	r3, #20
 8008352:	d1fa      	bne.n	800834a <initialise_monitor_handles+0x32>
 8008354:	f7ff ffd4 	bl	8008300 <_has_ext_stdout_stderr>
 8008358:	4d1b      	ldr	r5, [pc, #108]	; (80083c8 <initialise_monitor_handles+0xb0>)
 800835a:	b1d0      	cbz	r0, 8008392 <initialise_monitor_handles+0x7a>
 800835c:	f04f 0a03 	mov.w	sl, #3
 8008360:	2304      	movs	r3, #4
 8008362:	f8cd 9004 	str.w	r9, [sp, #4]
 8008366:	2601      	movs	r6, #1
 8008368:	f8cd a00c 	str.w	sl, [sp, #12]
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	beab      	bkpt	0x00ab
 8008374:	4683      	mov	fp, r0
 8008376:	4b15      	ldr	r3, [pc, #84]	; (80083cc <initialise_monitor_handles+0xb4>)
 8008378:	f8cd 9004 	str.w	r9, [sp, #4]
 800837c:	f8c3 b000 	str.w	fp, [r3]
 8008380:	2308      	movs	r3, #8
 8008382:	f8cd a00c 	str.w	sl, [sp, #12]
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	beab      	bkpt	0x00ab
 800838e:	4606      	mov	r6, r0
 8008390:	602e      	str	r6, [r5, #0]
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	bf02      	ittt	eq
 8008398:	4b0c      	ldreq	r3, [pc, #48]	; (80083cc <initialise_monitor_handles+0xb4>)
 800839a:	681b      	ldreq	r3, [r3, #0]
 800839c:	602b      	streq	r3, [r5, #0]
 800839e:	2600      	movs	r6, #0
 80083a0:	f8d8 3000 	ldr.w	r3, [r8]
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	6066      	str	r6, [r4, #4]
 80083a8:	f7ff ffaa 	bl	8008300 <_has_ext_stdout_stderr>
 80083ac:	b130      	cbz	r0, 80083bc <initialise_monitor_handles+0xa4>
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <initialise_monitor_handles+0xb4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80083bc:	b005      	add	sp, #20
 80083be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c2:	bf00      	nop
 80083c4:	20010754 	.word	0x20010754
 80083c8:	20010748 	.word	0x20010748
 80083cc:	20010750 	.word	0x20010750
 80083d0:	080096a2 	.word	0x080096a2
 80083d4:	2001074c 	.word	0x2001074c

080083d8 <_isatty>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	f7ff fd77 	bl	8007ecc <findslot>
 80083de:	2509      	movs	r5, #9
 80083e0:	4604      	mov	r4, r0
 80083e2:	b920      	cbnz	r0, 80083ee <_isatty+0x16>
 80083e4:	f000 f814 	bl	8008410 <__errno>
 80083e8:	6005      	str	r5, [r0, #0]
 80083ea:	4620      	mov	r0, r4
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	4628      	mov	r0, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	beab      	bkpt	0x00ab
 80083f4:	4604      	mov	r4, r0
 80083f6:	2c01      	cmp	r4, #1
 80083f8:	d0f7      	beq.n	80083ea <_isatty+0x12>
 80083fa:	f000 f809 	bl	8008410 <__errno>
 80083fe:	2400      	movs	r4, #0
 8008400:	4605      	mov	r5, r0
 8008402:	2613      	movs	r6, #19
 8008404:	4630      	mov	r0, r6
 8008406:	4621      	mov	r1, r4
 8008408:	beab      	bkpt	0x00ab
 800840a:	4606      	mov	r6, r0
 800840c:	602e      	str	r6, [r5, #0]
 800840e:	e7ec      	b.n	80083ea <_isatty+0x12>

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	; (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000018 	.word	0x20000018

0800841c <std>:
 800841c:	2300      	movs	r3, #0
 800841e:	b510      	push	{r4, lr}
 8008420:	4604      	mov	r4, r0
 8008422:	e9c0 3300 	strd	r3, r3, [r0]
 8008426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800842a:	6083      	str	r3, [r0, #8]
 800842c:	8181      	strh	r1, [r0, #12]
 800842e:	6643      	str	r3, [r0, #100]	; 0x64
 8008430:	81c2      	strh	r2, [r0, #14]
 8008432:	6183      	str	r3, [r0, #24]
 8008434:	4619      	mov	r1, r3
 8008436:	2208      	movs	r2, #8
 8008438:	305c      	adds	r0, #92	; 0x5c
 800843a:	f000 f91a 	bl	8008672 <memset>
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <std+0x38>)
 8008440:	6263      	str	r3, [r4, #36]	; 0x24
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <std+0x3c>)
 8008444:	62a3      	str	r3, [r4, #40]	; 0x28
 8008446:	4b05      	ldr	r3, [pc, #20]	; (800845c <std+0x40>)
 8008448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <std+0x44>)
 800844c:	6224      	str	r4, [r4, #32]
 800844e:	6323      	str	r3, [r4, #48]	; 0x30
 8008450:	bd10      	pop	{r4, pc}
 8008452:	bf00      	nop
 8008454:	080088d1 	.word	0x080088d1
 8008458:	080088f3 	.word	0x080088f3
 800845c:	0800892b 	.word	0x0800892b
 8008460:	0800894f 	.word	0x0800894f

08008464 <_cleanup_r>:
 8008464:	4901      	ldr	r1, [pc, #4]	; (800846c <_cleanup_r+0x8>)
 8008466:	f000 b8af 	b.w	80085c8 <_fwalk_reent>
 800846a:	bf00      	nop
 800846c:	08008aa9 	.word	0x08008aa9

08008470 <__sfmoreglue>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	2268      	movs	r2, #104	; 0x68
 8008474:	1e4d      	subs	r5, r1, #1
 8008476:	4355      	muls	r5, r2
 8008478:	460e      	mov	r6, r1
 800847a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800847e:	f000 f921 	bl	80086c4 <_malloc_r>
 8008482:	4604      	mov	r4, r0
 8008484:	b140      	cbz	r0, 8008498 <__sfmoreglue+0x28>
 8008486:	2100      	movs	r1, #0
 8008488:	e9c0 1600 	strd	r1, r6, [r0]
 800848c:	300c      	adds	r0, #12
 800848e:	60a0      	str	r0, [r4, #8]
 8008490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008494:	f000 f8ed 	bl	8008672 <memset>
 8008498:	4620      	mov	r0, r4
 800849a:	bd70      	pop	{r4, r5, r6, pc}

0800849c <__sfp_lock_acquire>:
 800849c:	4801      	ldr	r0, [pc, #4]	; (80084a4 <__sfp_lock_acquire+0x8>)
 800849e:	f000 b8d8 	b.w	8008652 <__retarget_lock_acquire_recursive>
 80084a2:	bf00      	nop
 80084a4:	200107f5 	.word	0x200107f5

080084a8 <__sfp_lock_release>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__sfp_lock_release+0x8>)
 80084aa:	f000 b8d3 	b.w	8008654 <__retarget_lock_release_recursive>
 80084ae:	bf00      	nop
 80084b0:	200107f5 	.word	0x200107f5

080084b4 <__sinit_lock_acquire>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__sinit_lock_acquire+0x8>)
 80084b6:	f000 b8cc 	b.w	8008652 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	200107f6 	.word	0x200107f6

080084c0 <__sinit_lock_release>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sinit_lock_release+0x8>)
 80084c2:	f000 b8c7 	b.w	8008654 <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	200107f6 	.word	0x200107f6

080084cc <__sinit>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	f7ff fff0 	bl	80084b4 <__sinit_lock_acquire>
 80084d4:	69a3      	ldr	r3, [r4, #24]
 80084d6:	b11b      	cbz	r3, 80084e0 <__sinit+0x14>
 80084d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084dc:	f7ff bff0 	b.w	80084c0 <__sinit_lock_release>
 80084e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084e4:	6523      	str	r3, [r4, #80]	; 0x50
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <__sinit+0x68>)
 80084e8:	4a13      	ldr	r2, [pc, #76]	; (8008538 <__sinit+0x6c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	bf04      	itt	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	61a3      	streq	r3, [r4, #24]
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 f820 	bl	800853c <__sfp>
 80084fc:	6060      	str	r0, [r4, #4]
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f81c 	bl	800853c <__sfp>
 8008504:	60a0      	str	r0, [r4, #8]
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f818 	bl	800853c <__sfp>
 800850c:	2200      	movs	r2, #0
 800850e:	60e0      	str	r0, [r4, #12]
 8008510:	2104      	movs	r1, #4
 8008512:	6860      	ldr	r0, [r4, #4]
 8008514:	f7ff ff82 	bl	800841c <std>
 8008518:	68a0      	ldr	r0, [r4, #8]
 800851a:	2201      	movs	r2, #1
 800851c:	2109      	movs	r1, #9
 800851e:	f7ff ff7d 	bl	800841c <std>
 8008522:	68e0      	ldr	r0, [r4, #12]
 8008524:	2202      	movs	r2, #2
 8008526:	2112      	movs	r1, #18
 8008528:	f7ff ff78 	bl	800841c <std>
 800852c:	2301      	movs	r3, #1
 800852e:	61a3      	str	r3, [r4, #24]
 8008530:	e7d2      	b.n	80084d8 <__sinit+0xc>
 8008532:	bf00      	nop
 8008534:	08009708 	.word	0x08009708
 8008538:	08008465 	.word	0x08008465

0800853c <__sfp>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	4607      	mov	r7, r0
 8008540:	f7ff ffac 	bl	800849c <__sfp_lock_acquire>
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <__sfp+0x84>)
 8008546:	681e      	ldr	r6, [r3, #0]
 8008548:	69b3      	ldr	r3, [r6, #24]
 800854a:	b913      	cbnz	r3, 8008552 <__sfp+0x16>
 800854c:	4630      	mov	r0, r6
 800854e:	f7ff ffbd 	bl	80084cc <__sinit>
 8008552:	3648      	adds	r6, #72	; 0x48
 8008554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008558:	3b01      	subs	r3, #1
 800855a:	d503      	bpl.n	8008564 <__sfp+0x28>
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	b30b      	cbz	r3, 80085a4 <__sfp+0x68>
 8008560:	6836      	ldr	r6, [r6, #0]
 8008562:	e7f7      	b.n	8008554 <__sfp+0x18>
 8008564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008568:	b9d5      	cbnz	r5, 80085a0 <__sfp+0x64>
 800856a:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <__sfp+0x88>)
 800856c:	60e3      	str	r3, [r4, #12]
 800856e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008572:	6665      	str	r5, [r4, #100]	; 0x64
 8008574:	f000 f86c 	bl	8008650 <__retarget_lock_init_recursive>
 8008578:	f7ff ff96 	bl	80084a8 <__sfp_lock_release>
 800857c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008584:	6025      	str	r5, [r4, #0]
 8008586:	61a5      	str	r5, [r4, #24]
 8008588:	2208      	movs	r2, #8
 800858a:	4629      	mov	r1, r5
 800858c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008590:	f000 f86f 	bl	8008672 <memset>
 8008594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800859c:	4620      	mov	r0, r4
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a0:	3468      	adds	r4, #104	; 0x68
 80085a2:	e7d9      	b.n	8008558 <__sfp+0x1c>
 80085a4:	2104      	movs	r1, #4
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7ff ff62 	bl	8008470 <__sfmoreglue>
 80085ac:	4604      	mov	r4, r0
 80085ae:	6030      	str	r0, [r6, #0]
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d1d5      	bne.n	8008560 <__sfp+0x24>
 80085b4:	f7ff ff78 	bl	80084a8 <__sfp_lock_release>
 80085b8:	230c      	movs	r3, #12
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	e7ee      	b.n	800859c <__sfp+0x60>
 80085be:	bf00      	nop
 80085c0:	08009708 	.word	0x08009708
 80085c4:	ffff0001 	.word	0xffff0001

080085c8 <_fwalk_reent>:
 80085c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085cc:	4606      	mov	r6, r0
 80085ce:	4688      	mov	r8, r1
 80085d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085d4:	2700      	movs	r7, #0
 80085d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085da:	f1b9 0901 	subs.w	r9, r9, #1
 80085de:	d505      	bpl.n	80085ec <_fwalk_reent+0x24>
 80085e0:	6824      	ldr	r4, [r4, #0]
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	d1f7      	bne.n	80085d6 <_fwalk_reent+0xe>
 80085e6:	4638      	mov	r0, r7
 80085e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ec:	89ab      	ldrh	r3, [r5, #12]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d907      	bls.n	8008602 <_fwalk_reent+0x3a>
 80085f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085f6:	3301      	adds	r3, #1
 80085f8:	d003      	beq.n	8008602 <_fwalk_reent+0x3a>
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	47c0      	blx	r8
 8008600:	4307      	orrs	r7, r0
 8008602:	3568      	adds	r5, #104	; 0x68
 8008604:	e7e9      	b.n	80085da <_fwalk_reent+0x12>
	...

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4d0d      	ldr	r5, [pc, #52]	; (8008640 <__libc_init_array+0x38>)
 800860c:	4c0d      	ldr	r4, [pc, #52]	; (8008644 <__libc_init_array+0x3c>)
 800860e:	1b64      	subs	r4, r4, r5
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	2600      	movs	r6, #0
 8008614:	42a6      	cmp	r6, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	4d0b      	ldr	r5, [pc, #44]	; (8008648 <__libc_init_array+0x40>)
 800861a:	4c0c      	ldr	r4, [pc, #48]	; (800864c <__libc_init_array+0x44>)
 800861c:	f000 ff32 	bl	8009484 <_init>
 8008620:	1b64      	subs	r4, r4, r5
 8008622:	10a4      	asrs	r4, r4, #2
 8008624:	2600      	movs	r6, #0
 8008626:	42a6      	cmp	r6, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008630:	4798      	blx	r3
 8008632:	3601      	adds	r6, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	f855 3b04 	ldr.w	r3, [r5], #4
 800863a:	4798      	blx	r3
 800863c:	3601      	adds	r6, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	08009748 	.word	0x08009748
 8008644:	08009748 	.word	0x08009748
 8008648:	08009748 	.word	0x08009748
 800864c:	0800974c 	.word	0x0800974c

08008650 <__retarget_lock_init_recursive>:
 8008650:	4770      	bx	lr

08008652 <__retarget_lock_acquire_recursive>:
 8008652:	4770      	bx	lr

08008654 <__retarget_lock_release_recursive>:
 8008654:	4770      	bx	lr

08008656 <memcpy>:
 8008656:	440a      	add	r2, r1
 8008658:	4291      	cmp	r1, r2
 800865a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800865e:	d100      	bne.n	8008662 <memcpy+0xc>
 8008660:	4770      	bx	lr
 8008662:	b510      	push	{r4, lr}
 8008664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866c:	4291      	cmp	r1, r2
 800866e:	d1f9      	bne.n	8008664 <memcpy+0xe>
 8008670:	bd10      	pop	{r4, pc}

08008672 <memset>:
 8008672:	4402      	add	r2, r0
 8008674:	4603      	mov	r3, r0
 8008676:	4293      	cmp	r3, r2
 8008678:	d100      	bne.n	800867c <memset+0xa>
 800867a:	4770      	bx	lr
 800867c:	f803 1b01 	strb.w	r1, [r3], #1
 8008680:	e7f9      	b.n	8008676 <memset+0x4>
	...

08008684 <sbrk_aligned>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4e0e      	ldr	r6, [pc, #56]	; (80086c0 <sbrk_aligned+0x3c>)
 8008688:	460c      	mov	r4, r1
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	b911      	cbnz	r1, 8008696 <sbrk_aligned+0x12>
 8008690:	f000 f90e 	bl	80088b0 <_sbrk_r>
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f909 	bl	80088b0 <_sbrk_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d00a      	beq.n	80086b8 <sbrk_aligned+0x34>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d007      	beq.n	80086bc <sbrk_aligned+0x38>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f8fe 	bl	80088b0 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d101      	bne.n	80086bc <sbrk_aligned+0x38>
 80086b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086bc:	4620      	mov	r0, r4
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	200107fc 	.word	0x200107fc

080086c4 <_malloc_r>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	4607      	mov	r7, r0
 80086da:	db01      	blt.n	80086e0 <_malloc_r+0x1c>
 80086dc:	42a9      	cmp	r1, r5
 80086de:	d905      	bls.n	80086ec <_malloc_r+0x28>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	2600      	movs	r6, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ec:	4e2e      	ldr	r6, [pc, #184]	; (80087a8 <_malloc_r+0xe4>)
 80086ee:	f000 fa29 	bl	8008b44 <__malloc_lock>
 80086f2:	6833      	ldr	r3, [r6, #0]
 80086f4:	461c      	mov	r4, r3
 80086f6:	bb34      	cbnz	r4, 8008746 <_malloc_r+0x82>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4638      	mov	r0, r7
 80086fc:	f7ff ffc2 	bl	8008684 <sbrk_aligned>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	4604      	mov	r4, r0
 8008704:	d14d      	bne.n	80087a2 <_malloc_r+0xde>
 8008706:	6834      	ldr	r4, [r6, #0]
 8008708:	4626      	mov	r6, r4
 800870a:	2e00      	cmp	r6, #0
 800870c:	d140      	bne.n	8008790 <_malloc_r+0xcc>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	4631      	mov	r1, r6
 8008712:	4638      	mov	r0, r7
 8008714:	eb04 0803 	add.w	r8, r4, r3
 8008718:	f000 f8ca 	bl	80088b0 <_sbrk_r>
 800871c:	4580      	cmp	r8, r0
 800871e:	d13a      	bne.n	8008796 <_malloc_r+0xd2>
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	3503      	adds	r5, #3
 8008724:	1a6d      	subs	r5, r5, r1
 8008726:	f025 0503 	bic.w	r5, r5, #3
 800872a:	3508      	adds	r5, #8
 800872c:	2d0c      	cmp	r5, #12
 800872e:	bf38      	it	cc
 8008730:	250c      	movcc	r5, #12
 8008732:	4629      	mov	r1, r5
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <sbrk_aligned>
 800873a:	3001      	adds	r0, #1
 800873c:	d02b      	beq.n	8008796 <_malloc_r+0xd2>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	442b      	add	r3, r5
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	e00e      	b.n	8008764 <_malloc_r+0xa0>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	1b52      	subs	r2, r2, r5
 800874a:	d41e      	bmi.n	800878a <_malloc_r+0xc6>
 800874c:	2a0b      	cmp	r2, #11
 800874e:	d916      	bls.n	800877e <_malloc_r+0xba>
 8008750:	1961      	adds	r1, r4, r5
 8008752:	42a3      	cmp	r3, r4
 8008754:	6025      	str	r5, [r4, #0]
 8008756:	bf18      	it	ne
 8008758:	6059      	strne	r1, [r3, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	bf08      	it	eq
 800875e:	6031      	streq	r1, [r6, #0]
 8008760:	5162      	str	r2, [r4, r5]
 8008762:	604b      	str	r3, [r1, #4]
 8008764:	4638      	mov	r0, r7
 8008766:	f104 060b 	add.w	r6, r4, #11
 800876a:	f000 f9f1 	bl	8008b50 <__malloc_unlock>
 800876e:	f026 0607 	bic.w	r6, r6, #7
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	1af2      	subs	r2, r6, r3
 8008776:	d0b6      	beq.n	80086e6 <_malloc_r+0x22>
 8008778:	1b9b      	subs	r3, r3, r6
 800877a:	50a3      	str	r3, [r4, r2]
 800877c:	e7b3      	b.n	80086e6 <_malloc_r+0x22>
 800877e:	6862      	ldr	r2, [r4, #4]
 8008780:	42a3      	cmp	r3, r4
 8008782:	bf0c      	ite	eq
 8008784:	6032      	streq	r2, [r6, #0]
 8008786:	605a      	strne	r2, [r3, #4]
 8008788:	e7ec      	b.n	8008764 <_malloc_r+0xa0>
 800878a:	4623      	mov	r3, r4
 800878c:	6864      	ldr	r4, [r4, #4]
 800878e:	e7b2      	b.n	80086f6 <_malloc_r+0x32>
 8008790:	4634      	mov	r4, r6
 8008792:	6876      	ldr	r6, [r6, #4]
 8008794:	e7b9      	b.n	800870a <_malloc_r+0x46>
 8008796:	230c      	movs	r3, #12
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4638      	mov	r0, r7
 800879c:	f000 f9d8 	bl	8008b50 <__malloc_unlock>
 80087a0:	e7a1      	b.n	80086e6 <_malloc_r+0x22>
 80087a2:	6025      	str	r5, [r4, #0]
 80087a4:	e7de      	b.n	8008764 <_malloc_r+0xa0>
 80087a6:	bf00      	nop
 80087a8:	200107f8 	.word	0x200107f8

080087ac <iprintf>:
 80087ac:	b40f      	push	{r0, r1, r2, r3}
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <iprintf+0x2c>)
 80087b0:	b513      	push	{r0, r1, r4, lr}
 80087b2:	681c      	ldr	r4, [r3, #0]
 80087b4:	b124      	cbz	r4, 80087c0 <iprintf+0x14>
 80087b6:	69a3      	ldr	r3, [r4, #24]
 80087b8:	b913      	cbnz	r3, 80087c0 <iprintf+0x14>
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7ff fe86 	bl	80084cc <__sinit>
 80087c0:	ab05      	add	r3, sp, #20
 80087c2:	9a04      	ldr	r2, [sp, #16]
 80087c4:	68a1      	ldr	r1, [r4, #8]
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 fa3d 	bl	8008c48 <_vfiprintf_r>
 80087ce:	b002      	add	sp, #8
 80087d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d4:	b004      	add	sp, #16
 80087d6:	4770      	bx	lr
 80087d8:	20000018 	.word	0x20000018

080087dc <cleanup_glue>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	460c      	mov	r4, r1
 80087e0:	6809      	ldr	r1, [r1, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	b109      	cbz	r1, 80087ea <cleanup_glue+0xe>
 80087e6:	f7ff fff9 	bl	80087dc <cleanup_glue>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f2:	f000 b9b3 	b.w	8008b5c <_free_r>
	...

080087f8 <_reclaim_reent>:
 80087f8:	4b2c      	ldr	r3, [pc, #176]	; (80088ac <_reclaim_reent+0xb4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4283      	cmp	r3, r0
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	d051      	beq.n	80088a8 <_reclaim_reent+0xb0>
 8008804:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008806:	b143      	cbz	r3, 800881a <_reclaim_reent+0x22>
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d14a      	bne.n	80088a4 <_reclaim_reent+0xac>
 800880e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008810:	6819      	ldr	r1, [r3, #0]
 8008812:	b111      	cbz	r1, 800881a <_reclaim_reent+0x22>
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f9a1 	bl	8008b5c <_free_r>
 800881a:	6961      	ldr	r1, [r4, #20]
 800881c:	b111      	cbz	r1, 8008824 <_reclaim_reent+0x2c>
 800881e:	4620      	mov	r0, r4
 8008820:	f000 f99c 	bl	8008b5c <_free_r>
 8008824:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008826:	b111      	cbz	r1, 800882e <_reclaim_reent+0x36>
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f997 	bl	8008b5c <_free_r>
 800882e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008830:	b111      	cbz	r1, 8008838 <_reclaim_reent+0x40>
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f992 	bl	8008b5c <_free_r>
 8008838:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800883a:	b111      	cbz	r1, 8008842 <_reclaim_reent+0x4a>
 800883c:	4620      	mov	r0, r4
 800883e:	f000 f98d 	bl	8008b5c <_free_r>
 8008842:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008844:	b111      	cbz	r1, 800884c <_reclaim_reent+0x54>
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f988 	bl	8008b5c <_free_r>
 800884c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800884e:	b111      	cbz	r1, 8008856 <_reclaim_reent+0x5e>
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f983 	bl	8008b5c <_free_r>
 8008856:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008858:	b111      	cbz	r1, 8008860 <_reclaim_reent+0x68>
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f97e 	bl	8008b5c <_free_r>
 8008860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008862:	b111      	cbz	r1, 800886a <_reclaim_reent+0x72>
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f979 	bl	8008b5c <_free_r>
 800886a:	69a3      	ldr	r3, [r4, #24]
 800886c:	b1e3      	cbz	r3, 80088a8 <_reclaim_reent+0xb0>
 800886e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008870:	4620      	mov	r0, r4
 8008872:	4798      	blx	r3
 8008874:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008876:	b1b9      	cbz	r1, 80088a8 <_reclaim_reent+0xb0>
 8008878:	4620      	mov	r0, r4
 800887a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800887e:	f7ff bfad 	b.w	80087dc <cleanup_glue>
 8008882:	5949      	ldr	r1, [r1, r5]
 8008884:	b941      	cbnz	r1, 8008898 <_reclaim_reent+0xa0>
 8008886:	3504      	adds	r5, #4
 8008888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888a:	2d80      	cmp	r5, #128	; 0x80
 800888c:	68d9      	ldr	r1, [r3, #12]
 800888e:	d1f8      	bne.n	8008882 <_reclaim_reent+0x8a>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f963 	bl	8008b5c <_free_r>
 8008896:	e7ba      	b.n	800880e <_reclaim_reent+0x16>
 8008898:	680e      	ldr	r6, [r1, #0]
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f95e 	bl	8008b5c <_free_r>
 80088a0:	4631      	mov	r1, r6
 80088a2:	e7ef      	b.n	8008884 <_reclaim_reent+0x8c>
 80088a4:	2500      	movs	r5, #0
 80088a6:	e7ef      	b.n	8008888 <_reclaim_reent+0x90>
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	bf00      	nop
 80088ac:	20000018 	.word	0x20000018

080088b0 <_sbrk_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	; (80088cc <_sbrk_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f9 fa32 	bl	8001d24 <_sbrk>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_sbrk_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_sbrk_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20010800 	.word	0x20010800

080088d0 <__sread>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	460c      	mov	r4, r1
 80088d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d8:	f000 fc7a 	bl	80091d0 <_read_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	bfab      	itete	ge
 80088e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088e2:	89a3      	ldrhlt	r3, [r4, #12]
 80088e4:	181b      	addge	r3, r3, r0
 80088e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ea:	bfac      	ite	ge
 80088ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ee:	81a3      	strhlt	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__swrite>:
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	461f      	mov	r7, r3
 80088f8:	898b      	ldrh	r3, [r1, #12]
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4616      	mov	r6, r2
 8008902:	d505      	bpl.n	8008910 <__swrite+0x1e>
 8008904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008908:	2302      	movs	r3, #2
 800890a:	2200      	movs	r2, #0
 800890c:	f000 f908 	bl	8008b20 <_lseek_r>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4628      	mov	r0, r5
 8008922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	f000 b817 	b.w	8008958 <_write_r>

0800892a <__sseek>:
 800892a:	b510      	push	{r4, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 f8f5 	bl	8008b20 <_lseek_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	bf15      	itete	ne
 800893c:	6560      	strne	r0, [r4, #84]	; 0x54
 800893e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008946:	81a3      	strheq	r3, [r4, #12]
 8008948:	bf18      	it	ne
 800894a:	81a3      	strhne	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__sclose>:
 800894e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008952:	f000 b813 	b.w	800897c <_close_r>
	...

08008958 <_write_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	; (8008978 <_write_r+0x20>)
 800895c:	4604      	mov	r4, r0
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	2200      	movs	r2, #0
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f7ff fb57 	bl	800801a <_write>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_write_r+0x1e>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_write_r+0x1e>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	20010800 	.word	0x20010800

0800897c <_close_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	; (8008998 <_close_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7ff fb78 	bl	800807c <_close>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_close_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_close_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20010800 	.word	0x20010800

0800899c <__sflush_r>:
 800899c:	898a      	ldrh	r2, [r1, #12]
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	0710      	lsls	r0, r2, #28
 80089a6:	460c      	mov	r4, r1
 80089a8:	d458      	bmi.n	8008a5c <__sflush_r+0xc0>
 80089aa:	684b      	ldr	r3, [r1, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc05      	bgt.n	80089bc <__sflush_r+0x20>
 80089b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dc02      	bgt.n	80089bc <__sflush_r+0x20>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089be:	2e00      	cmp	r6, #0
 80089c0:	d0f9      	beq.n	80089b6 <__sflush_r+0x1a>
 80089c2:	2300      	movs	r3, #0
 80089c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089c8:	682f      	ldr	r7, [r5, #0]
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	d032      	beq.n	8008a34 <__sflush_r+0x98>
 80089ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	075a      	lsls	r2, r3, #29
 80089d4:	d505      	bpl.n	80089e2 <__sflush_r+0x46>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	1ac0      	subs	r0, r0, r3
 80089da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089dc:	b10b      	cbz	r3, 80089e2 <__sflush_r+0x46>
 80089de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e0:	1ac0      	subs	r0, r0, r3
 80089e2:	2300      	movs	r3, #0
 80089e4:	4602      	mov	r2, r0
 80089e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089e8:	6a21      	ldr	r1, [r4, #32]
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b0      	blx	r6
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	d106      	bne.n	8008a02 <__sflush_r+0x66>
 80089f4:	6829      	ldr	r1, [r5, #0]
 80089f6:	291d      	cmp	r1, #29
 80089f8:	d82c      	bhi.n	8008a54 <__sflush_r+0xb8>
 80089fa:	4a2a      	ldr	r2, [pc, #168]	; (8008aa4 <__sflush_r+0x108>)
 80089fc:	40ca      	lsrs	r2, r1
 80089fe:	07d6      	lsls	r6, r2, #31
 8008a00:	d528      	bpl.n	8008a54 <__sflush_r+0xb8>
 8008a02:	2200      	movs	r2, #0
 8008a04:	6062      	str	r2, [r4, #4]
 8008a06:	04d9      	lsls	r1, r3, #19
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	6022      	str	r2, [r4, #0]
 8008a0c:	d504      	bpl.n	8008a18 <__sflush_r+0x7c>
 8008a0e:	1c42      	adds	r2, r0, #1
 8008a10:	d101      	bne.n	8008a16 <__sflush_r+0x7a>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b903      	cbnz	r3, 8008a18 <__sflush_r+0x7c>
 8008a16:	6560      	str	r0, [r4, #84]	; 0x54
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	602f      	str	r7, [r5, #0]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d0ca      	beq.n	80089b6 <__sflush_r+0x1a>
 8008a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a24:	4299      	cmp	r1, r3
 8008a26:	d002      	beq.n	8008a2e <__sflush_r+0x92>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 f897 	bl	8008b5c <_free_r>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	6360      	str	r0, [r4, #52]	; 0x34
 8008a32:	e7c1      	b.n	80089b8 <__sflush_r+0x1c>
 8008a34:	6a21      	ldr	r1, [r4, #32]
 8008a36:	2301      	movs	r3, #1
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	1c41      	adds	r1, r0, #1
 8008a3e:	d1c7      	bne.n	80089d0 <__sflush_r+0x34>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0c4      	beq.n	80089d0 <__sflush_r+0x34>
 8008a46:	2b1d      	cmp	r3, #29
 8008a48:	d001      	beq.n	8008a4e <__sflush_r+0xb2>
 8008a4a:	2b16      	cmp	r3, #22
 8008a4c:	d101      	bne.n	8008a52 <__sflush_r+0xb6>
 8008a4e:	602f      	str	r7, [r5, #0]
 8008a50:	e7b1      	b.n	80089b6 <__sflush_r+0x1a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	e7ad      	b.n	80089b8 <__sflush_r+0x1c>
 8008a5c:	690f      	ldr	r7, [r1, #16]
 8008a5e:	2f00      	cmp	r7, #0
 8008a60:	d0a9      	beq.n	80089b6 <__sflush_r+0x1a>
 8008a62:	0793      	lsls	r3, r2, #30
 8008a64:	680e      	ldr	r6, [r1, #0]
 8008a66:	bf08      	it	eq
 8008a68:	694b      	ldreq	r3, [r1, #20]
 8008a6a:	600f      	str	r7, [r1, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	2300      	movne	r3, #0
 8008a70:	eba6 0807 	sub.w	r8, r6, r7
 8008a74:	608b      	str	r3, [r1, #8]
 8008a76:	f1b8 0f00 	cmp.w	r8, #0
 8008a7a:	dd9c      	ble.n	80089b6 <__sflush_r+0x1a>
 8008a7c:	6a21      	ldr	r1, [r4, #32]
 8008a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a80:	4643      	mov	r3, r8
 8008a82:	463a      	mov	r2, r7
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b0      	blx	r6
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dc06      	bgt.n	8008a9a <__sflush_r+0xfe>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a98:	e78e      	b.n	80089b8 <__sflush_r+0x1c>
 8008a9a:	4407      	add	r7, r0
 8008a9c:	eba8 0800 	sub.w	r8, r8, r0
 8008aa0:	e7e9      	b.n	8008a76 <__sflush_r+0xda>
 8008aa2:	bf00      	nop
 8008aa4:	20400001 	.word	0x20400001

08008aa8 <_fflush_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	690b      	ldr	r3, [r1, #16]
 8008aac:	4605      	mov	r5, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b913      	cbnz	r3, 8008ab8 <_fflush_r+0x10>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	b118      	cbz	r0, 8008ac2 <_fflush_r+0x1a>
 8008aba:	6983      	ldr	r3, [r0, #24]
 8008abc:	b90b      	cbnz	r3, 8008ac2 <_fflush_r+0x1a>
 8008abe:	f7ff fd05 	bl	80084cc <__sinit>
 8008ac2:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <_fflush_r+0x6c>)
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d11b      	bne.n	8008b00 <_fflush_r+0x58>
 8008ac8:	686c      	ldr	r4, [r5, #4]
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0ef      	beq.n	8008ab2 <_fflush_r+0xa>
 8008ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d404      	bmi.n	8008ae2 <_fflush_r+0x3a>
 8008ad8:	0599      	lsls	r1, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_fflush_r+0x3a>
 8008adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ade:	f7ff fdb8 	bl	8008652 <__retarget_lock_acquire_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7ff ff59 	bl	800899c <__sflush_r>
 8008aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	4605      	mov	r5, r0
 8008af0:	d4e0      	bmi.n	8008ab4 <_fflush_r+0xc>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	059b      	lsls	r3, r3, #22
 8008af6:	d4dd      	bmi.n	8008ab4 <_fflush_r+0xc>
 8008af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afa:	f7ff fdab 	bl	8008654 <__retarget_lock_release_recursive>
 8008afe:	e7d9      	b.n	8008ab4 <_fflush_r+0xc>
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <_fflush_r+0x70>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d101      	bne.n	8008b0a <_fflush_r+0x62>
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	e7df      	b.n	8008aca <_fflush_r+0x22>
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <_fflush_r+0x74>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	bf08      	it	eq
 8008b10:	68ec      	ldreq	r4, [r5, #12]
 8008b12:	e7da      	b.n	8008aca <_fflush_r+0x22>
 8008b14:	080096c8 	.word	0x080096c8
 8008b18:	080096e8 	.word	0x080096e8
 8008b1c:	080096a8 	.word	0x080096a8

08008b20 <_lseek_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4d07      	ldr	r5, [pc, #28]	; (8008b40 <_lseek_r+0x20>)
 8008b24:	4604      	mov	r4, r0
 8008b26:	4608      	mov	r0, r1
 8008b28:	4611      	mov	r1, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	602a      	str	r2, [r5, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f7ff fa61 	bl	8007ff6 <_lseek>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_lseek_r+0x1e>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_lseek_r+0x1e>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	20010800 	.word	0x20010800

08008b44 <__malloc_lock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__malloc_lock+0x8>)
 8008b46:	f7ff bd84 	b.w	8008652 <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	200107f4 	.word	0x200107f4

08008b50 <__malloc_unlock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__malloc_unlock+0x8>)
 8008b52:	f7ff bd7f 	b.w	8008654 <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	200107f4 	.word	0x200107f4

08008b5c <_free_r>:
 8008b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	d044      	beq.n	8008bec <_free_r+0x90>
 8008b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b66:	9001      	str	r0, [sp, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b6e:	bfb8      	it	lt
 8008b70:	18e4      	addlt	r4, r4, r3
 8008b72:	f7ff ffe7 	bl	8008b44 <__malloc_lock>
 8008b76:	4a1e      	ldr	r2, [pc, #120]	; (8008bf0 <_free_r+0x94>)
 8008b78:	9801      	ldr	r0, [sp, #4]
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	b933      	cbnz	r3, 8008b8c <_free_r+0x30>
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	6014      	str	r4, [r2, #0]
 8008b82:	b003      	add	sp, #12
 8008b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b88:	f7ff bfe2 	b.w	8008b50 <__malloc_unlock>
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	d908      	bls.n	8008ba2 <_free_r+0x46>
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	1961      	adds	r1, r4, r5
 8008b94:	428b      	cmp	r3, r1
 8008b96:	bf01      	itttt	eq
 8008b98:	6819      	ldreq	r1, [r3, #0]
 8008b9a:	685b      	ldreq	r3, [r3, #4]
 8008b9c:	1949      	addeq	r1, r1, r5
 8008b9e:	6021      	streq	r1, [r4, #0]
 8008ba0:	e7ed      	b.n	8008b7e <_free_r+0x22>
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	b10b      	cbz	r3, 8008bac <_free_r+0x50>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d9fa      	bls.n	8008ba2 <_free_r+0x46>
 8008bac:	6811      	ldr	r1, [r2, #0]
 8008bae:	1855      	adds	r5, r2, r1
 8008bb0:	42a5      	cmp	r5, r4
 8008bb2:	d10b      	bne.n	8008bcc <_free_r+0x70>
 8008bb4:	6824      	ldr	r4, [r4, #0]
 8008bb6:	4421      	add	r1, r4
 8008bb8:	1854      	adds	r4, r2, r1
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	6011      	str	r1, [r2, #0]
 8008bbe:	d1e0      	bne.n	8008b82 <_free_r+0x26>
 8008bc0:	681c      	ldr	r4, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	6053      	str	r3, [r2, #4]
 8008bc6:	4421      	add	r1, r4
 8008bc8:	6011      	str	r1, [r2, #0]
 8008bca:	e7da      	b.n	8008b82 <_free_r+0x26>
 8008bcc:	d902      	bls.n	8008bd4 <_free_r+0x78>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	e7d6      	b.n	8008b82 <_free_r+0x26>
 8008bd4:	6825      	ldr	r5, [r4, #0]
 8008bd6:	1961      	adds	r1, r4, r5
 8008bd8:	428b      	cmp	r3, r1
 8008bda:	bf04      	itt	eq
 8008bdc:	6819      	ldreq	r1, [r3, #0]
 8008bde:	685b      	ldreq	r3, [r3, #4]
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	bf04      	itt	eq
 8008be4:	1949      	addeq	r1, r1, r5
 8008be6:	6021      	streq	r1, [r4, #0]
 8008be8:	6054      	str	r4, [r2, #4]
 8008bea:	e7ca      	b.n	8008b82 <_free_r+0x26>
 8008bec:	b003      	add	sp, #12
 8008bee:	bd30      	pop	{r4, r5, pc}
 8008bf0:	200107f8 	.word	0x200107f8

08008bf4 <__sfputc_r>:
 8008bf4:	6893      	ldr	r3, [r2, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	b410      	push	{r4}
 8008bfc:	6093      	str	r3, [r2, #8]
 8008bfe:	da08      	bge.n	8008c12 <__sfputc_r+0x1e>
 8008c00:	6994      	ldr	r4, [r2, #24]
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	db01      	blt.n	8008c0a <__sfputc_r+0x16>
 8008c06:	290a      	cmp	r1, #10
 8008c08:	d103      	bne.n	8008c12 <__sfputc_r+0x1e>
 8008c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c0e:	f000 baf1 	b.w	80091f4 <__swbuf_r>
 8008c12:	6813      	ldr	r3, [r2, #0]
 8008c14:	1c58      	adds	r0, r3, #1
 8008c16:	6010      	str	r0, [r2, #0]
 8008c18:	7019      	strb	r1, [r3, #0]
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <__sfputs_r>:
 8008c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c24:	4606      	mov	r6, r0
 8008c26:	460f      	mov	r7, r1
 8008c28:	4614      	mov	r4, r2
 8008c2a:	18d5      	adds	r5, r2, r3
 8008c2c:	42ac      	cmp	r4, r5
 8008c2e:	d101      	bne.n	8008c34 <__sfputs_r+0x12>
 8008c30:	2000      	movs	r0, #0
 8008c32:	e007      	b.n	8008c44 <__sfputs_r+0x22>
 8008c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c38:	463a      	mov	r2, r7
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ffda 	bl	8008bf4 <__sfputc_r>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d1f3      	bne.n	8008c2c <__sfputs_r+0xa>
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c48 <_vfiprintf_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	460d      	mov	r5, r1
 8008c4e:	b09d      	sub	sp, #116	; 0x74
 8008c50:	4614      	mov	r4, r2
 8008c52:	4698      	mov	r8, r3
 8008c54:	4606      	mov	r6, r0
 8008c56:	b118      	cbz	r0, 8008c60 <_vfiprintf_r+0x18>
 8008c58:	6983      	ldr	r3, [r0, #24]
 8008c5a:	b90b      	cbnz	r3, 8008c60 <_vfiprintf_r+0x18>
 8008c5c:	f7ff fc36 	bl	80084cc <__sinit>
 8008c60:	4b89      	ldr	r3, [pc, #548]	; (8008e88 <_vfiprintf_r+0x240>)
 8008c62:	429d      	cmp	r5, r3
 8008c64:	d11b      	bne.n	8008c9e <_vfiprintf_r+0x56>
 8008c66:	6875      	ldr	r5, [r6, #4]
 8008c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x32>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x32>
 8008c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c76:	f7ff fcec 	bl	8008652 <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x3c>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b9eb      	cbnz	r3, 8008cc0 <_vfiprintf_r+0x78>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 fb06 	bl	8009298 <__swsetup_r>
 8008c8c:	b1c0      	cbz	r0, 8008cc0 <_vfiprintf_r+0x78>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d50e      	bpl.n	8008cb2 <_vfiprintf_r+0x6a>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c98:	b01d      	add	sp, #116	; 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	4b7b      	ldr	r3, [pc, #492]	; (8008e8c <_vfiprintf_r+0x244>)
 8008ca0:	429d      	cmp	r5, r3
 8008ca2:	d101      	bne.n	8008ca8 <_vfiprintf_r+0x60>
 8008ca4:	68b5      	ldr	r5, [r6, #8]
 8008ca6:	e7df      	b.n	8008c68 <_vfiprintf_r+0x20>
 8008ca8:	4b79      	ldr	r3, [pc, #484]	; (8008e90 <_vfiprintf_r+0x248>)
 8008caa:	429d      	cmp	r5, r3
 8008cac:	bf08      	it	eq
 8008cae:	68f5      	ldreq	r5, [r6, #12]
 8008cb0:	e7da      	b.n	8008c68 <_vfiprintf_r+0x20>
 8008cb2:	89ab      	ldrh	r3, [r5, #12]
 8008cb4:	0598      	lsls	r0, r3, #22
 8008cb6:	d4ed      	bmi.n	8008c94 <_vfiprintf_r+0x4c>
 8008cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cba:	f7ff fccb 	bl	8008654 <__retarget_lock_release_recursive>
 8008cbe:	e7e9      	b.n	8008c94 <_vfiprintf_r+0x4c>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cce:	2330      	movs	r3, #48	; 0x30
 8008cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e94 <_vfiprintf_r+0x24c>
 8008cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd8:	f04f 0901 	mov.w	r9, #1
 8008cdc:	4623      	mov	r3, r4
 8008cde:	469a      	mov	sl, r3
 8008ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce4:	b10a      	cbz	r2, 8008cea <_vfiprintf_r+0xa2>
 8008ce6:	2a25      	cmp	r2, #37	; 0x25
 8008ce8:	d1f9      	bne.n	8008cde <_vfiprintf_r+0x96>
 8008cea:	ebba 0b04 	subs.w	fp, sl, r4
 8008cee:	d00b      	beq.n	8008d08 <_vfiprintf_r+0xc0>
 8008cf0:	465b      	mov	r3, fp
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ff93 	bl	8008c22 <__sfputs_r>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f000 80aa 	beq.w	8008e56 <_vfiprintf_r+0x20e>
 8008d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d04:	445a      	add	r2, fp
 8008d06:	9209      	str	r2, [sp, #36]	; 0x24
 8008d08:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80a2 	beq.w	8008e56 <_vfiprintf_r+0x20e>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1c:	f10a 0a01 	add.w	sl, sl, #1
 8008d20:	9304      	str	r3, [sp, #16]
 8008d22:	9307      	str	r3, [sp, #28]
 8008d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d28:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2a:	4654      	mov	r4, sl
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d32:	4858      	ldr	r0, [pc, #352]	; (8008e94 <_vfiprintf_r+0x24c>)
 8008d34:	f7f7 fa5c 	bl	80001f0 <memchr>
 8008d38:	9a04      	ldr	r2, [sp, #16]
 8008d3a:	b9d8      	cbnz	r0, 8008d74 <_vfiprintf_r+0x12c>
 8008d3c:	06d1      	lsls	r1, r2, #27
 8008d3e:	bf44      	itt	mi
 8008d40:	2320      	movmi	r3, #32
 8008d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d46:	0713      	lsls	r3, r2, #28
 8008d48:	bf44      	itt	mi
 8008d4a:	232b      	movmi	r3, #43	; 0x2b
 8008d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d50:	f89a 3000 	ldrb.w	r3, [sl]
 8008d54:	2b2a      	cmp	r3, #42	; 0x2a
 8008d56:	d015      	beq.n	8008d84 <_vfiprintf_r+0x13c>
 8008d58:	9a07      	ldr	r2, [sp, #28]
 8008d5a:	4654      	mov	r4, sl
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f04f 0c0a 	mov.w	ip, #10
 8008d62:	4621      	mov	r1, r4
 8008d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d68:	3b30      	subs	r3, #48	; 0x30
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d94e      	bls.n	8008e0c <_vfiprintf_r+0x1c4>
 8008d6e:	b1b0      	cbz	r0, 8008d9e <_vfiprintf_r+0x156>
 8008d70:	9207      	str	r2, [sp, #28]
 8008d72:	e014      	b.n	8008d9e <_vfiprintf_r+0x156>
 8008d74:	eba0 0308 	sub.w	r3, r0, r8
 8008d78:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	46a2      	mov	sl, r4
 8008d82:	e7d2      	b.n	8008d2a <_vfiprintf_r+0xe2>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	1d19      	adds	r1, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	9103      	str	r1, [sp, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfbb      	ittet	lt
 8008d90:	425b      	neglt	r3, r3
 8008d92:	f042 0202 	orrlt.w	r2, r2, #2
 8008d96:	9307      	strge	r3, [sp, #28]
 8008d98:	9307      	strlt	r3, [sp, #28]
 8008d9a:	bfb8      	it	lt
 8008d9c:	9204      	strlt	r2, [sp, #16]
 8008d9e:	7823      	ldrb	r3, [r4, #0]
 8008da0:	2b2e      	cmp	r3, #46	; 0x2e
 8008da2:	d10c      	bne.n	8008dbe <_vfiprintf_r+0x176>
 8008da4:	7863      	ldrb	r3, [r4, #1]
 8008da6:	2b2a      	cmp	r3, #42	; 0x2a
 8008da8:	d135      	bne.n	8008e16 <_vfiprintf_r+0x1ce>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9203      	str	r2, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfb8      	it	lt
 8008db6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008dba:	3402      	adds	r4, #2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ea4 <_vfiprintf_r+0x25c>
 8008dc2:	7821      	ldrb	r1, [r4, #0]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa12 	bl	80001f0 <memchr>
 8008dcc:	b140      	cbz	r0, 8008de0 <_vfiprintf_r+0x198>
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	eba0 000a 	sub.w	r0, r0, sl
 8008dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	4303      	orrs	r3, r0
 8008ddc:	3401      	adds	r4, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	482c      	ldr	r0, [pc, #176]	; (8008e98 <_vfiprintf_r+0x250>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dea:	2206      	movs	r2, #6
 8008dec:	f7f7 fa00 	bl	80001f0 <memchr>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d03f      	beq.n	8008e74 <_vfiprintf_r+0x22c>
 8008df4:	4b29      	ldr	r3, [pc, #164]	; (8008e9c <_vfiprintf_r+0x254>)
 8008df6:	bb1b      	cbnz	r3, 8008e40 <_vfiprintf_r+0x1f8>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	443b      	add	r3, r7
 8008e08:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0a:	e767      	b.n	8008cdc <_vfiprintf_r+0x94>
 8008e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e10:	460c      	mov	r4, r1
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7a5      	b.n	8008d62 <_vfiprintf_r+0x11a>
 8008e16:	2300      	movs	r3, #0
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e28:	3a30      	subs	r2, #48	; 0x30
 8008e2a:	2a09      	cmp	r2, #9
 8008e2c:	d903      	bls.n	8008e36 <_vfiprintf_r+0x1ee>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c5      	beq.n	8008dbe <_vfiprintf_r+0x176>
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	e7c3      	b.n	8008dbe <_vfiprintf_r+0x176>
 8008e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7f0      	b.n	8008e22 <_vfiprintf_r+0x1da>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4b16      	ldr	r3, [pc, #88]	; (8008ea0 <_vfiprintf_r+0x258>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f3af 8000 	nop.w
 8008e50:	4607      	mov	r7, r0
 8008e52:	1c78      	adds	r0, r7, #1
 8008e54:	d1d6      	bne.n	8008e04 <_vfiprintf_r+0x1bc>
 8008e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e58:	07d9      	lsls	r1, r3, #31
 8008e5a:	d405      	bmi.n	8008e68 <_vfiprintf_r+0x220>
 8008e5c:	89ab      	ldrh	r3, [r5, #12]
 8008e5e:	059a      	lsls	r2, r3, #22
 8008e60:	d402      	bmi.n	8008e68 <_vfiprintf_r+0x220>
 8008e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e64:	f7ff fbf6 	bl	8008654 <__retarget_lock_release_recursive>
 8008e68:	89ab      	ldrh	r3, [r5, #12]
 8008e6a:	065b      	lsls	r3, r3, #25
 8008e6c:	f53f af12 	bmi.w	8008c94 <_vfiprintf_r+0x4c>
 8008e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e72:	e711      	b.n	8008c98 <_vfiprintf_r+0x50>
 8008e74:	ab03      	add	r3, sp, #12
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	462a      	mov	r2, r5
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <_vfiprintf_r+0x258>)
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f000 f880 	bl	8008f84 <_printf_i>
 8008e84:	e7e4      	b.n	8008e50 <_vfiprintf_r+0x208>
 8008e86:	bf00      	nop
 8008e88:	080096c8 	.word	0x080096c8
 8008e8c:	080096e8 	.word	0x080096e8
 8008e90:	080096a8 	.word	0x080096a8
 8008e94:	0800970c 	.word	0x0800970c
 8008e98:	08009716 	.word	0x08009716
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08008c23 	.word	0x08008c23
 8008ea4:	08009712 	.word	0x08009712

08008ea8 <_printf_common>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	4616      	mov	r6, r2
 8008eae:	4699      	mov	r9, r3
 8008eb0:	688a      	ldr	r2, [r1, #8]
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	bfb8      	it	lt
 8008ebc:	4613      	movlt	r3, r2
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	b10a      	cbz	r2, 8008ece <_printf_common+0x26>
 8008eca:	3301      	adds	r3, #1
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	0699      	lsls	r1, r3, #26
 8008ed2:	bf42      	ittt	mi
 8008ed4:	6833      	ldrmi	r3, [r6, #0]
 8008ed6:	3302      	addmi	r3, #2
 8008ed8:	6033      	strmi	r3, [r6, #0]
 8008eda:	6825      	ldr	r5, [r4, #0]
 8008edc:	f015 0506 	ands.w	r5, r5, #6
 8008ee0:	d106      	bne.n	8008ef0 <_printf_common+0x48>
 8008ee2:	f104 0a19 	add.w	sl, r4, #25
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc26      	bgt.n	8008f3e <_printf_common+0x96>
 8008ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ef4:	1e13      	subs	r3, r2, #0
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	bf18      	it	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	0692      	lsls	r2, r2, #26
 8008efe:	d42b      	bmi.n	8008f58 <_printf_common+0xb0>
 8008f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d01e      	beq.n	8008f4c <_printf_common+0xa4>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	68e5      	ldr	r5, [r4, #12]
 8008f12:	6832      	ldr	r2, [r6, #0]
 8008f14:	f003 0306 	and.w	r3, r3, #6
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	bf08      	it	eq
 8008f1c:	1aad      	subeq	r5, r5, r2
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	bf0c      	ite	eq
 8008f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f28:	2500      	movne	r5, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bfc4      	itt	gt
 8008f2e:	1a9b      	subgt	r3, r3, r2
 8008f30:	18ed      	addgt	r5, r5, r3
 8008f32:	2600      	movs	r6, #0
 8008f34:	341a      	adds	r4, #26
 8008f36:	42b5      	cmp	r5, r6
 8008f38:	d11a      	bne.n	8008f70 <_printf_common+0xc8>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e008      	b.n	8008f50 <_printf_common+0xa8>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	4649      	mov	r1, r9
 8008f44:	4638      	mov	r0, r7
 8008f46:	47c0      	blx	r8
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d103      	bne.n	8008f54 <_printf_common+0xac>
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	3501      	adds	r5, #1
 8008f56:	e7c6      	b.n	8008ee6 <_printf_common+0x3e>
 8008f58:	18e1      	adds	r1, r4, r3
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	2030      	movs	r0, #48	; 0x30
 8008f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f62:	4422      	add	r2, r4
 8008f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7c7      	b.n	8008f00 <_printf_common+0x58>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4622      	mov	r2, r4
 8008f74:	4649      	mov	r1, r9
 8008f76:	4638      	mov	r0, r7
 8008f78:	47c0      	blx	r8
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d0e6      	beq.n	8008f4c <_printf_common+0xa4>
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7d9      	b.n	8008f36 <_printf_common+0x8e>
	...

08008f84 <_printf_i>:
 8008f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	7e0f      	ldrb	r7, [r1, #24]
 8008f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f8c:	2f78      	cmp	r7, #120	; 0x78
 8008f8e:	4691      	mov	r9, r2
 8008f90:	4680      	mov	r8, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	469a      	mov	sl, r3
 8008f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f9a:	d807      	bhi.n	8008fac <_printf_i+0x28>
 8008f9c:	2f62      	cmp	r7, #98	; 0x62
 8008f9e:	d80a      	bhi.n	8008fb6 <_printf_i+0x32>
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	f000 80d8 	beq.w	8009156 <_printf_i+0x1d2>
 8008fa6:	2f58      	cmp	r7, #88	; 0x58
 8008fa8:	f000 80a3 	beq.w	80090f2 <_printf_i+0x16e>
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fb4:	e03a      	b.n	800902c <_printf_i+0xa8>
 8008fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fba:	2b15      	cmp	r3, #21
 8008fbc:	d8f6      	bhi.n	8008fac <_printf_i+0x28>
 8008fbe:	a101      	add	r1, pc, #4	; (adr r1, 8008fc4 <_printf_i+0x40>)
 8008fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc4:	0800901d 	.word	0x0800901d
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08008fad 	.word	0x08008fad
 8008fd0:	08008fad 	.word	0x08008fad
 8008fd4:	08008fad 	.word	0x08008fad
 8008fd8:	08008fad 	.word	0x08008fad
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08008fad 	.word	0x08008fad
 8008fe4:	08008fad 	.word	0x08008fad
 8008fe8:	08008fad 	.word	0x08008fad
 8008fec:	08008fad 	.word	0x08008fad
 8008ff0:	0800913d 	.word	0x0800913d
 8008ff4:	08009061 	.word	0x08009061
 8008ff8:	0800911f 	.word	0x0800911f
 8008ffc:	08008fad 	.word	0x08008fad
 8009000:	08008fad 	.word	0x08008fad
 8009004:	0800915f 	.word	0x0800915f
 8009008:	08008fad 	.word	0x08008fad
 800900c:	08009061 	.word	0x08009061
 8009010:	08008fad 	.word	0x08008fad
 8009014:	08008fad 	.word	0x08008fad
 8009018:	08009127 	.word	0x08009127
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	602a      	str	r2, [r5, #0]
 8009024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800902c:	2301      	movs	r3, #1
 800902e:	e0a3      	b.n	8009178 <_printf_i+0x1f4>
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	6829      	ldr	r1, [r5, #0]
 8009034:	0606      	lsls	r6, r0, #24
 8009036:	f101 0304 	add.w	r3, r1, #4
 800903a:	d50a      	bpl.n	8009052 <_printf_i+0xce>
 800903c:	680e      	ldr	r6, [r1, #0]
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	2e00      	cmp	r6, #0
 8009042:	da03      	bge.n	800904c <_printf_i+0xc8>
 8009044:	232d      	movs	r3, #45	; 0x2d
 8009046:	4276      	negs	r6, r6
 8009048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800904c:	485e      	ldr	r0, [pc, #376]	; (80091c8 <_printf_i+0x244>)
 800904e:	230a      	movs	r3, #10
 8009050:	e019      	b.n	8009086 <_printf_i+0x102>
 8009052:	680e      	ldr	r6, [r1, #0]
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	f010 0f40 	tst.w	r0, #64	; 0x40
 800905a:	bf18      	it	ne
 800905c:	b236      	sxthne	r6, r6
 800905e:	e7ef      	b.n	8009040 <_printf_i+0xbc>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	1d19      	adds	r1, r3, #4
 8009066:	6029      	str	r1, [r5, #0]
 8009068:	0601      	lsls	r1, r0, #24
 800906a:	d501      	bpl.n	8009070 <_printf_i+0xec>
 800906c:	681e      	ldr	r6, [r3, #0]
 800906e:	e002      	b.n	8009076 <_printf_i+0xf2>
 8009070:	0646      	lsls	r6, r0, #25
 8009072:	d5fb      	bpl.n	800906c <_printf_i+0xe8>
 8009074:	881e      	ldrh	r6, [r3, #0]
 8009076:	4854      	ldr	r0, [pc, #336]	; (80091c8 <_printf_i+0x244>)
 8009078:	2f6f      	cmp	r7, #111	; 0x6f
 800907a:	bf0c      	ite	eq
 800907c:	2308      	moveq	r3, #8
 800907e:	230a      	movne	r3, #10
 8009080:	2100      	movs	r1, #0
 8009082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009086:	6865      	ldr	r5, [r4, #4]
 8009088:	60a5      	str	r5, [r4, #8]
 800908a:	2d00      	cmp	r5, #0
 800908c:	bfa2      	ittt	ge
 800908e:	6821      	ldrge	r1, [r4, #0]
 8009090:	f021 0104 	bicge.w	r1, r1, #4
 8009094:	6021      	strge	r1, [r4, #0]
 8009096:	b90e      	cbnz	r6, 800909c <_printf_i+0x118>
 8009098:	2d00      	cmp	r5, #0
 800909a:	d04d      	beq.n	8009138 <_printf_i+0x1b4>
 800909c:	4615      	mov	r5, r2
 800909e:	fbb6 f1f3 	udiv	r1, r6, r3
 80090a2:	fb03 6711 	mls	r7, r3, r1, r6
 80090a6:	5dc7      	ldrb	r7, [r0, r7]
 80090a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090ac:	4637      	mov	r7, r6
 80090ae:	42bb      	cmp	r3, r7
 80090b0:	460e      	mov	r6, r1
 80090b2:	d9f4      	bls.n	800909e <_printf_i+0x11a>
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d10b      	bne.n	80090d0 <_printf_i+0x14c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	07de      	lsls	r6, r3, #31
 80090bc:	d508      	bpl.n	80090d0 <_printf_i+0x14c>
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	4299      	cmp	r1, r3
 80090c4:	bfde      	ittt	le
 80090c6:	2330      	movle	r3, #48	; 0x30
 80090c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80090d0:	1b52      	subs	r2, r2, r5
 80090d2:	6122      	str	r2, [r4, #16]
 80090d4:	f8cd a000 	str.w	sl, [sp]
 80090d8:	464b      	mov	r3, r9
 80090da:	aa03      	add	r2, sp, #12
 80090dc:	4621      	mov	r1, r4
 80090de:	4640      	mov	r0, r8
 80090e0:	f7ff fee2 	bl	8008ea8 <_printf_common>
 80090e4:	3001      	adds	r0, #1
 80090e6:	d14c      	bne.n	8009182 <_printf_i+0x1fe>
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ec:	b004      	add	sp, #16
 80090ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f2:	4835      	ldr	r0, [pc, #212]	; (80091c8 <_printf_i+0x244>)
 80090f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090f8:	6829      	ldr	r1, [r5, #0]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009100:	6029      	str	r1, [r5, #0]
 8009102:	061d      	lsls	r5, r3, #24
 8009104:	d514      	bpl.n	8009130 <_printf_i+0x1ac>
 8009106:	07df      	lsls	r7, r3, #31
 8009108:	bf44      	itt	mi
 800910a:	f043 0320 	orrmi.w	r3, r3, #32
 800910e:	6023      	strmi	r3, [r4, #0]
 8009110:	b91e      	cbnz	r6, 800911a <_printf_i+0x196>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	f023 0320 	bic.w	r3, r3, #32
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	2310      	movs	r3, #16
 800911c:	e7b0      	b.n	8009080 <_printf_i+0xfc>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	f043 0320 	orr.w	r3, r3, #32
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	2378      	movs	r3, #120	; 0x78
 8009128:	4828      	ldr	r0, [pc, #160]	; (80091cc <_printf_i+0x248>)
 800912a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800912e:	e7e3      	b.n	80090f8 <_printf_i+0x174>
 8009130:	0659      	lsls	r1, r3, #25
 8009132:	bf48      	it	mi
 8009134:	b2b6      	uxthmi	r6, r6
 8009136:	e7e6      	b.n	8009106 <_printf_i+0x182>
 8009138:	4615      	mov	r5, r2
 800913a:	e7bb      	b.n	80090b4 <_printf_i+0x130>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	6826      	ldr	r6, [r4, #0]
 8009140:	6961      	ldr	r1, [r4, #20]
 8009142:	1d18      	adds	r0, r3, #4
 8009144:	6028      	str	r0, [r5, #0]
 8009146:	0635      	lsls	r5, r6, #24
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	d501      	bpl.n	8009150 <_printf_i+0x1cc>
 800914c:	6019      	str	r1, [r3, #0]
 800914e:	e002      	b.n	8009156 <_printf_i+0x1d2>
 8009150:	0670      	lsls	r0, r6, #25
 8009152:	d5fb      	bpl.n	800914c <_printf_i+0x1c8>
 8009154:	8019      	strh	r1, [r3, #0]
 8009156:	2300      	movs	r3, #0
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	4615      	mov	r5, r2
 800915c:	e7ba      	b.n	80090d4 <_printf_i+0x150>
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	602a      	str	r2, [r5, #0]
 8009164:	681d      	ldr	r5, [r3, #0]
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	2100      	movs	r1, #0
 800916a:	4628      	mov	r0, r5
 800916c:	f7f7 f840 	bl	80001f0 <memchr>
 8009170:	b108      	cbz	r0, 8009176 <_printf_i+0x1f2>
 8009172:	1b40      	subs	r0, r0, r5
 8009174:	6060      	str	r0, [r4, #4]
 8009176:	6863      	ldr	r3, [r4, #4]
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	2300      	movs	r3, #0
 800917c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009180:	e7a8      	b.n	80090d4 <_printf_i+0x150>
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	462a      	mov	r2, r5
 8009186:	4649      	mov	r1, r9
 8009188:	4640      	mov	r0, r8
 800918a:	47d0      	blx	sl
 800918c:	3001      	adds	r0, #1
 800918e:	d0ab      	beq.n	80090e8 <_printf_i+0x164>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	079b      	lsls	r3, r3, #30
 8009194:	d413      	bmi.n	80091be <_printf_i+0x23a>
 8009196:	68e0      	ldr	r0, [r4, #12]
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	4298      	cmp	r0, r3
 800919c:	bfb8      	it	lt
 800919e:	4618      	movlt	r0, r3
 80091a0:	e7a4      	b.n	80090ec <_printf_i+0x168>
 80091a2:	2301      	movs	r3, #1
 80091a4:	4632      	mov	r2, r6
 80091a6:	4649      	mov	r1, r9
 80091a8:	4640      	mov	r0, r8
 80091aa:	47d0      	blx	sl
 80091ac:	3001      	adds	r0, #1
 80091ae:	d09b      	beq.n	80090e8 <_printf_i+0x164>
 80091b0:	3501      	adds	r5, #1
 80091b2:	68e3      	ldr	r3, [r4, #12]
 80091b4:	9903      	ldr	r1, [sp, #12]
 80091b6:	1a5b      	subs	r3, r3, r1
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dcf2      	bgt.n	80091a2 <_printf_i+0x21e>
 80091bc:	e7eb      	b.n	8009196 <_printf_i+0x212>
 80091be:	2500      	movs	r5, #0
 80091c0:	f104 0619 	add.w	r6, r4, #25
 80091c4:	e7f5      	b.n	80091b2 <_printf_i+0x22e>
 80091c6:	bf00      	nop
 80091c8:	0800971d 	.word	0x0800971d
 80091cc:	0800972e 	.word	0x0800972e

080091d0 <_read_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_read_r+0x20>)
 80091d4:	4604      	mov	r4, r0
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	2200      	movs	r2, #0
 80091dc:	602a      	str	r2, [r5, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f7fe feb1 	bl	8007f46 <_read>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_read_r+0x1e>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_read_r+0x1e>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20010800 	.word	0x20010800

080091f4 <__swbuf_r>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	460e      	mov	r6, r1
 80091f8:	4614      	mov	r4, r2
 80091fa:	4605      	mov	r5, r0
 80091fc:	b118      	cbz	r0, 8009206 <__swbuf_r+0x12>
 80091fe:	6983      	ldr	r3, [r0, #24]
 8009200:	b90b      	cbnz	r3, 8009206 <__swbuf_r+0x12>
 8009202:	f7ff f963 	bl	80084cc <__sinit>
 8009206:	4b21      	ldr	r3, [pc, #132]	; (800928c <__swbuf_r+0x98>)
 8009208:	429c      	cmp	r4, r3
 800920a:	d12b      	bne.n	8009264 <__swbuf_r+0x70>
 800920c:	686c      	ldr	r4, [r5, #4]
 800920e:	69a3      	ldr	r3, [r4, #24]
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	071a      	lsls	r2, r3, #28
 8009216:	d52f      	bpl.n	8009278 <__swbuf_r+0x84>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b36b      	cbz	r3, 8009278 <__swbuf_r+0x84>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1ac0      	subs	r0, r0, r3
 8009222:	6963      	ldr	r3, [r4, #20]
 8009224:	b2f6      	uxtb	r6, r6
 8009226:	4283      	cmp	r3, r0
 8009228:	4637      	mov	r7, r6
 800922a:	dc04      	bgt.n	8009236 <__swbuf_r+0x42>
 800922c:	4621      	mov	r1, r4
 800922e:	4628      	mov	r0, r5
 8009230:	f7ff fc3a 	bl	8008aa8 <_fflush_r>
 8009234:	bb30      	cbnz	r0, 8009284 <__swbuf_r+0x90>
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	3b01      	subs	r3, #1
 800923a:	60a3      	str	r3, [r4, #8]
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	701e      	strb	r6, [r3, #0]
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	3001      	adds	r0, #1
 8009248:	4283      	cmp	r3, r0
 800924a:	d004      	beq.n	8009256 <__swbuf_r+0x62>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	07db      	lsls	r3, r3, #31
 8009250:	d506      	bpl.n	8009260 <__swbuf_r+0x6c>
 8009252:	2e0a      	cmp	r6, #10
 8009254:	d104      	bne.n	8009260 <__swbuf_r+0x6c>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f7ff fc25 	bl	8008aa8 <_fflush_r>
 800925e:	b988      	cbnz	r0, 8009284 <__swbuf_r+0x90>
 8009260:	4638      	mov	r0, r7
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <__swbuf_r+0x9c>)
 8009266:	429c      	cmp	r4, r3
 8009268:	d101      	bne.n	800926e <__swbuf_r+0x7a>
 800926a:	68ac      	ldr	r4, [r5, #8]
 800926c:	e7cf      	b.n	800920e <__swbuf_r+0x1a>
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <__swbuf_r+0xa0>)
 8009270:	429c      	cmp	r4, r3
 8009272:	bf08      	it	eq
 8009274:	68ec      	ldreq	r4, [r5, #12]
 8009276:	e7ca      	b.n	800920e <__swbuf_r+0x1a>
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f80c 	bl	8009298 <__swsetup_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	d0cb      	beq.n	800921c <__swbuf_r+0x28>
 8009284:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009288:	e7ea      	b.n	8009260 <__swbuf_r+0x6c>
 800928a:	bf00      	nop
 800928c:	080096c8 	.word	0x080096c8
 8009290:	080096e8 	.word	0x080096e8
 8009294:	080096a8 	.word	0x080096a8

08009298 <__swsetup_r>:
 8009298:	4b32      	ldr	r3, [pc, #200]	; (8009364 <__swsetup_r+0xcc>)
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	681d      	ldr	r5, [r3, #0]
 800929e:	4606      	mov	r6, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	b125      	cbz	r5, 80092ae <__swsetup_r+0x16>
 80092a4:	69ab      	ldr	r3, [r5, #24]
 80092a6:	b913      	cbnz	r3, 80092ae <__swsetup_r+0x16>
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff f90f 	bl	80084cc <__sinit>
 80092ae:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <__swsetup_r+0xd0>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d10f      	bne.n	80092d4 <__swsetup_r+0x3c>
 80092b4:	686c      	ldr	r4, [r5, #4]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092bc:	0719      	lsls	r1, r3, #28
 80092be:	d42c      	bmi.n	800931a <__swsetup_r+0x82>
 80092c0:	06dd      	lsls	r5, r3, #27
 80092c2:	d411      	bmi.n	80092e8 <__swsetup_r+0x50>
 80092c4:	2309      	movs	r3, #9
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d2:	e03e      	b.n	8009352 <__swsetup_r+0xba>
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <__swsetup_r+0xd4>)
 80092d6:	429c      	cmp	r4, r3
 80092d8:	d101      	bne.n	80092de <__swsetup_r+0x46>
 80092da:	68ac      	ldr	r4, [r5, #8]
 80092dc:	e7eb      	b.n	80092b6 <__swsetup_r+0x1e>
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <__swsetup_r+0xd8>)
 80092e0:	429c      	cmp	r4, r3
 80092e2:	bf08      	it	eq
 80092e4:	68ec      	ldreq	r4, [r5, #12]
 80092e6:	e7e6      	b.n	80092b6 <__swsetup_r+0x1e>
 80092e8:	0758      	lsls	r0, r3, #29
 80092ea:	d512      	bpl.n	8009312 <__swsetup_r+0x7a>
 80092ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ee:	b141      	cbz	r1, 8009302 <__swsetup_r+0x6a>
 80092f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f4:	4299      	cmp	r1, r3
 80092f6:	d002      	beq.n	80092fe <__swsetup_r+0x66>
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fc2f 	bl	8008b5c <_free_r>
 80092fe:	2300      	movs	r3, #0
 8009300:	6363      	str	r3, [r4, #52]	; 0x34
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	2300      	movs	r3, #0
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f043 0308 	orr.w	r3, r3, #8
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	b94b      	cbnz	r3, 8009332 <__swsetup_r+0x9a>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009328:	d003      	beq.n	8009332 <__swsetup_r+0x9a>
 800932a:	4621      	mov	r1, r4
 800932c:	4630      	mov	r0, r6
 800932e:	f000 f847 	bl	80093c0 <__smakebuf_r>
 8009332:	89a0      	ldrh	r0, [r4, #12]
 8009334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009338:	f010 0301 	ands.w	r3, r0, #1
 800933c:	d00a      	beq.n	8009354 <__swsetup_r+0xbc>
 800933e:	2300      	movs	r3, #0
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6963      	ldr	r3, [r4, #20]
 8009344:	425b      	negs	r3, r3
 8009346:	61a3      	str	r3, [r4, #24]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b943      	cbnz	r3, 800935e <__swsetup_r+0xc6>
 800934c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009350:	d1ba      	bne.n	80092c8 <__swsetup_r+0x30>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	0781      	lsls	r1, r0, #30
 8009356:	bf58      	it	pl
 8009358:	6963      	ldrpl	r3, [r4, #20]
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	e7f4      	b.n	8009348 <__swsetup_r+0xb0>
 800935e:	2000      	movs	r0, #0
 8009360:	e7f7      	b.n	8009352 <__swsetup_r+0xba>
 8009362:	bf00      	nop
 8009364:	20000018 	.word	0x20000018
 8009368:	080096c8 	.word	0x080096c8
 800936c:	080096e8 	.word	0x080096e8
 8009370:	080096a8 	.word	0x080096a8

08009374 <__swhatbuf_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937c:	2900      	cmp	r1, #0
 800937e:	b096      	sub	sp, #88	; 0x58
 8009380:	4614      	mov	r4, r2
 8009382:	461d      	mov	r5, r3
 8009384:	da08      	bge.n	8009398 <__swhatbuf_r+0x24>
 8009386:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	602a      	str	r2, [r5, #0]
 800938e:	061a      	lsls	r2, r3, #24
 8009390:	d410      	bmi.n	80093b4 <__swhatbuf_r+0x40>
 8009392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009396:	e00e      	b.n	80093b6 <__swhatbuf_r+0x42>
 8009398:	466a      	mov	r2, sp
 800939a:	f000 f851 	bl	8009440 <_fstat_r>
 800939e:	2800      	cmp	r0, #0
 80093a0:	dbf1      	blt.n	8009386 <__swhatbuf_r+0x12>
 80093a2:	9a01      	ldr	r2, [sp, #4]
 80093a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093ac:	425a      	negs	r2, r3
 80093ae:	415a      	adcs	r2, r3
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	e7ee      	b.n	8009392 <__swhatbuf_r+0x1e>
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	2000      	movs	r0, #0
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	b016      	add	sp, #88	; 0x58
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080093c0 <__smakebuf_r>:
 80093c0:	898b      	ldrh	r3, [r1, #12]
 80093c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093c4:	079d      	lsls	r5, r3, #30
 80093c6:	4606      	mov	r6, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	d507      	bpl.n	80093dc <__smakebuf_r+0x1c>
 80093cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	2301      	movs	r3, #1
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	b002      	add	sp, #8
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	ab01      	add	r3, sp, #4
 80093de:	466a      	mov	r2, sp
 80093e0:	f7ff ffc8 	bl	8009374 <__swhatbuf_r>
 80093e4:	9900      	ldr	r1, [sp, #0]
 80093e6:	4605      	mov	r5, r0
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff f96b 	bl	80086c4 <_malloc_r>
 80093ee:	b948      	cbnz	r0, 8009404 <__smakebuf_r+0x44>
 80093f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f4:	059a      	lsls	r2, r3, #22
 80093f6:	d4ef      	bmi.n	80093d8 <__smakebuf_r+0x18>
 80093f8:	f023 0303 	bic.w	r3, r3, #3
 80093fc:	f043 0302 	orr.w	r3, r3, #2
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	e7e3      	b.n	80093cc <__smakebuf_r+0xc>
 8009404:	4b0d      	ldr	r3, [pc, #52]	; (800943c <__smakebuf_r+0x7c>)
 8009406:	62b3      	str	r3, [r6, #40]	; 0x28
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	9b00      	ldr	r3, [sp, #0]
 8009414:	6163      	str	r3, [r4, #20]
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	6120      	str	r0, [r4, #16]
 800941a:	b15b      	cbz	r3, 8009434 <__smakebuf_r+0x74>
 800941c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009420:	4630      	mov	r0, r6
 8009422:	f000 f81f 	bl	8009464 <_isatty_r>
 8009426:	b128      	cbz	r0, 8009434 <__smakebuf_r+0x74>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	f043 0301 	orr.w	r3, r3, #1
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	89a0      	ldrh	r0, [r4, #12]
 8009436:	4305      	orrs	r5, r0
 8009438:	81a5      	strh	r5, [r4, #12]
 800943a:	e7cd      	b.n	80093d8 <__smakebuf_r+0x18>
 800943c:	08008465 	.word	0x08008465

08009440 <_fstat_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d07      	ldr	r5, [pc, #28]	; (8009460 <_fstat_r+0x20>)
 8009444:	2300      	movs	r3, #0
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	4611      	mov	r1, r2
 800944c:	602b      	str	r3, [r5, #0]
 800944e:	f7fe fe5c 	bl	800810a <_fstat>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d102      	bne.n	800945c <_fstat_r+0x1c>
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	b103      	cbz	r3, 800945c <_fstat_r+0x1c>
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	bd38      	pop	{r3, r4, r5, pc}
 800945e:	bf00      	nop
 8009460:	20010800 	.word	0x20010800

08009464 <_isatty_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d06      	ldr	r5, [pc, #24]	; (8009480 <_isatty_r+0x1c>)
 8009468:	2300      	movs	r3, #0
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	f7fe ffb2 	bl	80083d8 <_isatty>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_isatty_r+0x1a>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_isatty_r+0x1a>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	20010800 	.word	0x20010800

08009484 <_init>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr

08009490 <_fini>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr
